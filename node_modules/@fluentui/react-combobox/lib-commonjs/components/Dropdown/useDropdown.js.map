{"version":3,"names":["React","require","react_icons_1","react_utilities_1","dropdownKeyActions_1","useComboboxBaseState_1","useComboboxPopup_1","useTriggerListboxSlots_1","Listbox_1","react_utilities_2","useDropdown_unstable","props","ref","baseState","useComboboxBaseState","activeOption","getIndexOfId","getOptionsMatchingText","open","setActiveOption","setFocusVisible","setOpen","primary","triggerNativeProps","root","rootNativeProps","getPartitionedNativeProps","primarySlotTagName","excludedPropNames","rootRef","useRef","popupWidth","setPopupWidth","useState","useEffect","width","_a","current","clientWidth","undefined","searchString","setKeyTimeout","clearKeyTimeout","useTimeout","getNextMatchingOption","matcher","optionText","toLowerCase","indexOf","matches","startIndex","id","length","letters","split","allSameLetter","every","letter","nextMatch","find","option","onTriggerKeyDown","ev","getDropdownActionFromKey","key","nextOption","triggerSlot","listboxSlot","resolveShorthand","button","required","defaultProps","type","children","value","placeholder","onKeyDown","mergeCallbacks","hasFocus","listbox","style","useComboboxPopup","useTriggerListboxSlots","state","components","expandIcon","Listbox","inlinePopup","createElement","ChevronDownRegular","placeholderVisible","useMergedRefs","exports"],"sources":["../src/packages/react-components/react-combobox/src/components/Dropdown/useDropdown.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ChevronDownRegular as ChevronDownIcon } from '@fluentui/react-icons';\nimport { getPartitionedNativeProps, mergeCallbacks, resolveShorthand, useTimeout } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey } from '../../utils/dropdownKeyActions';\nimport { useComboboxBaseState } from '../../utils/useComboboxBaseState';\nimport { useComboboxPopup } from '../../utils/useComboboxPopup';\nimport { useTriggerListboxSlots } from '../../utils/useTriggerListboxSlots';\nimport { Listbox } from '../Listbox/Listbox';\nimport type { Slot } from '@fluentui/react-utilities';\nimport type { OptionValue } from '../../utils/OptionCollection.types';\nimport type { DropdownProps, DropdownState } from './Dropdown.types';\nimport { useMergedRefs } from '@fluentui/react-utilities';\n\n/**\n * Create the state required to render Dropdown.\n *\n * The returned state can be modified with hooks such as useDropdownStyles_unstable,\n * before being passed to renderDropdown_unstable.\n *\n * @param props - props from this instance of Dropdown\n * @param ref - reference to root HTMLElement of Dropdown\n */\nexport const useDropdown_unstable = (props: DropdownProps, ref: React.Ref<HTMLButtonElement>): DropdownState => {\n  const baseState = useComboboxBaseState(props);\n  const { activeOption, getIndexOfId, getOptionsMatchingText, open, setActiveOption, setFocusVisible, setOpen } =\n    baseState;\n\n  const { primary: triggerNativeProps, root: rootNativeProps } = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'button',\n    excludedPropNames: ['children'],\n  });\n\n  // set listbox popup width based off the root/trigger width\n  const rootRef = React.useRef<HTMLDivElement>(null);\n  const [popupWidth, setPopupWidth] = React.useState<string>();\n  React.useEffect(() => {\n    const width = open ? `${rootRef.current?.clientWidth}px` : undefined;\n    setPopupWidth(width);\n  }, [open]);\n\n  // jump to matching option based on typing\n  const searchString = React.useRef('');\n  const [setKeyTimeout, clearKeyTimeout] = useTimeout();\n\n  const getNextMatchingOption = (): OptionValue | undefined => {\n    // first check for matches for the full searchString\n    let matcher = (optionText: string) => optionText.toLowerCase().indexOf(searchString.current) === 0;\n    let matches = getOptionsMatchingText(matcher);\n    let startIndex = activeOption ? getIndexOfId(activeOption.id) : 0;\n\n    // if the dropdown is already open and the searchstring is a single character,\n    // then look after the current activeOption for letters\n    // this is so slowly typing the same letter will cycle through matches\n    if (open && searchString.current.length === 1) {\n      startIndex++;\n    }\n\n    // if there are no direct matches, check if the search is all the same letter, e.g. \"aaa\"\n    if (!matches.length) {\n      const letters = searchString.current.split('');\n      const allSameLetter = letters.length && letters.every(letter => letter === letters[0]);\n\n      // if the search is all the same letter, cycle through options starting with that letter\n      if (allSameLetter) {\n        startIndex++;\n        matcher = (optionText: string) => optionText.toLowerCase().indexOf(letters[0]) === 0;\n        matches = getOptionsMatchingText(matcher);\n      }\n    }\n\n    // if there is an active option and multiple matches,\n    // return first matching option after the current active option, looping back to the top\n    if (matches.length > 1 && activeOption) {\n      const nextMatch = matches.find(option => getIndexOfId(option.id) >= startIndex);\n      return nextMatch ?? matches[0];\n    }\n\n    return matches[0] ?? undefined;\n  };\n\n  const onTriggerKeyDown = (ev: React.KeyboardEvent<HTMLButtonElement>) => {\n    // clear timeout, if it exists\n    clearKeyTimeout();\n\n    // if the key was a char key, update search string\n    if (getDropdownActionFromKey(ev) === 'Type') {\n      // update search string\n      searchString.current += ev.key.toLowerCase();\n      setKeyTimeout(() => {\n        searchString.current = '';\n      }, 500);\n\n      // update state\n      !open && setOpen(ev, true);\n\n      const nextOption = getNextMatchingOption();\n      setActiveOption(nextOption);\n      setFocusVisible(true);\n    }\n  };\n\n  // resolve button and listbox slot props\n  let triggerSlot: Slot<'button'>;\n  let listboxSlot: Slot<typeof Listbox> | undefined;\n\n  triggerSlot = resolveShorthand(props.button, {\n    required: true,\n    defaultProps: {\n      type: 'button',\n      children: baseState.value || props.placeholder,\n      ...triggerNativeProps,\n    },\n  });\n\n  triggerSlot.onKeyDown = mergeCallbacks(onTriggerKeyDown, triggerSlot.onKeyDown);\n\n  listboxSlot =\n    baseState.open || baseState.hasFocus\n      ? resolveShorthand(props.listbox, {\n          required: true,\n          defaultProps: {\n            children: props.children,\n            style: { width: popupWidth },\n          },\n        })\n      : undefined;\n\n  [triggerSlot, listboxSlot] = useComboboxPopup(props, triggerSlot, listboxSlot);\n  [triggerSlot, listboxSlot] = useTriggerListboxSlots(props, baseState, ref, triggerSlot, listboxSlot);\n\n  const state: DropdownState = {\n    components: {\n      root: 'div',\n      button: 'button',\n      expandIcon: 'span',\n      listbox: Listbox,\n    },\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: {\n        'aria-owns': !props.inlinePopup ? listboxSlot?.id : undefined,\n        children: props.children,\n        ...rootNativeProps,\n      },\n    }),\n    button: triggerSlot,\n    listbox: listboxSlot,\n    expandIcon: resolveShorthand(props.expandIcon, {\n      required: true,\n      defaultProps: {\n        children: <ChevronDownIcon />,\n      },\n    }),\n    placeholderVisible: !baseState.value && !!props.placeholder,\n    ...baseState,\n  };\n\n  state.root.ref = useMergedRefs(state.root.ref, rootRef);\n\n  return state;\n};\n"],"mappings":"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"}