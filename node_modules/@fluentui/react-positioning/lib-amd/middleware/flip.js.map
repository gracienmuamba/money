{"version":3,"file":"flip.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-positioning/src/middleware/flip.ts"],"names":[],"mappings":";;;;IAUA,SAAgB,IAAI,CAAC,OAA8B;QACzC,IAAA,oBAAoB,GAA6D,OAAO,qBAApE,EAAE,YAAY,GAA+C,OAAO,aAAtD,EAAE,SAAS,GAAoC,OAAO,UAA3C,EAAE,KAAkC,OAAO,kBAAnB,EAAtB,iBAAiB,mBAAG,EAAE,KAAA,EAAE,KAAK,GAAK,OAAO,MAAZ,CAAa;QAEjG,IAAM,kBAAkB,GAAG,iBAAiB,CAAC,MAAM,CAAc,UAAC,GAAG,EAAE,SAAS;YACxE,IAAA,KAAsB,mCAA2B,CAAC,SAAS,CAAC,EAA1D,QAAQ,cAAA,EAAE,KAAK,WAA2C,CAAC;YACnE,IAAM,SAAS,GAAG,6BAAqB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YAChE,IAAI,SAAS,EAAE;gBACb,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACrB;YACD,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO,UAAQ,yEACV,CAAC,oBAAoB,IAAI,EAAE,QAAQ,EAAE,mBAAmB,EAAE,CAAC,GAC3D,CAAC,YAAY,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,mBAAW,CAAC,SAAS,EAAE,YAAY,CAAC,EAAE,CAAC,KAC1F,gBAAgB,EAAE,SAAS,KACxB,CAAC,kBAAkB,CAAC,MAAM,IAAI,EAAE,kBAAkB,oBAAA,EAAE,CAAC,EACxD,CAAC;IACL,CAAC;IAlBD,oBAkBC","sourcesContent":["import { flip as baseFlip, Placement } from '@floating-ui/dom';\nimport type { PositioningOptions } from '../types';\nimport { getBoundary, resolvePositioningShorthand, toFloatingUIPlacement } from '../utils/index';\n\nexport interface FlipMiddlewareOptions extends Pick<PositioningOptions, 'flipBoundary' | 'fallbackPositions'> {\n  hasScrollableElement?: boolean;\n  container: HTMLElement | null;\n  isRtl?: boolean;\n}\n\nexport function flip(options: FlipMiddlewareOptions) {\n  const { hasScrollableElement, flipBoundary, container, fallbackPositions = [], isRtl } = options;\n\n  const fallbackPlacements = fallbackPositions.reduce<Placement[]>((acc, shorthand) => {\n    const { position, align } = resolvePositioningShorthand(shorthand);\n    const placement = toFloatingUIPlacement(align, position, isRtl);\n    if (placement) {\n      acc.push(placement);\n    }\n    return acc;\n  }, []);\n\n  return baseFlip({\n    ...(hasScrollableElement && { boundary: 'clippingAncestors' }),\n    ...(flipBoundary && { altBoundary: true, boundary: getBoundary(container, flipBoundary) }),\n    fallbackStrategy: 'bestFit',\n    ...(fallbackPlacements.length && { fallbackPlacements }),\n  });\n}\n"]}