"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePortal_unstable = exports.toMountNodeProps = void 0;
const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
const React = /*#__PURE__*/require("react");
const index_1 = /*#__PURE__*/require("../../virtualParent/index");
const usePortalMountNode_1 = /*#__PURE__*/require("./usePortalMountNode");
function toMountNodeProps(mountNode) {
  if (react_utilities_1.isHTMLElement(mountNode)) {
    return {
      element: mountNode
    };
  }
  if (typeof mountNode === 'object') {
    if (mountNode === null) {
      return {
        element: null
      };
    }
    return mountNode;
  }
  return {};
}
exports.toMountNodeProps = toMountNodeProps;
/**
 * Create the state required to render Portal.
 *
 * The returned state can be modified with hooks such as usePortalStyles, before being passed to renderPortal_unstable.
 *
 * @param props - props from this instance of Portal
 */
const usePortal_unstable = props => {
  const {
    element,
    className
  } = toMountNodeProps(props.mountNode);
  const virtualParentRootRef = React.useRef(null);
  const fallbackElement = usePortalMountNode_1.usePortalMountNode({
    disabled: !!element,
    className
  });
  const state = {
    children: props.children,
    mountNode: element !== null && element !== void 0 ? element : fallbackElement,
    virtualParentRootRef
  };
  React.useEffect(() => {
    if (state.virtualParentRootRef.current && state.mountNode) {
      index_1.setVirtualParent(state.mountNode, state.virtualParentRootRef.current);
    }
    return () => {
      if (state.mountNode) {
        index_1.setVirtualParent(state.mountNode, undefined);
      }
    };
  }, [state.virtualParentRootRef, state.mountNode]);
  return state;
};
exports.usePortal_unstable = usePortal_unstable;
//# sourceMappingURL=usePortal.js.map