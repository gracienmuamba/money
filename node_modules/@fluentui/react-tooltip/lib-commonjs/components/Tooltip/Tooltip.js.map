{"version":3,"names":["useTooltip_1","require","renderTooltip_1","react_shared_contexts_1","useTooltipStyles_1","Tooltip","props","state","useTooltip_unstable","useTooltipStyles_unstable","useCustomStyles","useCustomStyleHooks_unstable","renderTooltip_unstable","exports","displayName","isFluentTriggerComponent"],"sources":["../src/packages/react-components/react-tooltip/src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useTooltip_unstable } from './useTooltip';\nimport { renderTooltip_unstable } from './renderTooltip';\nimport { useCustomStyleHooks_unstable } from '@fluentui/react-shared-contexts';\nimport { useTooltipStyles_unstable } from './useTooltipStyles';\nimport type { TooltipProps } from './Tooltip.types';\nimport type { FluentTriggerComponent } from '@fluentui/react-utilities';\n\n/**\n * A tooltip provides light weight contextual information on top of its target element.\n */\nexport const Tooltip: React.FC<TooltipProps> = props => {\n  const state = useTooltip_unstable(props);\n\n  useTooltipStyles_unstable(state);\n\n  const { useTooltipStyles_unstable: useCustomStyles } = useCustomStyleHooks_unstable();\n  useCustomStyles(state);\n\n  return renderTooltip_unstable(state);\n};\n\nTooltip.displayName = 'Tooltip';\n// type casting here is required to ensure internal type FluentTriggerComponent is not leaked\n(Tooltip as FluentTriggerComponent).isFluentTriggerComponent = true;\n"],"mappings":";;;;;;AACA,MAAAA,YAAA,gBAAAC,OAAA;AACA,MAAAC,eAAA,gBAAAD,OAAA;AACA,MAAAE,uBAAA,gBAAAF,OAAA;AACA,MAAAG,kBAAA,gBAAAH,OAAA;AAIA;;;AAGO,MAAMI,OAAO,GAA2BC,KAAK,IAAG;EACrD,MAAMC,KAAK,GAAGP,YAAA,CAAAQ,mBAAmB,CAACF,KAAK,CAAC;EAExCF,kBAAA,CAAAK,yBAAyB,CAACF,KAAK,CAAC;EAEhC,MAAM;IAAEE,yBAAyB,EAAEC;EAAe,CAAE,GAAGP,uBAAA,CAAAQ,4BAA4B,EAAE;EACrFD,eAAe,CAACH,KAAK,CAAC;EAEtB,OAAOL,eAAA,CAAAU,sBAAsB,CAACL,KAAK,CAAC;AACtC,CAAC;AATYM,OAAA,CAAAR,OAAO,GAAAA,OAAA;AAWpBQ,OAAA,CAAAR,OAAO,CAACS,WAAW,GAAG,SAAS;AAC/B;AACCD,OAAA,CAAAR,OAAkC,CAACU,wBAAwB,GAAG,IAAI"}