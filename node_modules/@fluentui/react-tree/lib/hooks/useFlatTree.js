import { useEventCallback } from '@fluentui/react-utilities';
import * as React from 'react';
import { createUnfilteredFlatTree } from '../utils/createUnfilteredFlatTree';
import { createVisibleFlatTree } from '../utils/createVisibleFlatTree';
import { useFlatTreeNavigation } from './useFlatTreeNavigation';
import { useOpenItemsState } from './useOpenItemsState';
/**
 * this hook provides FlatTree API to manage all required mechanisms to convert a list of items into renderable TreeItems
 * in multiple scenarios including virtualization.
 *
 * !!A flat tree is an unofficial spec for tree!!
 *
 * It should be used on cases where more complex interactions with a Tree is required.
 * On simple scenarios it is advised to simply use a nested structure instead.
 *
 * @param items - a list of tree items
 * @param options - in case control over the internal openItems is required
 */
export function useFlatTree_unstable(items, options = {}) {
  const [openItems, updateOpenItems] = useOpenItemsState(options);
  const unfilteredFlatTree = React.useMemo(() => createUnfilteredFlatTree(items), [items]);
  const [navigate, navigationRef] = useFlatTreeNavigation(unfilteredFlatTree);
  const visibleFlatTree = React.useMemo(() => createVisibleFlatTree(unfilteredFlatTree, openItems), [unfilteredFlatTree, openItems]);
  const handleOpenChange = useEventCallback((event, data) => {
    event.preventDefault();
    updateOpenItems(data);
  });
  const handleNavigation = useEventCallback((event, data) => {
    event.preventDefault();
    navigate(data);
  });
  const flatTree = {
    ...visibleFlatTree,
    getTreeProps: () => ({
      ref: navigationRef,
      openItems,
      onOpenChange: handleOpenChange,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      onNavigation_unstable: handleNavigation
    }),
    navigate,
    getItem: id => {
      var _a;
      return (_a = unfilteredFlatTree.itemsPerId.get(id)) !== null && _a !== void 0 ? _a : null;
    }
  };
  return flatTree;
}
//# sourceMappingURL=useFlatTree.js.map