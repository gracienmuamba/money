let count = 1;
// eslint-disable-next-line @typescript-eslint/naming-convention
function flattenTreeRecursive_unstable(items, parent, level = 1) {
  var _a;
  const flatTreeItems = [];
  for (let index = 0; index < items.length; index++) {
    const {
      subtree,
      ...item
    } = items[index];
    const flatTreeItem = {
      'aria-level': level,
      'aria-posinset': index + 1,
      'aria-setsize': items.length,
      parentId: parent === null || parent === void 0 ? void 0 : parent.id,
      id: (_a = item.id) !== null && _a !== void 0 ? _a : `fui-FlatTreeItem-${count++}`,
      leaf: subtree === undefined,
      ...item
    };
    flatTreeItems.push(flatTreeItem);
    if (subtree !== undefined) {
      flatTreeItems.push(...flattenTreeRecursive_unstable(subtree, flatTreeItem, level + 1));
    }
  }
  return flatTreeItems;
}
/**
 * Converts a nested structure to a flat one which can be consumed by `useFlatTreeItems`
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export const flattenTree_unstable = flattenTreeRecursive_unstable;
//# sourceMappingURL=flattenTree.js.map