{"version":3,"names":["react_utilities_1","require","React","createUnfilteredFlatTree_1","createVisibleFlatTree_1","useFlatTreeNavigation_1","useOpenItemsState_1","useFlatTree_unstable","items","options","openItems","updateOpenItems","useOpenItemsState","unfilteredFlatTree","useMemo","createUnfilteredFlatTree","navigate","navigationRef","useFlatTreeNavigation","visibleFlatTree","createVisibleFlatTree","handleOpenChange","useEventCallback","event","data","preventDefault","handleNavigation","flatTree","getTreeProps","ref","onOpenChange","onNavigation_unstable","getItem","id","_a","itemsPerId","get","exports"],"sources":["../src/packages/react-components/react-tree/src/hooks/useFlatTree.ts"],"sourcesContent":["import { useEventCallback } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport {\n  TreeNavigationData_unstable,\n  TreeNavigationEvent_unstable,\n  TreeOpenChangeData,\n  TreeOpenChangeEvent,\n  TreeProps,\n} from '../Tree';\nimport { TreeItemProps } from '../TreeItem';\nimport { createUnfilteredFlatTree } from '../utils/createUnfilteredFlatTree';\nimport { createVisibleFlatTree } from '../utils/createVisibleFlatTree';\nimport { useFlatTreeNavigation } from './useFlatTreeNavigation';\nimport { useOpenItemsState } from './useOpenItemsState';\n\nexport type FlatTreeItemProps = Required<Pick<TreeItemProps, 'id'>> &\n  TreeItemProps & {\n    parentId?: string;\n  };\n\nexport type FlatTreeItem = {\n  getTreeItemProps(): Required<Pick<TreeItemProps, 'id' | 'aria-setsize' | 'aria-level' | 'aria-posinset' | 'leaf'>> &\n    TreeItemProps;\n  parentId?: string;\n  childrenSize: number;\n  index: number;\n  id: string;\n  level: number;\n};\n\nexport type FlatTreeProps = Required<\n  Pick<TreeProps, 'openItems' | 'onOpenChange' | 'onNavigation_unstable'> & { ref: React.Ref<HTMLDivElement> }\n>;\n\n/**\n * FlatTree API to manage all required mechanisms to convert a list of items into renderable TreeItems\n * in multiple scenarios including virtualization.\n *\n * !!A flat tree is an unofficial spec for tree!!\n *\n * It should be used on cases where more complex interactions with a Tree is required.\n *\n * On simple scenarios it is advised to simply use a nested structure instead.\n */\nexport type FlatTree = {\n  /**\n   * returns the properties required for the Tree component to work properly.\n   * That includes:\n   * `openItems`, `onOpenChange`, `onNavigation_unstable` and `ref`\n   */\n  getTreeProps(): FlatTreeProps;\n  /**\n   * internal method used to react to an `onNavigation` event.\n   * This method ensures proper navigation on keyboard and mouse interaction.\n   * In case of virtualization it might be required to cancel default provided `onNavigation`\n   * event and then call this method manually.\n   *\n   * @example\n   * ```ts\n   * // react-window\n   * const handleNavigation = (event, data) => {\n   *   event.preventDefault();\n   *   const nextItem = tree.getNextNavigableItem(data);\n   *   // scroll to item using virtualization scroll mechanism\n   *   if (nextItem && !targetDocument.getElementById(nextItem.id)) {\n   *     listRef.current.scrollToItem(nextItem.index);\n   *   }\n   *   // wait for scrolling to happen and then invoke navigate method\n   *   requestAnimationFrame(() => {\n   *     tree.navigate(data);\n   *   });\n   * };\n   *```\n   */\n  navigate(data: TreeNavigationData_unstable): void;\n  /**\n   * returns next item to be focused on a navigation.\n   * This method is provided to decouple the element that needs to be focused from\n   *  the action of focusing it itself.\n   */\n  getNextNavigableItem(data: TreeNavigationData_unstable): FlatTreeItem | null;\n  /**\n   * returns a single flat tree item by id without iterating over the whole collection\n   */\n  getItem(id: string): FlatTreeItem | null;\n  /**\n   * returns an iterable containing all visually available flat tree items\n   */\n  items(): Iterable<FlatTreeItem>;\n};\n\n/**\n * this hook provides FlatTree API to manage all required mechanisms to convert a list of items into renderable TreeItems\n * in multiple scenarios including virtualization.\n *\n * !!A flat tree is an unofficial spec for tree!!\n *\n * It should be used on cases where more complex interactions with a Tree is required.\n * On simple scenarios it is advised to simply use a nested structure instead.\n *\n * @param items - a list of tree items\n * @param options - in case control over the internal openItems is required\n */\nexport function useFlatTree_unstable(\n  items: FlatTreeItemProps[],\n  options: Pick<TreeProps, 'openItems' | 'defaultOpenItems'> = {},\n): FlatTree {\n  const [openItems, updateOpenItems] = useOpenItemsState(options);\n  const unfilteredFlatTree = React.useMemo(() => createUnfilteredFlatTree(items), [items]);\n  const [navigate, navigationRef] = useFlatTreeNavigation(unfilteredFlatTree);\n  const visibleFlatTree = React.useMemo(\n    () => createVisibleFlatTree(unfilteredFlatTree, openItems),\n    [unfilteredFlatTree, openItems],\n  );\n\n  const handleOpenChange = useEventCallback((event: TreeOpenChangeEvent, data: TreeOpenChangeData) => {\n    event.preventDefault();\n    updateOpenItems(data);\n  });\n\n  const handleNavigation = useEventCallback(\n    (event: TreeNavigationEvent_unstable, data: TreeNavigationData_unstable) => {\n      event.preventDefault();\n      navigate(data);\n    },\n  );\n\n  const flatTree: FlatTree = {\n    ...visibleFlatTree,\n    getTreeProps: () => ({\n      ref: navigationRef as React.Ref<HTMLDivElement>,\n      openItems,\n      onOpenChange: handleOpenChange,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      onNavigation_unstable: handleNavigation,\n    }),\n    navigate,\n    getItem: id => unfilteredFlatTree.itemsPerId.get(id) ?? null,\n  };\n  return flatTree;\n}\n"],"mappings":";;;;;;AAAA,MAAAA,iBAAA,gBAAAC,OAAA;AACA,MAAAC,KAAA,gBAAAD,OAAA;AASA,MAAAE,0BAAA,gBAAAF,OAAA;AACA,MAAAG,uBAAA,gBAAAH,OAAA;AACA,MAAAI,uBAAA,gBAAAJ,OAAA;AACA,MAAAK,mBAAA,gBAAAL,OAAA;AA8EA;;;;;;;;;;;;AAYA,SAAgBM,oBAAoBA,CAClCC,KAA0B,EAC1BC,OAAA,GAA6D,EAAE;EAE/D,MAAM,CAACC,SAAS,EAAEC,eAAe,CAAC,GAAGL,mBAAA,CAAAM,iBAAiB,CAACH,OAAO,CAAC;EAC/D,MAAMI,kBAAkB,GAAGX,KAAK,CAACY,OAAO,CAAC,MAAMX,0BAAA,CAAAY,wBAAwB,CAACP,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACxF,MAAM,CAACQ,QAAQ,EAAEC,aAAa,CAAC,GAAGZ,uBAAA,CAAAa,qBAAqB,CAACL,kBAAkB,CAAC;EAC3E,MAAMM,eAAe,GAAGjB,KAAK,CAACY,OAAO,CACnC,MAAMV,uBAAA,CAAAgB,qBAAqB,CAACP,kBAAkB,EAAEH,SAAS,CAAC,EAC1D,CAACG,kBAAkB,EAAEH,SAAS,CAAC,CAChC;EAED,MAAMW,gBAAgB,GAAGrB,iBAAA,CAAAsB,gBAAgB,CAAC,CAACC,KAA0B,EAAEC,IAAwB,KAAI;IACjGD,KAAK,CAACE,cAAc,EAAE;IACtBd,eAAe,CAACa,IAAI,CAAC;EACvB,CAAC,CAAC;EAEF,MAAME,gBAAgB,GAAG1B,iBAAA,CAAAsB,gBAAgB,CACvC,CAACC,KAAmC,EAAEC,IAAiC,KAAI;IACzED,KAAK,CAACE,cAAc,EAAE;IACtBT,QAAQ,CAACQ,IAAI,CAAC;EAChB,CAAC,CACF;EAED,MAAMG,QAAQ,GAAa;IACzB,GAAGR,eAAe;IAClBS,YAAY,EAAEA,CAAA,MAAO;MACnBC,GAAG,EAAEZ,aAA0C;MAC/CP,SAAS;MACToB,YAAY,EAAET,gBAAgB;MAC9B;MACAU,qBAAqB,EAAEL;KACxB,CAAC;IACFV,QAAQ;IACRgB,OAAO,EAAEC,EAAE,IAAG;MAAA,IAAAC,EAAA;MAAC,QAAAA,EAAA,GAAArB,kBAAkB,CAACsB,UAAU,CAACC,GAAG,CAACH,EAAE,CAAC,cAAAC,EAAA,cAAAA,EAAA,GAAI,IAAI;IAAA;GAC7D;EACD,OAAOP,QAAQ;AACjB;AArCAU,OAAA,CAAA9B,oBAAA,GAAAA,oBAAA"}