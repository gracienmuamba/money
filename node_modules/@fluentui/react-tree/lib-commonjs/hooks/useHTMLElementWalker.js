"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHTMLElementWalkerRef = exports.createHTMLElementWalker = void 0;
const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
const React = /*#__PURE__*/require("react");
function createHTMLElementWalker(root, filter = () => NodeFilter.FILTER_ACCEPT) {
  let temporaryFilter;
  const treeWalker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var _a;
      if (!react_utilities_1.isHTMLElement(node)) {
        return NodeFilter.FILTER_REJECT;
      }
      const filterResult = filter(node);
      return filterResult === NodeFilter.FILTER_ACCEPT ? (_a = temporaryFilter === null || temporaryFilter === void 0 ? void 0 : temporaryFilter(node)) !== null && _a !== void 0 ? _a : filterResult : filterResult;
    }
  });
  return {
    get root() {
      return treeWalker.root;
    },
    get currentElement() {
      return treeWalker.currentNode;
    },
    set currentElement(element) {
      treeWalker.currentNode = element;
    },
    firstChild: localFilter => {
      temporaryFilter = localFilter;
      const result = treeWalker.firstChild();
      temporaryFilter = undefined;
      return result;
    },
    lastChild: localFilter => {
      temporaryFilter = localFilter;
      const result = treeWalker.lastChild();
      temporaryFilter = undefined;
      return result;
    },
    nextElement: localFilter => {
      temporaryFilter = localFilter;
      const result = treeWalker.nextNode();
      temporaryFilter = undefined;
      return result;
    },
    nextSibling: localFilter => {
      temporaryFilter = localFilter;
      const result = treeWalker.nextSibling();
      temporaryFilter = undefined;
      return result;
    },
    parentElement: localFilter => {
      temporaryFilter = localFilter;
      const result = treeWalker.parentNode();
      temporaryFilter = undefined;
      return result;
    },
    previousElement: localFilter => {
      temporaryFilter = localFilter;
      const result = treeWalker.previousNode();
      temporaryFilter = undefined;
      return result;
    },
    previousSibling: localFilter => {
      temporaryFilter = localFilter;
      const result = treeWalker.previousSibling();
      temporaryFilter = undefined;
      return result;
    }
  };
}
exports.createHTMLElementWalker = createHTMLElementWalker;
const useHTMLElementWalkerRef = filter => {
  const walkerRef = React.useRef();
  const rootRefCallback = element => {
    if (!element) {
      walkerRef.current = undefined;
      return;
    }
    walkerRef.current = createHTMLElementWalker(element, filter);
  };
  return [walkerRef, rootRefCallback];
};
exports.useHTMLElementWalkerRef = useHTMLElementWalkerRef;
//# sourceMappingURL=useHTMLElementWalker.js.map