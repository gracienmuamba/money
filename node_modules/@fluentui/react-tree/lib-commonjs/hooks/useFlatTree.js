"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFlatTree_unstable = void 0;
const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
const React = /*#__PURE__*/require("react");
const createUnfilteredFlatTree_1 = /*#__PURE__*/require("../utils/createUnfilteredFlatTree");
const createVisibleFlatTree_1 = /*#__PURE__*/require("../utils/createVisibleFlatTree");
const useFlatTreeNavigation_1 = /*#__PURE__*/require("./useFlatTreeNavigation");
const useOpenItemsState_1 = /*#__PURE__*/require("./useOpenItemsState");
/**
 * this hook provides FlatTree API to manage all required mechanisms to convert a list of items into renderable TreeItems
 * in multiple scenarios including virtualization.
 *
 * !!A flat tree is an unofficial spec for tree!!
 *
 * It should be used on cases where more complex interactions with a Tree is required.
 * On simple scenarios it is advised to simply use a nested structure instead.
 *
 * @param items - a list of tree items
 * @param options - in case control over the internal openItems is required
 */
function useFlatTree_unstable(items, options = {}) {
  const [openItems, updateOpenItems] = useOpenItemsState_1.useOpenItemsState(options);
  const unfilteredFlatTree = React.useMemo(() => createUnfilteredFlatTree_1.createUnfilteredFlatTree(items), [items]);
  const [navigate, navigationRef] = useFlatTreeNavigation_1.useFlatTreeNavigation(unfilteredFlatTree);
  const visibleFlatTree = React.useMemo(() => createVisibleFlatTree_1.createVisibleFlatTree(unfilteredFlatTree, openItems), [unfilteredFlatTree, openItems]);
  const handleOpenChange = react_utilities_1.useEventCallback((event, data) => {
    event.preventDefault();
    updateOpenItems(data);
  });
  const handleNavigation = react_utilities_1.useEventCallback((event, data) => {
    event.preventDefault();
    navigate(data);
  });
  const flatTree = {
    ...visibleFlatTree,
    getTreeProps: () => ({
      ref: navigationRef,
      openItems,
      onOpenChange: handleOpenChange,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      onNavigation_unstable: handleNavigation
    }),
    navigate,
    getItem: id => {
      var _a;
      return (_a = unfilteredFlatTree.itemsPerId.get(id)) !== null && _a !== void 0 ? _a : null;
    }
  };
  return flatTree;
}
exports.useFlatTree_unstable = useFlatTree_unstable;
//# sourceMappingURL=useFlatTree.js.map