"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTree_unstable = void 0;
const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
const contexts_1 = /*#__PURE__*/require("../../contexts");
const hooks_1 = /*#__PURE__*/require("../../hooks");
const tokens_1 = /*#__PURE__*/require("../../utils/tokens");
/**
 * Create the state required to render Tree.
 *
 * The returned state can be modified with hooks such as useTreeStyles_unstable,
 * before being passed to renderTree_unstable.
 *
 * @param props - props from this instance of Tree
 * @param ref - reference to root HTMLElement of Tree
 */
const useTree_unstable = (props, ref) => {
  const isSubtree = contexts_1.useTreeContext_unstable(ctx => ctx.level > 0);
  // as isSubtree is static, this doesn't break rule of hooks
  // and if this becomes an issue later on, this can be easily converted
  // eslint-disable-next-line react-hooks/rules-of-hooks
  return isSubtree ? useSubtree(props, ref) : useRootTree(props, ref);
};
exports.useTree_unstable = useTree_unstable;
/**
 * Create the state required to render a sub-level Tree.
 *
 * @param props - props from this instance of Tree
 * @param ref - reference to root HTMLElement of Tree
 */
function useSubtree(props, ref) {
  const contextAppearance = contexts_1.useTreeContext_unstable(ctx => ctx.appearance);
  const contextSize = contexts_1.useTreeContext_unstable(ctx => ctx.size);
  const {
    appearance = contextAppearance !== null && contextAppearance !== void 0 ? contextAppearance : 'subtle',
    size = contextSize !== null && contextSize !== void 0 ? contextSize : 'medium'
  } = props;
  const parentLevel = contexts_1.useTreeContext_unstable(ctx => ctx.level);
  const openItems = contexts_1.useTreeContext_unstable(ctx => ctx.openItems);
  const requestOpenChange = contexts_1.useTreeContext_unstable(ctx => ctx.requestOpenChange);
  const requestNavigation = contexts_1.useTreeContext_unstable(ctx => ctx.requestNavigation);
  return {
    components: {
      root: 'div'
    },
    appearance,
    size,
    level: parentLevel + 1,
    root: react_utilities_1.getNativeElementProps('div', {
      ref,
      role: 'group',
      ...props
    }),
    openItems,
    requestOpenChange,
    requestNavigation
  };
}
/**
 * Create the state required to render the root level Tree.
 *
 * @param props - props from this instance of Tree
 * @param ref - reference to root HTMLElement of Tree
 */
function useRootTree(props, ref) {
  warnIfNoProperPropsRootTree(props);
  const {
    appearance = 'subtle',
    size = 'medium'
  } = props;
  const [openItems, updateOpenItems] = hooks_1.useOpenItemsState(props);
  const [navigate, navigationRef] = hooks_1.useNestedTreeNavigation();
  const requestOpenChange = react_utilities_1.useEventCallback(data => {
    var _a;
    (_a = props.onOpenChange) === null || _a === void 0 ? void 0 : _a.call(props, data.event, data);
    if (data.event.isDefaultPrevented()) {
      return;
    }
    return updateOpenItems(data);
  });
  const requestNavigation = react_utilities_1.useEventCallback(data => {
    var _a;
    (_a = props.onNavigation_unstable) === null || _a === void 0 ? void 0 : _a.call(props, data.event, data);
    if (data.event.isDefaultPrevented()) {
      return;
    }
    navigate(data);
    if (data.type === tokens_1.treeDataTypes.arrowDown || data.type === tokens_1.treeDataTypes.arrowUp) {
      data.event.preventDefault();
    }
  });
  return {
    components: {
      root: 'div'
    },
    appearance,
    size,
    level: 1,
    openItems,
    requestOpenChange,
    requestNavigation,
    root: react_utilities_1.getNativeElementProps('div', {
      ref: react_utilities_1.useMergedRefs(navigationRef, ref),
      role: 'tree',
      ...props
    })
  };
}
function warnIfNoProperPropsRootTree(props) {
  if (process.env.NODE_ENV === 'development') {
    if (!props['aria-label'] && !props['aria-labelledby']) {
      // eslint-disable-next-line no-console
      console.warn('Tree must have either a `aria-label` or `aria-labelledby` property defined');
    }
  }
}
//# sourceMappingURL=useTree.js.map