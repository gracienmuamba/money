"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tree = void 0;
const React = /*#__PURE__*/require("react");
const useTree_1 = /*#__PURE__*/require("./useTree");
const renderTree_1 = /*#__PURE__*/require("./renderTree");
const useTreeStyles_1 = /*#__PURE__*/require("./useTreeStyles");
const useTreeContextValues_1 = /*#__PURE__*/require("./useTreeContextValues");
/**
 * A tree view widget presents a hierarchical list.
 * Any item in the hierarchy may have child items,
 * and items that have children may be expanded or collapsed to show or hide the children.
 * For example, in a file system navigator that uses a tree view to display folders and files,
 * an item representing a folder can be expanded to reveal the contents of the folder,
 * which may be files, folders, or both.
 */
exports.Tree = /*#__PURE__*/React.forwardRef((props, ref) => {
  const state = useTree_1.useTree_unstable(props, ref);
  useTreeStyles_1.useTreeStyles_unstable(state);
  const contextValues = useTreeContextValues_1.useTreeContextValues_unstable(state);
  return renderTree_1.renderTree_unstable(state, contextValues);
});
exports.Tree.displayName = 'Tree';
//# sourceMappingURL=Tree.js.map