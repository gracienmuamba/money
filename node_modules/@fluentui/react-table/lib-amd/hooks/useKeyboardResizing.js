define(["require", "exports", "react", "@fluentui/keyboard-keys", "@fluentui/react-utilities", "@fluentui/react-shared-contexts"], function (require, exports, React, keyboard_keys_1, react_utilities_1, react_shared_contexts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useKeyboardResizing = void 0;
    var STEP = 20;
    var PRECISION_MODIFIER = keyboard_keys_1.Shift;
    var PRECISION_FACTOR = 1 / 4;
    function useKeyboardResizing(columnResizeState) {
        var columnId = React.useRef();
        var onChangeRef = React.useRef();
        var addListenerTimeout = React.useRef();
        var columnResizeStateRef = React.useRef(columnResizeState);
        React.useEffect(function () {
            columnResizeStateRef.current = columnResizeState;
        }, [columnResizeState]);
        var targetDocument = react_shared_contexts_1.useFluent_unstable().targetDocument;
        var keyboardHandler = react_utilities_1.useEventCallback(function (event) {
            var colId = columnId.current;
            if (!colId) {
                return;
            }
            var width = columnResizeStateRef.current.getColumnWidth(colId);
            var precisionModifier = event.getModifierState(PRECISION_MODIFIER);
            var stopEvent = function () {
                event.preventDefault();
                event.stopPropagation();
            };
            switch (event.key) {
                case keyboard_keys_1.ArrowLeft:
                    stopEvent();
                    columnResizeStateRef.current.setColumnWidth(event, {
                        columnId: colId,
                        width: width - (precisionModifier ? STEP * PRECISION_FACTOR : STEP),
                    });
                    return;
                case keyboard_keys_1.ArrowRight:
                    stopEvent();
                    columnResizeStateRef.current.setColumnWidth(event, {
                        columnId: colId,
                        width: width + (precisionModifier ? STEP * PRECISION_FACTOR : STEP),
                    });
                    return;
                case keyboard_keys_1.Space:
                case keyboard_keys_1.Enter:
                case keyboard_keys_1.Escape:
                    stopEvent();
                    disableInteractiveMode();
                    break;
            }
        });
        // On component unmout, cancel any timer for adding a listener (if it exists) and remove the listener
        React.useEffect(function () { return function () {
            var _a, _b;
            (_a = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView) === null || _a === void 0 ? void 0 : _a.clearTimeout(addListenerTimeout.current);
            (_b = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView) === null || _b === void 0 ? void 0 : _b.removeEventListener('keydown', keyboardHandler);
        }; }, [keyboardHandler, targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView]);
        var enableInteractiveMode = React.useCallback(function (colId) {
            var _a, _b;
            columnId.current = colId;
            (_a = onChangeRef.current) === null || _a === void 0 ? void 0 : _a.call(onChangeRef, colId, true);
            // Create the listener in the next tick, because the event that triggered this is still propagating
            // when Enter was pressed and would be caught in the keyboardHandler, disabling the keyboard mode immediately.
            // No idea why this is happening, but this is a working workaround.
            // Tracked here: https://github.com/microsoft/fluentui/issues/27177
            addListenerTimeout.current = (_b = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView) === null || _b === void 0 ? void 0 : _b.setTimeout(function () {
                var _a;
                (_a = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView) === null || _a === void 0 ? void 0 : _a.addEventListener('keydown', keyboardHandler);
            }, 0);
        }, [keyboardHandler, targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView]);
        var disableInteractiveMode = React.useCallback(function () {
            var _a, _b;
            if (columnId.current) {
                (_a = onChangeRef.current) === null || _a === void 0 ? void 0 : _a.call(onChangeRef, columnId.current, false);
            }
            columnId.current = undefined;
            (_b = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView) === null || _b === void 0 ? void 0 : _b.removeEventListener('keydown', keyboardHandler);
        }, [keyboardHandler, targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView]);
        var toggleInteractiveMode = function (colId, onChange) {
            onChangeRef.current = onChange;
            if (!columnId.current) {
                enableInteractiveMode(colId);
            }
            else if (colId && columnId.current !== colId) {
                columnId.current = colId;
                onChange === null || onChange === void 0 ? void 0 : onChange(columnId.current, true);
            }
            else {
                disableInteractiveMode();
            }
        };
        return {
            toggleInteractiveMode: toggleInteractiveMode,
        };
    }
    exports.useKeyboardResizing = useKeyboardResizing;
});
//# sourceMappingURL=useKeyboardResizing.js.map