"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTableColumnSizing_unstable = exports.defaultColumnSizingState = void 0;
const React = /*#__PURE__*/require("react");
const TableResizeHandle_1 = /*#__PURE__*/require("../TableResizeHandle");
const useMeasureElement_1 = /*#__PURE__*/require("./useMeasureElement");
const useTableColumnResizeMouseHandler_1 = /*#__PURE__*/require("./useTableColumnResizeMouseHandler");
const useTableColumnResizeState_1 = /*#__PURE__*/require("./useTableColumnResizeState");
const useKeyboardResizing_1 = /*#__PURE__*/require("./useKeyboardResizing");
exports.defaultColumnSizingState = {
  getColumnWidths: () => [],
  getOnMouseDown: () => () => null,
  setColumnWidth: () => null,
  getTableHeaderCellProps: () => ({
    style: {},
    columnId: ''
  }),
  getTableCellProps: () => ({
    style: {},
    columnId: ''
  }),
  enableKeyboardMode: () => () => null
};
function useTableColumnSizing_unstable(params) {
  // False positive, these plugin hooks are intended to be run on every render
  // eslint-disable-next-line react-hooks/rules-of-hooks
  return tableState => useTableColumnSizingState(tableState, params);
}
exports.useTableColumnSizing_unstable = useTableColumnSizing_unstable;
function getColumnStyles(column) {
  const width = column.width;
  return {
    // native styles
    width,
    // non-native element styles (flex layout)
    minWidth: width,
    maxWidth: width
  };
}
function useTableColumnSizingState(tableState, params) {
  const {
    columns
  } = tableState;
  // Gets the container width
  const {
    width,
    measureElementRef
  } = useMeasureElement_1.useMeasureElement();
  // Creates the state based on columns and available containerWidth
  const columnResizeState = useTableColumnResizeState_1.useTableColumnResizeState(columns, width + ((params === null || params === void 0 ? void 0 : params.containerWidthOffset) || 0), params);
  // Creates the mouse handler and attaches the state to it
  const mouseHandler = useTableColumnResizeMouseHandler_1.useTableColumnResizeMouseHandler(columnResizeState);
  // Creates the keyboard handler for resizing columns
  const keyboardResizing = useKeyboardResizing_1.useKeyboardResizing(columnResizeState);
  const enableKeyboardMode = React.useCallback((columnId, onChange) => e => {
    e.preventDefault();
    e.nativeEvent.stopPropagation();
    keyboardResizing.toggleInteractiveMode(columnId, onChange);
  }, [keyboardResizing]);
  return {
    ...tableState,
    tableRef: measureElementRef,
    // eslint-disable-next-line @typescript-eslint/naming-convention
    columnSizing_unstable: {
      getOnMouseDown: mouseHandler.getOnMouseDown,
      setColumnWidth: (columnId, w) => columnResizeState.setColumnWidth(undefined, {
        columnId,
        width: w
      }),
      getColumnWidths: columnResizeState.getColumns,
      getTableHeaderCellProps: columnId => {
        const col = columnResizeState.getColumnById(columnId);
        const aside = React.createElement(TableResizeHandle_1.TableResizeHandle, {
          onMouseDown: mouseHandler.getOnMouseDown(columnId),
          onTouchStart: mouseHandler.getOnMouseDown(columnId)
        });
        return col ? {
          style: getColumnStyles(col),
          aside
        } : {};
      },
      getTableCellProps: columnId => {
        const col = columnResizeState.getColumnById(columnId);
        return col ? {
          style: getColumnStyles(col)
        } : {};
      },
      enableKeyboardMode
    }
  };
}
//# sourceMappingURL=useTableColumnSizing.js.map