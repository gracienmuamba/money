{"version":3,"names":["react_utilities_1","require","React","react_shared_contexts_1","useMeasureElement","width","setWidth","useState","container","useRef","undefined","targetDocument","useFluent_unstable","handleResize","useCallback","containerWidth","_a","current","getBoundingClientRect","resizeObserver","canUseDOM","ResizeObserver","measureElementRef","el","unobserve","remove","createElement","insertAdjacentElement","observe","useEffect","disconnect","exports"],"sources":["../src/packages/react-components/react-table/src/hooks/useMeasureElement.ts"],"sourcesContent":["import { canUseDOM } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n\n/**\n * Provides a way of reporting element width.\n * Returns\n * `width` - current element width (0 by default),\n * `measureElementRef` - a ref function to be passed as `ref` to the element you want to measure\n */\nexport function useMeasureElement<TElement extends HTMLElement = HTMLElement>() {\n  const [width, setWidth] = React.useState(0);\n  const container = React.useRef<HTMLElement | undefined>(undefined);\n\n  const { targetDocument } = useFluent();\n\n  // the handler for resize observer\n  const handleResize = React.useCallback(() => {\n    const containerWidth = container.current?.getBoundingClientRect().width;\n    setWidth(containerWidth || 0);\n  }, []);\n\n  // Keep the reference of ResizeObserver in the state, as it should live through renders\n  const [resizeObserver] = React.useState(canUseDOM() ? new ResizeObserver(handleResize) : undefined);\n  const measureElementRef = React.useCallback(\n    (el: TElement | null) => {\n      if (!targetDocument || !resizeObserver) {\n        return;\n      }\n\n      // cleanup previous container\n      if (container.current) {\n        resizeObserver.unobserve(container.current);\n        container.current.remove();\n      }\n\n      if (el) {\n        container.current = targetDocument.createElement('div');\n        el.insertAdjacentElement('beforebegin', container.current);\n        resizeObserver.observe(container.current);\n        handleResize();\n      }\n    },\n    [targetDocument, resizeObserver, handleResize],\n  );\n\n  React.useEffect(() => {\n    return () => resizeObserver?.disconnect();\n  }, [resizeObserver]);\n\n  return { width, measureElementRef };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,iBAAA,gBAAAC,OAAA;AACA,MAAAC,KAAA,gBAAAD,OAAA;AACA,MAAAE,uBAAA,gBAAAF,OAAA;AAEA;;;;;;AAMA,SAAgBG,iBAAiBA,CAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAMC,SAAS,GAAGN,KAAK,CAACO,MAAM,CAA0BC,SAAS,CAAC;EAElE,MAAM;IAAEC;EAAc,CAAE,GAAGR,uBAAA,CAAAS,kBAAS,EAAE;EAEtC;EACA,MAAMC,YAAY,GAAGX,KAAK,CAACY,WAAW,CAAC,MAAK;;IAC1C,MAAMC,cAAc,GAAG,CAAAC,EAAA,GAAAR,SAAS,CAACS,OAAO,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,qBAAqB,GAAGb,KAAK;IACvEC,QAAQ,CAACS,cAAc,IAAI,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN;EACA,MAAM,CAACI,cAAc,CAAC,GAAGjB,KAAK,CAACK,QAAQ,CAACP,iBAAA,CAAAoB,SAAS,EAAE,GAAG,IAAIC,cAAc,CAACR,YAAY,CAAC,GAAGH,SAAS,CAAC;EACnG,MAAMY,iBAAiB,GAAGpB,KAAK,CAACY,WAAW,CACxCS,EAAmB,IAAI;IACtB,IAAI,CAACZ,cAAc,IAAI,CAACQ,cAAc,EAAE;MACtC;;IAGF;IACA,IAAIX,SAAS,CAACS,OAAO,EAAE;MACrBE,cAAc,CAACK,SAAS,CAAChB,SAAS,CAACS,OAAO,CAAC;MAC3CT,SAAS,CAACS,OAAO,CAACQ,MAAM,EAAE;;IAG5B,IAAIF,EAAE,EAAE;MACNf,SAAS,CAACS,OAAO,GAAGN,cAAc,CAACe,aAAa,CAAC,KAAK,CAAC;MACvDH,EAAE,CAACI,qBAAqB,CAAC,aAAa,EAAEnB,SAAS,CAACS,OAAO,CAAC;MAC1DE,cAAc,CAACS,OAAO,CAACpB,SAAS,CAACS,OAAO,CAAC;MACzCJ,YAAY,EAAE;;EAElB,CAAC,EACD,CAACF,cAAc,EAAEQ,cAAc,EAAEN,YAAY,CAAC,CAC/C;EAEDX,KAAK,CAAC2B,SAAS,CAAC,MAAK;IACnB,OAAO,MAAMV,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEW,UAAU,EAAE;EAC3C,CAAC,EAAE,CAACX,cAAc,CAAC,CAAC;EAEpB,OAAO;IAAEd,KAAK;IAAEiB;EAAiB,CAAE;AACrC;AAzCAS,OAAA,CAAA3B,iBAAA,GAAAA,iBAAA"}