{"version":3,"names":["react_utilities_1","require","React","columnResizeUtils_1","createReducer","state","action","type","containerWidth","columnWidthState","adjustColumnWidthsToFitContainer","newS","columnDefinitionsToState","columns","columnSizingOptions","newState","columnId","width","column","getColumnById","newColumnWidthState","setColumnProperty","useTableColumnResizeState","params","onColumnResize","reducer","useMemo","dispatch","useReducer","undefined","useIsomorphicLayoutEffect","setColumnWidth","useEventCallback","event","data","col","Math","max","minWidth","colId","getColumns","getColumnWidth","exports"],"sources":["../src/packages/react-components/react-table/src/hooks/useTableColumnResizeState.ts"],"sourcesContent":["import { useEventCallback, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport {\n  TableColumnDefinition,\n  TableColumnId,\n  ColumnResizeState,\n  ColumnWidthState,\n  UseTableColumnSizingParams,\n  TableColumnSizingOptions,\n} from './types';\nimport {\n  columnDefinitionsToState,\n  adjustColumnWidthsToFitContainer,\n  getColumnById,\n  setColumnProperty,\n  getColumnWidth,\n} from '../utils/columnResizeUtils';\n\ntype ComponentState<T> = {\n  columns: TableColumnDefinition<T>[];\n  containerWidth: number;\n  columnWidthState: ColumnWidthState[];\n  columnSizingOptions: TableColumnSizingOptions | undefined;\n};\n\ntype ColumnResizeStateAction<T> =\n  | {\n      type: 'CONTAINER_WIDTH_UPDATED';\n      containerWidth: number;\n    }\n  | {\n      type: 'COLUMNS_UPDATED';\n      columns: TableColumnDefinition<T>[];\n    }\n  | {\n      type: 'COLUMN_SIZING_OPTIONS_UPDATED';\n      columnSizingOptions: TableColumnSizingOptions | undefined;\n    }\n  | {\n      type: 'SET_COLUMN_WIDTH';\n      columnId: TableColumnId;\n      width: number;\n    };\n\nconst createReducer =\n  <T>() =>\n  (state: ComponentState<T>, action: ColumnResizeStateAction<T>): ComponentState<T> => {\n    switch (action.type) {\n      case 'CONTAINER_WIDTH_UPDATED':\n        return {\n          ...state,\n          containerWidth: action.containerWidth,\n          columnWidthState: adjustColumnWidthsToFitContainer(state.columnWidthState, action.containerWidth),\n        };\n\n      case 'COLUMNS_UPDATED':\n        const newS = columnDefinitionsToState(action.columns, state.columnWidthState, state.columnSizingOptions);\n        return {\n          ...state,\n          columns: action.columns,\n          columnWidthState: adjustColumnWidthsToFitContainer(newS, state.containerWidth),\n        };\n\n      case 'COLUMN_SIZING_OPTIONS_UPDATED':\n        const newState = columnDefinitionsToState(state.columns, state.columnWidthState, action.columnSizingOptions);\n        return {\n          ...state,\n          columnSizingOptions: action.columnSizingOptions,\n          columnWidthState: adjustColumnWidthsToFitContainer(newState, state.containerWidth),\n        };\n\n      case 'SET_COLUMN_WIDTH':\n        const { columnId, width } = action;\n        const { containerWidth } = state;\n\n        const column = getColumnById(state.columnWidthState, columnId);\n        let newColumnWidthState = [...state.columnWidthState];\n\n        if (!column) {\n          return state;\n        }\n\n        // Adjust the column width and measure the new total width\n        newColumnWidthState = setColumnProperty(newColumnWidthState, columnId, 'width', width);\n        // Set this width as idealWidth, because its a deliberate change, not a recalculation because of container\n        newColumnWidthState = setColumnProperty(newColumnWidthState, columnId, 'idealWidth', width);\n        // Adjust the widths to the container size\n        newColumnWidthState = adjustColumnWidthsToFitContainer(newColumnWidthState, containerWidth);\n\n        return { ...state, columnWidthState: newColumnWidthState };\n    }\n  };\n\nexport function useTableColumnResizeState<T>(\n  columns: TableColumnDefinition<T>[],\n  containerWidth: number,\n  params: UseTableColumnSizingParams = {},\n): ColumnResizeState {\n  const { onColumnResize, columnSizingOptions } = params;\n\n  const reducer = React.useMemo(() => createReducer<T>(), []);\n\n  const [state, dispatch] = React.useReducer(reducer, {\n    columns,\n    containerWidth: 0,\n    columnWidthState: columnDefinitionsToState(columns, undefined, columnSizingOptions),\n    columnSizingOptions,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    dispatch({ type: 'CONTAINER_WIDTH_UPDATED', containerWidth });\n  }, [containerWidth]);\n\n  useIsomorphicLayoutEffect(() => {\n    dispatch({ type: 'COLUMNS_UPDATED', columns });\n  }, [columns]);\n\n  useIsomorphicLayoutEffect(() => {\n    dispatch({ type: 'COLUMN_SIZING_OPTIONS_UPDATED', columnSizingOptions });\n  }, [columnSizingOptions]);\n\n  const setColumnWidth = useEventCallback(\n    (event: KeyboardEvent | MouseEvent | TouchEvent | undefined, data: { columnId: TableColumnId; width: number }) => {\n      let { width } = data;\n      const { columnId } = data;\n      const col = getColumnById(state.columnWidthState, columnId);\n      if (!col) {\n        return;\n      }\n\n      width = Math.max(col.minWidth || 0, width);\n\n      if (onColumnResize) {\n        onColumnResize(event, { columnId, width });\n      }\n      dispatch({ type: 'SET_COLUMN_WIDTH', columnId, width });\n    },\n  );\n\n  return {\n    getColumnById: (colId: TableColumnId) => getColumnById(state.columnWidthState, colId),\n    getColumns: () => state.columnWidthState,\n    getColumnWidth: (colId: TableColumnId) => getColumnWidth(state.columnWidthState, colId),\n    setColumnWidth,\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,iBAAA,gBAAAC,OAAA;AACA,MAAAC,KAAA,gBAAAD,OAAA;AASA,MAAAE,mBAAA,gBAAAF,OAAA;AAkCA,MAAMG,aAAa,GACjBA,CAAA,KACA,CAACC,KAAwB,EAAEC,MAAkC,KAAuB;EAClF,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,yBAAyB;MAC5B,OAAO;QACL,GAAGF,KAAK;QACRG,cAAc,EAAEF,MAAM,CAACE,cAAc;QACrCC,gBAAgB,EAAEN,mBAAA,CAAAO,gCAAgC,CAACL,KAAK,CAACI,gBAAgB,EAAEH,MAAM,CAACE,cAAc;OACjG;IAEH,KAAK,iBAAiB;MACpB,MAAMG,IAAI,GAAGR,mBAAA,CAAAS,wBAAwB,CAACN,MAAM,CAACO,OAAO,EAAER,KAAK,CAACI,gBAAgB,EAAEJ,KAAK,CAACS,mBAAmB,CAAC;MACxG,OAAO;QACL,GAAGT,KAAK;QACRQ,OAAO,EAAEP,MAAM,CAACO,OAAO;QACvBJ,gBAAgB,EAAEN,mBAAA,CAAAO,gCAAgC,CAACC,IAAI,EAAEN,KAAK,CAACG,cAAc;OAC9E;IAEH,KAAK,+BAA+B;MAClC,MAAMO,QAAQ,GAAGZ,mBAAA,CAAAS,wBAAwB,CAACP,KAAK,CAACQ,OAAO,EAAER,KAAK,CAACI,gBAAgB,EAAEH,MAAM,CAACQ,mBAAmB,CAAC;MAC5G,OAAO;QACL,GAAGT,KAAK;QACRS,mBAAmB,EAAER,MAAM,CAACQ,mBAAmB;QAC/CL,gBAAgB,EAAEN,mBAAA,CAAAO,gCAAgC,CAACK,QAAQ,EAAEV,KAAK,CAACG,cAAc;OAClF;IAEH,KAAK,kBAAkB;MACrB,MAAM;QAAEQ,QAAQ;QAAEC;MAAK,CAAE,GAAGX,MAAM;MAClC,MAAM;QAAEE;MAAc,CAAE,GAAGH,KAAK;MAEhC,MAAMa,MAAM,GAAGf,mBAAA,CAAAgB,aAAa,CAACd,KAAK,CAACI,gBAAgB,EAAEO,QAAQ,CAAC;MAC9D,IAAII,mBAAmB,GAAG,CAAC,GAAGf,KAAK,CAACI,gBAAgB,CAAC;MAErD,IAAI,CAACS,MAAM,EAAE;QACX,OAAOb,KAAK;;MAGd;MACAe,mBAAmB,GAAGjB,mBAAA,CAAAkB,iBAAiB,CAACD,mBAAmB,EAAEJ,QAAQ,EAAE,OAAO,EAAEC,KAAK,CAAC;MACtF;MACAG,mBAAmB,GAAGjB,mBAAA,CAAAkB,iBAAiB,CAACD,mBAAmB,EAAEJ,QAAQ,EAAE,YAAY,EAAEC,KAAK,CAAC;MAC3F;MACAG,mBAAmB,GAAGjB,mBAAA,CAAAO,gCAAgC,CAACU,mBAAmB,EAAEZ,cAAc,CAAC;MAE3F,OAAO;QAAE,GAAGH,KAAK;QAAEI,gBAAgB,EAAEW;MAAmB,CAAE;EAAC;AAEjE,CAAC;AAEH,SAAgBE,yBAAyBA,CACvCT,OAAmC,EACnCL,cAAsB,EACtBe,MAAA,GAAqC,EAAE;EAEvC,MAAM;IAAEC,cAAc;IAAEV;EAAmB,CAAE,GAAGS,MAAM;EAEtD,MAAME,OAAO,GAAGvB,KAAK,CAACwB,OAAO,CAAC,MAAMtB,aAAa,EAAK,EAAE,EAAE,CAAC;EAE3D,MAAM,CAACC,KAAK,EAAEsB,QAAQ,CAAC,GAAGzB,KAAK,CAAC0B,UAAU,CAACH,OAAO,EAAE;IAClDZ,OAAO;IACPL,cAAc,EAAE,CAAC;IACjBC,gBAAgB,EAAEN,mBAAA,CAAAS,wBAAwB,CAACC,OAAO,EAAEgB,SAAS,EAAEf,mBAAmB,CAAC;IACnFA;GACD,CAAC;EAEFd,iBAAA,CAAA8B,yBAAyB,CAAC,MAAK;IAC7BH,QAAQ,CAAC;MAAEpB,IAAI,EAAE,yBAAyB;MAAEC;IAAc,CAAE,CAAC;EAC/D,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpBR,iBAAA,CAAA8B,yBAAyB,CAAC,MAAK;IAC7BH,QAAQ,CAAC;MAAEpB,IAAI,EAAE,iBAAiB;MAAEM;IAAO,CAAE,CAAC;EAChD,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEbb,iBAAA,CAAA8B,yBAAyB,CAAC,MAAK;IAC7BH,QAAQ,CAAC;MAAEpB,IAAI,EAAE,+BAA+B;MAAEO;IAAmB,CAAE,CAAC;EAC1E,CAAC,EAAE,CAACA,mBAAmB,CAAC,CAAC;EAEzB,MAAMiB,cAAc,GAAG/B,iBAAA,CAAAgC,gBAAgB,CACrC,CAACC,KAA0D,EAAEC,IAAgD,KAAI;IAC/G,IAAI;MAAEjB;IAAK,CAAE,GAAGiB,IAAI;IACpB,MAAM;MAAElB;IAAQ,CAAE,GAAGkB,IAAI;IACzB,MAAMC,GAAG,GAAGhC,mBAAA,CAAAgB,aAAa,CAACd,KAAK,CAACI,gBAAgB,EAAEO,QAAQ,CAAC;IAC3D,IAAI,CAACmB,GAAG,EAAE;MACR;;IAGFlB,KAAK,GAAGmB,IAAI,CAACC,GAAG,CAACF,GAAG,CAACG,QAAQ,IAAI,CAAC,EAAErB,KAAK,CAAC;IAE1C,IAAIO,cAAc,EAAE;MAClBA,cAAc,CAACS,KAAK,EAAE;QAAEjB,QAAQ;QAAEC;MAAK,CAAE,CAAC;;IAE5CU,QAAQ,CAAC;MAAEpB,IAAI,EAAE,kBAAkB;MAAES,QAAQ;MAAEC;IAAK,CAAE,CAAC;EACzD,CAAC,CACF;EAED,OAAO;IACLE,aAAa,EAAGoB,KAAoB,IAAKpC,mBAAA,CAAAgB,aAAa,CAACd,KAAK,CAACI,gBAAgB,EAAE8B,KAAK,CAAC;IACrFC,UAAU,EAAEA,CAAA,KAAMnC,KAAK,CAACI,gBAAgB;IACxCgC,cAAc,EAAGF,KAAoB,IAAKpC,mBAAA,CAAAsC,cAAc,CAACpC,KAAK,CAACI,gBAAgB,EAAE8B,KAAK,CAAC;IACvFR;GACD;AACH;AApDAW,OAAA,CAAApB,yBAAA,GAAAA,yBAAA"}