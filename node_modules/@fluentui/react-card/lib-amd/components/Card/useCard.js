define(["require", "exports", "tslib", "react", "@fluentui/react-utilities", "@fluentui/react-tabster", "./useCardSelectable", "./CardContext"], function (require, exports, tslib_1, React, react_utilities_1, react_tabster_1, useCardSelectable_1, CardContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useCard_unstable = void 0;
    var focusMap = {
        off: undefined,
        'no-tab': 'limited-trap-focus',
        'tab-exit': 'limited',
        'tab-only': 'unlimited',
    };
    /**
     * Create the state for interactive cards.
     *
     * This internal hook defines if the card is interactive
     * and control focus properties based on that.
     *
     * @param props - props from this instance of Card
     */
    var useCardInteractive = function (_a) {
        var _b = _a.focusMode, focusMode = _b === void 0 ? 'off' : _b, props = tslib_1.__rest(_a, ["focusMode"]);
        var interactive = [
            'onClick',
            'onDoubleClick',
            'onMouseUp',
            'onMouseDown',
            'onPointerUp',
            'onPointerDown',
            'onTouchStart',
            'onTouchEnd',
            'onDragStart',
            'onDragEnd',
        ].some(function (prop) { return props[prop]; });
        var groupperAttrs = react_tabster_1.useFocusableGroup({
            tabBehavior: focusMap[interactive ? 'no-tab' : focusMode],
        });
        var interactiveFocusAttributes = tslib_1.__assign(tslib_1.__assign({}, groupperAttrs), { tabIndex: 0 });
        return {
            interactive: interactive,
            focusAttributes: focusMode === 'off' ? null : interactiveFocusAttributes,
        };
    };
    /**
     * Create the state required to render Card.
     *
     * The returned state can be modified with hooks such as useCardStyles_unstable,
     * before being passed to renderCard_unstable.
     *
     * @param props - props from this instance of Card
     * @param ref - reference to the root element of Card
     */
    var useCard_unstable = function (props, ref) {
        var _a = props.appearance, appearance = _a === void 0 ? 'filled' : _a, _b = props.orientation, orientation = _b === void 0 ? 'vertical' : _b, _c = props.size, size = _c === void 0 ? 'medium' : _c;
        var _d = React.useState(CardContext_1.cardContextDefaultValue.selectableA11yProps.referenceId), referenceId = _d[0], setReferenceId = _d[1];
        var _e = React.useState(CardContext_1.cardContextDefaultValue.selectableA11yProps.referenceId), referenceLabel = _e[0], setReferenceLabel = _e[1];
        var cardBaseRef = react_tabster_1.useFocusWithin();
        var _f = useCardSelectable_1.useCardSelectable(props, { referenceId: referenceId, referenceLabel: referenceLabel }, cardBaseRef), selectable = _f.selectable, selected = _f.selected, selectableCardProps = _f.selectableCardProps, selectFocused = _f.selectFocused, checkboxSlot = _f.checkboxSlot, floatingActionSlot = _f.floatingActionSlot;
        var cardRef = react_utilities_1.useMergedRefs(cardBaseRef, ref);
        var _g = useCardInteractive(props), interactive = _g.interactive, focusAttributes = _g.focusAttributes;
        return {
            appearance: appearance,
            orientation: orientation,
            size: size,
            interactive: interactive,
            selectable: selectable,
            selectFocused: selectFocused,
            selected: selected,
            selectableA11yProps: {
                setReferenceId: setReferenceId,
                referenceId: referenceId,
                referenceLabel: referenceLabel,
                setReferenceLabel: setReferenceLabel,
            },
            components: {
                root: 'div',
                floatingAction: 'div',
                checkbox: 'input',
            },
            root: react_utilities_1.getNativeElementProps('div', tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ ref: cardRef, role: 'group' }, focusAttributes), props), selectableCardProps)),
            floatingAction: floatingActionSlot,
            checkbox: checkboxSlot,
        };
    };
    exports.useCard_unstable = useCard_unstable;
});
//# sourceMappingURL=useCard.js.map