{"version":3,"file":"useCard.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-card/src/components/Card/useCard.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, useMergedRefs } from '@fluentui/react-utilities';\nimport { useFocusableGroup, useFocusWithin } from '@fluentui/react-tabster';\n\nimport type { CardProps, CardState } from './Card.types';\nimport { useCardSelectable } from './useCardSelectable';\nimport { cardContextDefaultValue } from './CardContext';\n\nconst focusMap = {\n  off: undefined,\n  'no-tab': 'limited-trap-focus',\n  'tab-exit': 'limited',\n  'tab-only': 'unlimited',\n} as const;\n\n/**\n * Create the state for interactive cards.\n *\n * This internal hook defines if the card is interactive\n * and control focus properties based on that.\n *\n * @param props - props from this instance of Card\n */\nconst useCardInteractive = ({ focusMode = 'off', ...props }: CardProps) => {\n  const interactive = (\n    [\n      'onClick',\n      'onDoubleClick',\n      'onMouseUp',\n      'onMouseDown',\n      'onPointerUp',\n      'onPointerDown',\n      'onTouchStart',\n      'onTouchEnd',\n      'onDragStart',\n      'onDragEnd',\n    ] as (keyof React.HTMLAttributes<HTMLElement>)[]\n  ).some(prop => props[prop]);\n\n  const groupperAttrs = useFocusableGroup({\n    tabBehavior: focusMap[interactive ? 'no-tab' : focusMode],\n  });\n\n  const interactiveFocusAttributes = {\n    ...groupperAttrs,\n    tabIndex: 0,\n  };\n\n  return {\n    interactive,\n    focusAttributes: focusMode === 'off' ? null : interactiveFocusAttributes,\n  };\n};\n\n/**\n * Create the state required to render Card.\n *\n * The returned state can be modified with hooks such as useCardStyles_unstable,\n * before being passed to renderCard_unstable.\n *\n * @param props - props from this instance of Card\n * @param ref - reference to the root element of Card\n */\nexport const useCard_unstable = (props: CardProps, ref: React.Ref<HTMLDivElement>): CardState => {\n  const { appearance = 'filled', orientation = 'vertical', size = 'medium' } = props;\n\n  const [referenceId, setReferenceId] = React.useState(cardContextDefaultValue.selectableA11yProps.referenceId);\n  const [referenceLabel, setReferenceLabel] = React.useState(cardContextDefaultValue.selectableA11yProps.referenceId);\n\n  const cardBaseRef = useFocusWithin<HTMLDivElement>();\n  const { selectable, selected, selectableCardProps, selectFocused, checkboxSlot, floatingActionSlot } =\n    useCardSelectable(props, { referenceId, referenceLabel }, cardBaseRef);\n\n  const cardRef = useMergedRefs(cardBaseRef, ref);\n\n  const { interactive, focusAttributes } = useCardInteractive(props);\n\n  return {\n    appearance,\n    orientation,\n    size,\n    interactive,\n    selectable,\n    selectFocused,\n    selected,\n    selectableA11yProps: {\n      setReferenceId,\n      referenceId,\n      referenceLabel,\n      setReferenceLabel,\n    },\n\n    components: {\n      root: 'div',\n      floatingAction: 'div',\n      checkbox: 'input',\n    },\n\n    root: getNativeElementProps('div', {\n      ref: cardRef,\n      role: 'group',\n      ...focusAttributes,\n      ...props,\n      ...selectableCardProps,\n    }),\n\n    floatingAction: floatingActionSlot,\n    checkbox: checkboxSlot,\n  };\n};\n"]}