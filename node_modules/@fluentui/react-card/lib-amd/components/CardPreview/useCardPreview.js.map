{"version":3,"file":"useCardPreview.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-card/src/components/CardPreview/useCardPreview.ts"],"names":[],"mappings":";;;;IAMA;;;;;;;;OAQG;IACI,IAAM,uBAAuB,GAAG,UAAC,KAAuB,EAAE,GAA2B;QAClF,IAAA,IAAI,GAAK,KAAK,KAAV,CAAW;QAGrB,IAAA,KACE,qCAAuB,EAAE,oBAD4D,EAAhE,cAAc,oBAAA,EAAE,WAAW,iBAAA,EAAE,iBAAiB,uBAAA,EAAE,cAAc,oBAAE,CAC3D;QAC9B,IAAM,UAAU,GAAG,+BAAa,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,CAAiB,IAAI,CAAC,CAAC,CAAC;QAE1E,KAAK,CAAC,SAAS,CAAC;YACd,IAAI,cAAc,IAAI,WAAW,EAAE;gBACjC,OAAO;aACR;YAED,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE;gBACvD,IAAM,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,aAAa,CAAmB,MAAI,4CAAqB,CAAC,IAAI,WAAQ,CAAC,CAAC;gBAElH,IAAI,GAAG,EAAE;oBACP,IAAM,SAAS,GAAG,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;oBACjD,IAAM,eAAe,GAAG,GAAG,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;oBAE7D,IAAI,eAAe,EAAE;wBACnB,cAAc,CAAC,eAAe,CAAC,CAAC;qBACjC;yBAAM,IAAI,GAAG,CAAC,GAAG,EAAE;wBAClB,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;qBAC5B;yBAAM,IAAI,SAAS,EAAE;wBACpB,iBAAiB,CAAC,SAAS,CAAC,CAAC;qBAC9B;iBACF;aACF;QACH,CAAC,EAAE,CAAC,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC,CAAC;QAEjF,OAAO;YACL,UAAU,EAAE;gBACV,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE,KAAK;aACZ;YAED,IAAI,EAAE,uCAAqB,CAAC,KAAK,qBAC/B,GAAG,EAAE,UAAU,IACZ,KAAK,EACR;YACF,IAAI,EAAE,kCAAgB,CAAC,IAAI,CAAC;SAC7B,CAAC;IACJ,CAAC,CAAC;IA3CW,QAAA,uBAAuB,2BA2ClC","sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useMergedRefs } from '@fluentui/react-utilities';\nimport type { CardPreviewProps, CardPreviewState } from './CardPreview.types';\nimport { useCardContext_unstable } from '../Card/CardContext';\nimport { cardPreviewClassNames } from './useCardPreviewStyles';\n\n/**\n * Create the state required to render CardPreview.\n *\n * The returned state can be modified with hooks such as useCardPreviewStyles_unstable,\n * before being passed to renderCardPreview_unstable.\n *\n * @param props - props from this instance of CardPreview\n * @param ref - reference to root HTMLElement of CardPreview\n */\nexport const useCardPreview_unstable = (props: CardPreviewProps, ref: React.Ref<HTMLElement>): CardPreviewState => {\n  const { logo } = props;\n\n  const {\n    selectableA11yProps: { referenceLabel, referenceId, setReferenceLabel, setReferenceId },\n  } = useCardContext_unstable();\n  const previewRef = useMergedRefs(ref, React.useRef<HTMLDivElement>(null));\n\n  React.useEffect(() => {\n    if (referenceLabel && referenceId) {\n      return;\n    }\n\n    if (previewRef.current && previewRef.current.parentNode) {\n      const img = previewRef.current.parentNode.querySelector<HTMLImageElement>(`.${cardPreviewClassNames.root} > img`);\n\n      if (img) {\n        const ariaLabel = img.getAttribute('aria-label');\n        const ariaDescribedby = img.getAttribute('aria-describedby');\n\n        if (ariaDescribedby) {\n          setReferenceId(ariaDescribedby);\n        } else if (img.alt) {\n          setReferenceLabel(img.alt);\n        } else if (ariaLabel) {\n          setReferenceLabel(ariaLabel);\n        }\n      }\n    }\n  }, [setReferenceLabel, referenceLabel, previewRef, referenceId, setReferenceId]);\n\n  return {\n    components: {\n      root: 'div',\n      logo: 'div',\n    },\n\n    root: getNativeElementProps('div', {\n      ref: previewRef,\n      ...props,\n    }),\n    logo: resolveShorthand(logo),\n  };\n};\n"]}