define(["require", "exports", "tslib", "react", "@fluentui/react-utilities", "../Card/CardContext", "./useCardPreviewStyles"], function (require, exports, tslib_1, React, react_utilities_1, CardContext_1, useCardPreviewStyles_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useCardPreview_unstable = void 0;
    /**
     * Create the state required to render CardPreview.
     *
     * The returned state can be modified with hooks such as useCardPreviewStyles_unstable,
     * before being passed to renderCardPreview_unstable.
     *
     * @param props - props from this instance of CardPreview
     * @param ref - reference to root HTMLElement of CardPreview
     */
    var useCardPreview_unstable = function (props, ref) {
        var logo = props.logo;
        var _a = CardContext_1.useCardContext_unstable().selectableA11yProps, referenceLabel = _a.referenceLabel, referenceId = _a.referenceId, setReferenceLabel = _a.setReferenceLabel, setReferenceId = _a.setReferenceId;
        var previewRef = react_utilities_1.useMergedRefs(ref, React.useRef(null));
        React.useEffect(function () {
            if (referenceLabel && referenceId) {
                return;
            }
            if (previewRef.current && previewRef.current.parentNode) {
                var img = previewRef.current.parentNode.querySelector("." + useCardPreviewStyles_1.cardPreviewClassNames.root + " > img");
                if (img) {
                    var ariaLabel = img.getAttribute('aria-label');
                    var ariaDescribedby = img.getAttribute('aria-describedby');
                    if (ariaDescribedby) {
                        setReferenceId(ariaDescribedby);
                    }
                    else if (img.alt) {
                        setReferenceLabel(img.alt);
                    }
                    else if (ariaLabel) {
                        setReferenceLabel(ariaLabel);
                    }
                }
            }
        }, [setReferenceLabel, referenceLabel, previewRef, referenceId, setReferenceId]);
        return {
            components: {
                root: 'div',
                logo: 'div',
            },
            root: react_utilities_1.getNativeElementProps('div', tslib_1.__assign({ ref: previewRef }, props)),
            logo: react_utilities_1.resolveShorthand(logo),
        };
    };
    exports.useCardPreview_unstable = useCardPreview_unstable;
});
//# sourceMappingURL=useCardPreview.js.map