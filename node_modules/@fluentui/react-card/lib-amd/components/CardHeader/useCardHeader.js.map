{"version":3,"file":"useCardHeader.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-card/src/components/CardHeader/useCardHeader.ts"],"names":[],"mappings":";;;;IAMA;;;;;;;;OAQG;IACI,IAAM,sBAAsB,GAAG,UAAC,KAAsB,EAAE,GAA2B;QAChF,IAAA,KAAK,GAAkC,KAAK,MAAvC,EAAE,MAAM,GAA0B,KAAK,OAA/B,EAAE,WAAW,GAAa,KAAK,YAAlB,EAAE,MAAM,GAAK,KAAK,OAAV,CAAW;QAGnD,IAAA,KACE,qCAAuB,EAAE,oBADyB,EAA7B,WAAW,iBAAA,EAAE,cAAc,oBAAE,CACxB;QAC9B,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAiB,IAAI,CAAC,CAAC;QAErD,IAAM,WAAW,GAAG,uBAAK,CAAC,0CAAoB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAEpE,KAAK,CAAC,SAAS,CAAC;YACd,IAAI,MAAM,IAAI,SAAS,CAAC,OAAO,EAAE;gBACvB,IAAA,EAAE,GAAK,SAAS,CAAC,OAAO,GAAtB,CAAuB;gBAEjC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;aACvC;QACH,CAAC,EAAE,CAAC,MAAM,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC;QAE1C,OAAO;YACL,UAAU,EAAE;gBACV,IAAI,EAAE,KAAK;gBACX,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,KAAK;gBACb,WAAW,EAAE,KAAK;gBAClB,MAAM,EAAE,KAAK;aACd;YAED,IAAI,EAAE,uCAAqB,CAAC,KAAK,qBAC/B,GAAG,KAAA,IACA,KAAK,EACR;YACF,KAAK,EAAE,kCAAgB,CAAC,KAAK,CAAC;YAC9B,MAAM,EAAE,kCAAgB,CAAC,MAAM,EAAE;gBAC/B,QAAQ,EAAE,IAAI;gBACd,YAAY,EAAE;oBACZ,GAAG,EAAE,SAAS;oBACd,EAAE,EAAE,WAAW;iBAChB;aACF,CAAC;YACF,WAAW,EAAE,kCAAgB,CAAC,WAAW,CAAC;YAC1C,MAAM,EAAE,kCAAgB,CAAC,MAAM,CAAC;SACjC,CAAC;IACJ,CAAC,CAAC;IA1CW,QAAA,sBAAsB,0BA0CjC","sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport type { CardHeaderProps, CardHeaderState } from './CardHeader.types';\nimport { useCardContext_unstable } from '../Card/CardContext';\nimport { cardHeaderClassNames } from './useCardHeaderStyles';\n\n/**\n * Create the state required to render CardHeader.\n *\n * The returned state can be modified with hooks such as useCardHeaderStyles_unstable,\n * before being passed to renderCardHeader_unstable.\n *\n * @param props - props from this instance of CardHeader\n * @param ref - reference to root HTMLElement of CardHeader\n */\nexport const useCardHeader_unstable = (props: CardHeaderProps, ref: React.Ref<HTMLElement>): CardHeaderState => {\n  const { image, header, description, action } = props;\n\n  const {\n    selectableA11yProps: { referenceId, setReferenceId },\n  } = useCardContext_unstable();\n  const headerRef = React.useRef<HTMLDivElement>(null);\n\n  const generatedId = useId(cardHeaderClassNames.header, referenceId);\n\n  React.useEffect(() => {\n    if (header && headerRef.current) {\n      const { id } = headerRef.current;\n\n      setReferenceId(id ? id : generatedId);\n    }\n  }, [header, setReferenceId, generatedId]);\n\n  return {\n    components: {\n      root: 'div',\n      image: 'div',\n      header: 'div',\n      description: 'div',\n      action: 'div',\n    },\n\n    root: getNativeElementProps('div', {\n      ref,\n      ...props,\n    }),\n    image: resolveShorthand(image),\n    header: resolveShorthand(header, {\n      required: true,\n      defaultProps: {\n        ref: headerRef,\n        id: referenceId,\n      },\n    }),\n    description: resolveShorthand(description),\n    action: resolveShorthand(action),\n  };\n};\n"]}