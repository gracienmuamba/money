{"ast":null,"code":"var _jsxFileName = \"/Users/USER/Desktop/MuunganoMoney/src/Sign/Input.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport './Input.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Media from 'react-media';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport ReturnQuote from './Quote'; // Firebase Auth for phone\n\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { signInWithPhoneNumber, RecaptchaVerifier, onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from '../firebase';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let phoneX = ''; // Input Field form\n\nexport default function REturnInPutConnexIon() {\n  return /*#__PURE__*/_jsxDEV(Media, {\n    queries: {\n      small: '(max-width: 599px)',\n      medium: '(min-width: 600px) and (max-width:1199px)',\n      large: '(min-width: 1200px)'\n    },\n    children: matches => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [matches.small && /*#__PURE__*/_jsxDEV(ScreenSmall, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 24\n      }, this), matches.medium && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this), matches.large && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 3\n  }, this);\n}\n_c = REturnInPutConnexIon;\n;\nexport const ScreenLarge = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"form-input-sign\",\n  children: /*#__PURE__*/_jsxDEV(FormDataInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 2\n}, this);\n_c2 = ScreenLarge;\nexport const ScreenSmall = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"form-input-sign-sm\",\n  children: /*#__PURE__*/_jsxDEV(FormDataInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 50,\n  columnNumber: 2\n}, this);\n_c3 = ScreenSmall;\nexport const FormDataInput = () => {\n  _s();\n\n  let regular = /[a-z]+/;\n  let pushClient = new Array();\n  let pushAgent = new Array();\n  const [checked, setChecked] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth, setFullWidth] = React.useState(true);\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  let isExistClient;\n  let isExistAgent;\n  React.useEffect(() => {\n    onAuthStateChanged(auth, data => {\n      window.console.log(data);\n    });\n  }, []);\n  const navigation = useNavigate();\n\n  const generateRecaptcha = () => {\n    window.recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {\n      'size': 'normal',\n      'callback': response => {},\n      'expired-callback': () => {}\n    }, auth);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState,\n    reset\n  } = useForm({\n    defaultValues: {\n      phone: '+243'\n    },\n    mode: 'onChange'\n  });\n  const {\n    isSubmitting,\n    isValid\n  } = formState;\n\n  const onSubmit = async data => {\n    if (data.phone.length != 13 || regular.test(data.phone)) {\n      // window.alert(`Numero télèphone est Invalid `);\n      setOpen(true);\n      reset();\n    } else {\n      const clientSnapshot = await getDocs(collection(db, \"client\"));\n      clientSnapshot.forEach(doc => {\n        pushClient.push(doc.id);\n      });\n      const agentSnapshot = await getDocs(collection(db, \"agent\"));\n      agentSnapshot.forEach(doc => {\n        pushAgent.push(doc.id);\n      });\n      isExistClient = pushClient.some(value => value == data.phone);\n      isExistAgent = pushAgent.some(value => value == data.phone);\n\n      if (isExistClient || isExistAgent) {\n        let phoneNumber = data.phone;\n        let code = '';\n        phoneX = data.phone;\n        generateRecaptcha();\n        const appVerifier = window.recaptchaVerifier;\n        signInWithPhoneNumber(auth, phoneNumber, appVerifier).then(confirmationResult => {\n          // SMS sent. Prompt user to type the code from the message, then sign the\n          // user in with confirmationResult.confirm(code).\n          window.confirmationResult = confirmationResult;\n          phoneX = data.phone;\n          setChecked(false);\n          setOpen(false);\n          reset();\n        }).catch(error => {\n          // Error; SMS not sent\n          window.console.log(error);\n        });\n      } else {\n        reset();\n        setOpen(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: checked ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(ReturnQuote, {\n        Text: `Envoyer, échanger ou accepter des fiat avec un numero personnel sur votre compte.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"phone\",\n        id: \"phone\",\n        placeholder: \"Phone\",\n        name: \"phone\",\n        ...register('phone', {\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        fullWidth: fullWidth,\n        maxWidth: maxWidth,\n        open: open,\n        onClose: handleClose,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"MuunganoMoney\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n            children: \"Le num\\xE9ro de t\\xE9l\\xE9phone saisi n'est pas encore enregistr\\xE9 aupr\\xE8s de MuunganoMoney.Ou invalide\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClose,\n            children: \"Fermer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"recaptcha-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Btn\",\n        children: \"Connexion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(InputCodeRecaptcha, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 3\n  }, this);\n}; // input Recaptcha  verifier!\n\n_s(FormDataInput, \"FdRTXaRX0NIrKC6KR4k20UN4HGQ=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c4 = FormDataInput;\nexport const InputCodeRecaptcha = () => {\n  _s2();\n\n  const navigation = useNavigate();\n  const {\n    register,\n    handleSubmit,\n    formState\n  } = useForm();\n  const [checked, setChecked] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth, setFullWidth] = React.useState(true);\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onSubmitOTP = async data => {\n    let confirmationResult = window.confirmationResult;\n    confirmationResult.confirm(data.code).then(result => {\n      // User signed in successfully.\n      const user = result.user;\n      const other = auth.currentUser;\n      window.console.log(user.uid + ' ' + other.uid);\n      !!user.uid && navigation('/dash');\n    }).catch(error => {\n      // User couldn't sign in (bad verification code?)\n      window.console.log(error);\n      setOpen(false);\n      window.alert(`Le code expire, reconnectez-vous!`);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmitOTP),\n    children: [/*#__PURE__*/_jsxDEV(ReturnQuote, {\n      Text: 'Valider code envoyer.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Code Envoyer\",\n      name: \"code\",\n      ...register('code', {\n        required: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Btn\",\n      children: \"Connexion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      fullWidth: fullWidth,\n      maxWidth: maxWidth,\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"MuunganoMoney\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Code incorrect, veuillez v\\xE9rifier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Fermer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(InputCodeRecaptcha, \"5tpHvAGSXXem0rXjNHGY4bfQ9po=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c5 = InputCodeRecaptcha;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"REturnInPutConnexIon\");\n$RefreshReg$(_c2, \"ScreenLarge\");\n$RefreshReg$(_c3, \"ScreenSmall\");\n$RefreshReg$(_c4, \"FormDataInput\");\n$RefreshReg$(_c5, \"InputCodeRecaptcha\");","map":{"version":3,"sources":["/Users/USER/Desktop/MuunganoMoney/src/Sign/Input.js"],"names":["React","Media","useForm","useNavigate","ReturnQuote","collection","getDocs","signInWithPhoneNumber","RecaptchaVerifier","onAuthStateChanged","auth","db","Button","Dialog","DialogActions","DialogContent","DialogTitle","DialogContentText","phoneX","REturnInPutConnexIon","small","medium","large","matches","ScreenLarge","ScreenSmall","FormDataInput","regular","pushClient","Array","pushAgent","checked","setChecked","useState","open","setOpen","fullWidth","setFullWidth","maxWidth","setMaxWidth","handleClickOpen","handleClose","isExistClient","isExistAgent","useEffect","data","window","console","log","navigation","generateRecaptcha","recaptchaVerifier","response","register","handleSubmit","formState","reset","defaultValues","phone","mode","isSubmitting","isValid","onSubmit","length","test","clientSnapshot","forEach","doc","push","id","agentSnapshot","some","value","phoneNumber","code","appVerifier","then","confirmationResult","catch","error","required","InputCodeRecaptcha","onSubmitOTP","confirm","result","user","other","currentUser","uid","alert"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Input.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Media from 'react-media';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport ReturnQuote from './Quote';\n\n// Firebase Auth for phone\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { signInWithPhoneNumber, RecaptchaVerifier, onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from '../firebase';\n\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContentText from '@mui/material/DialogContentText';\n\n\nexport let phoneX = '';\n\n// Input Field form\nexport default function REturnInPutConnexIon() {\n return (\n  <Media\n   queries={{\n    small: '(max-width: 599px)',\n    medium: '(min-width: 600px) and (max-width:1199px)',\n    large: '(min-width: 1200px)',\n   }}>\n   {matches => (\n    <>\n     {matches.small && <ScreenSmall />}\n     {matches.medium && <ScreenLarge />}\n     {matches.large && <ScreenLarge />}\n    </>\n   )}\n  </Media>\n );\n};\n\nexport const ScreenLarge = () => (\n <div className='form-input-sign'>\n  <FormDataInput />\n </div>\n);\nexport const ScreenSmall = () => (\n <div className='form-input-sign-sm'>\n  <FormDataInput />\n </div>\n);\nexport const FormDataInput = () => {\n\n let regular = /[a-z]+/;\n let pushClient = new Array();\n let pushAgent = new Array();\n\n const [checked, setChecked] = React.useState(true);\n const [open, setOpen] = React.useState(false);\n const [fullWidth, setFullWidth] = React.useState(true);\n const [maxWidth, setMaxWidth] = React.useState('sm');\n\n const handleClickOpen = () => {\n  setOpen(true);\n };\n const handleClose = () => {\n  setOpen(false);\n };\n\n let isExistClient;\n let isExistAgent;\n\n React.useEffect(() => {\n  onAuthStateChanged(auth, (data) => {\n   window.console.log(data);\n  })\n\n }, []);\n\n const navigation = useNavigate();\n const generateRecaptcha = () => {\n  window.recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {\n   'size': 'normal',\n   'callback': (response) => {\n   },\n   'expired-callback': () => {\n   }\n  }, auth);\n }\n\n const { register, handleSubmit, formState, reset } = useForm({\n  defaultValues: { phone: '+243' }, mode: 'onChange'\n });\n const { isSubmitting, isValid } = formState;\n\n\n const onSubmit = async (data) => {\n\n  if (data.phone.length != 13 || regular.test(data.phone)) {\n   // window.alert(`Numero télèphone est Invalid `);\n   setOpen(true);\n   reset();\n\n  } else {\n\n   const clientSnapshot = await getDocs(collection(db, \"client\"));\n   clientSnapshot.forEach((doc) => {\n    pushClient.push(doc.id);\n   });\n\n   const agentSnapshot = await getDocs(collection(db, \"agent\"));\n   agentSnapshot.forEach((doc) => {\n    pushAgent.push(doc.id);\n   });\n\n   isExistClient = pushClient.some(value => value == data.phone);\n   isExistAgent = pushAgent.some(value => value == data.phone);\n\n   if (isExistClient || isExistAgent) {\n\n    let phoneNumber = data.phone;\n    let code = '';\n    phoneX = data.phone;\n    generateRecaptcha();\n    const appVerifier = window.recaptchaVerifier;\n    signInWithPhoneNumber(auth, phoneNumber, appVerifier)\n     .then((confirmationResult) => {\n\n      // SMS sent. Prompt user to type the code from the message, then sign the\n      // user in with confirmationResult.confirm(code).\n      window.confirmationResult = confirmationResult;\n      phoneX = data.phone;\n\n      setChecked(false);\n      setOpen(false);\n      reset();\n\n\n     }).catch((error) => {\n      // Error; SMS not sent\n      window.console.log(error);\n     });\n\n\n   } else {\n\n    reset();\n    setOpen(true);\n   }\n  }\n };\n\n return (\n  <div>\n   {checked\n    ?\n    <form onSubmit={handleSubmit(onSubmit)}>\n     <ReturnQuote\n      Text={`Envoyer, échanger ou accepter des fiat avec un numero personnel sur votre compte.`}\n     />\n     <input type='phone' id='phone' placeholder='Phone' name='phone' {...register('phone', { required: true })} />\n\n     <Dialog\n      fullWidth={fullWidth}\n      maxWidth={maxWidth}\n      open={open}\n      onClose={handleClose}\n     >\n      <DialogTitle>MuunganoMoney</DialogTitle>\n      <DialogContent>\n\n       <DialogContentText>\n        Le numéro de téléphone saisi n'est pas encore enregistré auprès de MuunganoMoney.Ou invalide\n     </DialogContentText>\n\n      </DialogContent>\n      <DialogActions>\n       <Button onClick={handleClose}>Fermer</Button>\n      </DialogActions>\n     </Dialog>\n\n\n     <div id='recaptcha-container'></div>\n     <button className='Btn'>Connexion</button>\n    </form>\n    :\n    <InputCodeRecaptcha />\n   }\n  </div>\n );\n};\n\n// input Recaptcha  verifier!\nexport const InputCodeRecaptcha = () => {\n\n const navigation = useNavigate();\n const { register, handleSubmit, formState } = useForm();\n\n const [checked, setChecked] = React.useState(true);\n const [open, setOpen] = React.useState(false);\n const [fullWidth, setFullWidth] = React.useState(true);\n const [maxWidth, setMaxWidth] = React.useState('sm');\n\n const handleClickOpen = () => {\n  setOpen(true);\n };\n const handleClose = () => {\n  setOpen(false);\n };\n\n const onSubmitOTP = async (data) => {\n\n  let confirmationResult = window.confirmationResult;\n  confirmationResult.confirm(data.code).then((result) => {\n   // User signed in successfully.\n   const user = result.user;\n   const other = auth.currentUser;\n   window.console.log(user.uid + ' ' + other.uid);\n   !!user.uid && navigation('/dash');\n  }).catch((error) => {\n   // User couldn't sign in (bad verification code?)\n   window.console.log(error);\n   setOpen(false);\n   window.alert(`Le code expire, reconnectez-vous!`);\n  });\n };\n\n return (\n  <form onSubmit={handleSubmit(onSubmitOTP)}>\n\n   <ReturnQuote Text={'Valider code envoyer.'} />\n   <input type='text' placeholder='Code Envoyer' name='code' {...register('code', { required: true })} />\n   <button className='Btn'>Connexion</button>\n\n   <Dialog\n    fullWidth={fullWidth}\n    maxWidth={maxWidth}\n    open={open}\n    onClose={handleClose}\n   >\n    <DialogTitle>MuunganoMoney</DialogTitle>\n    <DialogContent>\n\n     <DialogContentText>\n      Code incorrect, veuillez vérifier\n     </DialogContentText>\n\n    </DialogContent>\n    <DialogActions>\n     <Button onClick={handleClose}>Fermer</Button>\n    </DialogActions>\n   </Dialog>\n\n  </form>\n );\n};\n"]},"metadata":{},"sourceType":"module"}