{"ast":null,"code":"var _jsxFileName = \"/Users/USER/Desktop/MuunganoMoney/src/Test.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Switch from '@mui/material/Switch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MaxWidthDialog() {\n  _s();\n\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth, setFullWidth] = React.useState(true);\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleMaxWidthChange = event => {\n    setMaxWidth( // @ts-expect-error autofill of arbitrary value is not handled.\n    event.target.value);\n  };\n\n  const handleFullWidthChange = event => {\n    setFullWidth(event.target.checked);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: handleClickOpen,\n      children: \"Open max-width dialog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      fullWidth: fullWidth,\n      maxWidth: maxWidth,\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Optional sizes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this);\n}\n\n_s(MaxWidthDialog, \"p/Oqzeo82DLdYzlT3F5TnsySOcw=\");\n\n_c = MaxWidthDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"MaxWidthDialog\");","map":{"version":3,"sources":["/Users/USER/Desktop/MuunganoMoney/src/Test.js"],"names":["React","Box","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControl","FormControlLabel","InputLabel","MenuItem","Select","Switch","MaxWidthDialog","open","setOpen","useState","fullWidth","setFullWidth","maxWidth","setMaxWidth","handleClickOpen","handleClose","handleMaxWidthChange","event","target","value","handleFullWidthChange","checked"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AACxC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBhB,KAAK,CAACiB,QAAN,CAAe,KAAf,CAAxB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BnB,KAAK,CAACiB,QAAN,CAAe,IAAf,CAAlC;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BrB,KAAK,CAACiB,QAAN,CAAe,IAAf,CAAhC;;AAEA,QAAMK,eAAe,GAAG,MAAM;AAC7BN,IAAAA,OAAO,CAAC,IAAD,CAAP;AACA,GAFD;;AAIA,QAAMO,WAAW,GAAG,MAAM;AACzBP,IAAAA,OAAO,CAAC,KAAD,CAAP;AACA,GAFD;;AAIA,QAAMQ,oBAAoB,GAAIC,KAAD,IAAW;AACvCJ,IAAAA,WAAW,EACV;AACAI,IAAAA,KAAK,CAACC,MAAN,CAAaC,KAFH,CAAX;AAIA,GALD;;AAOA,QAAMC,qBAAqB,GAAIH,KAAD,IAAW;AACxCN,IAAAA,YAAY,CAACM,KAAK,CAACC,MAAN,CAAaG,OAAd,CAAZ;AACA,GAFD;;AAIA,sBACC,QAAC,KAAD,CAAO,QAAP;AAAA,4BACC,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,UAAhB;AAA2B,MAAA,OAAO,EAAEP,eAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAIC,QAAC,MAAD;AACC,MAAA,SAAS,EAAEJ,SADZ;AAEC,MAAA,QAAQ,EAAEE,QAFX;AAGC,MAAA,IAAI,EAAEL,IAHP;AAIC,MAAA,OAAO,EAAEQ,WAJV;AAAA,8BAMC,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAND,eAOC,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cAPD,eAcC,QAAC,aAAD;AAAA,+BACC,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAdD;AAAA;AAAA;AAAA;AAAA;AAAA,YAJD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAyBA;;GAjDuBT,c;;KAAAA,c","sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Switch from '@mui/material/Switch';\n\nexport default function MaxWidthDialog() {\n const [open, setOpen] = React.useState(false);\n const [fullWidth, setFullWidth] = React.useState(true);\n const [maxWidth, setMaxWidth] = React.useState('sm');\n\n const handleClickOpen = () => {\n  setOpen(true);\n };\n\n const handleClose = () => {\n  setOpen(false);\n };\n\n const handleMaxWidthChange = (event) => {\n  setMaxWidth(\n   // @ts-expect-error autofill of arbitrary value is not handled.\n   event.target.value,\n  );\n };\n\n const handleFullWidthChange = (event) => {\n  setFullWidth(event.target.checked);\n };\n\n return (\n  <React.Fragment>\n   <Button variant=\"outlined\" onClick={handleClickOpen}>\n    Open max-width dialog\n      </Button>\n   <Dialog\n    fullWidth={fullWidth}\n    maxWidth={maxWidth}\n    open={open}\n    onClose={handleClose}\n   >\n    <DialogTitle>Optional sizes</DialogTitle>\n    <DialogContent>\n\n     {/* <DialogContentText>\n      You can set my maximum width and whether to adapt or not.\n     </DialogContentText> */}\n\n    </DialogContent>\n    <DialogActions>\n     <Button onClick={handleClose}>Close</Button>\n    </DialogActions>\n   </Dialog>\n  </React.Fragment>\n );\n}\n"]},"metadata":{},"sourceType":"module"}