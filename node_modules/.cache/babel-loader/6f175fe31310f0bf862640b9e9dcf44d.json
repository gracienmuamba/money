{"ast":null,"code":"import React from'react';import'./Btn.css';import Media from'react-media';import{useNavigate}from'react-router-dom';import{signInWithPopup,GoogleAuthProvider}from\"firebase/auth\";import{auth}from'../firebase';// Button Component\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ReturnButton(){return/*#__PURE__*/_jsx(Media,{queries:{small:'(max-width: 599px)',medium:'(min-width: 600px) and (max-width:1199px)',large:'(min-width: 1200px)'},children:function children(matches){return/*#__PURE__*/_jsxs(_Fragment,{children:[matches.small&&/*#__PURE__*/_jsx(ScreenSmall,{}),matches.medium&&/*#__PURE__*/_jsx(ScreenLarge,{}),matches.large&&/*#__PURE__*/_jsx(ScreenLarge,{})]});}});};export var ScreenLarge=function ScreenLarge(){return/*#__PURE__*/_jsx(\"div\",{className:\"wrp-hmBtn-admin\",children:/*#__PURE__*/_jsx(ViewButton,{})});};export var ScreenSmall=function ScreenSmall(){return/*#__PURE__*/_jsx(\"div\",{className:\"wrp-hmBtn-admin-sm\",children:/*#__PURE__*/_jsx(ViewButton,{})});};export var ViewButton=function ViewButton(){var navigation=useNavigate();var handlepath=function handlepath(event){event.preventDefault();var provider=new GoogleAuthProvider();signInWithPopup(auth,provider).then(function(result){// This gives you a Google Access Token. You can use it to access the Google API.\nvar credential=GoogleAuthProvider.credentialFromResult(result);// const token = credential.accessToken;\nvar user=result.user;!!user&&navigation('/dash');window.console.log(user);}).catch(function(error){// Handle Errors here.\nvar errorCode=error.code;var errorMessage=error.message;// The email of the user's account used.\nvar email=error.customData.email;// The AuthCredential type that was used.\nvar credential=GoogleAuthProvider.credentialFromError(error);});};return/*#__PURE__*/_jsx(\"button\",{className:\"Btn\",onClick:handlepath,children:\"Connexion\"});};","map":{"version":3,"sources":["/Users/USER/Desktop/Agent/src/Hm/Btn.js"],"names":["React","Media","useNavigate","signInWithPopup","GoogleAuthProvider","auth","ReturnButton","small","medium","large","matches","ScreenLarge","ScreenSmall","ViewButton","navigation","handlepath","event","preventDefault","provider","then","result","credential","credentialFromResult","user","window","console","log","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,OAASC,eAAT,CAA0BC,kBAA1B,KAAoD,eAApD,CACA,OAASC,IAAT,KAAqB,aAArB,CAGA;6IACA,cAAe,SAASC,CAAAA,YAAT,EAAwB,CACtC,mBACC,KAAC,KAAD,EACC,OAAO,CAAE,CACRC,KAAK,CAAE,oBADC,CAERC,MAAM,CAAE,2CAFA,CAGRC,KAAK,CAAE,qBAHC,CADV,UAME,kBAAAC,OAAO,qBACP,2BACEA,OAAO,CAACH,KAAR,eAAiB,KAAC,WAAD,IADnB,CAEEG,OAAO,CAACF,MAAR,eAAkB,KAAC,WAAD,IAFpB,CAGEE,OAAO,CAACD,KAAR,eAAiB,KAAC,WAAD,IAHnB,GADO,EANT,EADD,CAgBA,EAGD,MAAO,IAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,sBAC1B,YAAK,SAAS,CAAC,iBAAf,uBACC,KAAC,UAAD,IADD,EAD0B,EAApB,CAKP,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,sBAC1B,YAAK,SAAS,CAAC,oBAAf,uBACC,KAAC,UAAD,IADD,EAD0B,EAApB,CAKP,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CAE/B,GAAMC,CAAAA,UAAU,CAAGZ,WAAW,EAA9B,CACA,GAAMa,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAE7BA,KAAK,CAACC,cAAN,GACA,GAAMC,CAAAA,QAAQ,CAAG,GAAId,CAAAA,kBAAJ,EAAjB,CAEAD,eAAe,CAACE,IAAD,CAAOa,QAAP,CAAf,CACEC,IADF,CACO,SAACC,MAAD,CAAY,CACjB;AACA,GAAMC,CAAAA,UAAU,CAAGjB,kBAAkB,CAACkB,oBAAnB,CAAwCF,MAAxC,CAAnB,CACA;AACA,GAAMG,CAAAA,IAAI,CAAGH,MAAM,CAACG,IAApB,CACA,CAAC,CAACA,IAAF,EAAUT,UAAU,CAAC,OAAD,CAApB,CACAU,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBH,IAAnB,EACA,CARF,EAQII,KARJ,CAQU,SAACC,KAAD,CAAW,CACnB;AACA,GAAMC,CAAAA,SAAS,CAAGD,KAAK,CAACE,IAAxB,CACA,GAAMC,CAAAA,YAAY,CAAGH,KAAK,CAACI,OAA3B,CACA;AACA,GAAMC,CAAAA,KAAK,CAAGL,KAAK,CAACM,UAAN,CAAiBD,KAA/B,CACA;AACA,GAAMZ,CAAAA,UAAU,CAAGjB,kBAAkB,CAAC+B,mBAAnB,CAAuCP,KAAvC,CAAnB,CACA,CAhBF,EAiBA,CAtBD,CAwBA,mBACC,eAAQ,SAAS,CAAC,KAAlB,CAAwB,OAAO,CAAEb,UAAjC,uBADD,CAGA,CA9BM","sourcesContent":["import React from 'react';\nimport './Btn.css';\nimport Media from 'react-media';\nimport { useNavigate } from 'react-router-dom';\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { auth } from '../firebase';\n\n\n// Button Component\nexport default function ReturnButton() {\n return (\n  <Media\n   queries={{\n    small: '(max-width: 599px)',\n    medium: '(min-width: 600px) and (max-width:1199px)',\n    large: '(min-width: 1200px)',\n   }}>\n   {matches => (\n    <>\n     {matches.small && <ScreenSmall />}\n     {matches.medium && <ScreenLarge />}\n     {matches.large && <ScreenLarge />}\n    </>\n   )}\n  </Media>\n );\n};\n\n\nexport const ScreenLarge = () => (\n <div className='wrp-hmBtn-admin'>\n  <ViewButton />\n </div>\n);\nexport const ScreenSmall = () => (\n <div className='wrp-hmBtn-admin-sm'>\n  <ViewButton />\n </div>\n)\nexport const ViewButton = () => {\n\n const navigation = useNavigate();\n const handlepath = (event) => {\n\n  event.preventDefault();\n  const provider = new GoogleAuthProvider();\n\n  signInWithPopup(auth, provider)\n   .then((result) => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    // const token = credential.accessToken;\n    const user = result.user;\n    !!user && navigation('/dash');\n    window.console.log(user);\n   }).catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n   });\n };\n\n return (\n  <button className='Btn' onClick={handlepath}>Connexion</button>\n );\n};\n\n"]},"metadata":{},"sourceType":"module"}