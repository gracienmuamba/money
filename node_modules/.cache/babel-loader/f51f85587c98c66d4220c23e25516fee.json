{"ast":null,"code":"var _jsxFileName = \"/Users/USER/Desktop/Agent/src/Send/FC/Input.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './Input.css';\nimport { useForm } from 'react-hook-form';\nimport Media from 'react-media';\nimport { useNavigate } from 'react-router-dom';\nimport { phoneX } from '../Phone/Input';\nimport { doc, getDoc, updateDoc, serverTimestamp } from \"firebase/firestore\";\nimport { db } from '../../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let prixSuccess = 0; // withdraw input\n\nexport default function ReturnWithdrAwInput() {\n  return /*#__PURE__*/_jsxDEV(Media, {\n    queries: {\n      small: '(max-width: 599px)',\n      medium: '(min-width: 600px) and (max-width:1199px)',\n      large: '(min-width: 1200px)'\n    },\n    children: matches => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [matches.small && /*#__PURE__*/_jsxDEV(ScreenSmall, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 24\n      }, this), matches.medium && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }, this), matches.large && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }, this);\n}\n_c = ReturnWithdrAwInput;\n;\nexport const ScreenLarge = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"wrp-withdraw-input\",\n  children: /*#__PURE__*/_jsxDEV(FormInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 35,\n  columnNumber: 2\n}, this);\n_c2 = ScreenLarge;\nexport const ScreenSmall = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"wrp-withdraw-input-sm\",\n  children: /*#__PURE__*/_jsxDEV(FormInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 40,\n  columnNumber: 2\n}, this);\n_c3 = ScreenSmall;\nexport const FormInput = () => {\n  _s();\n\n  let getFcAdmin = 0;\n  let newSolde = 0;\n  let actif = 0;\n  const navigation = useNavigate();\n  const {\n    handleSubmit,\n    register,\n    reset\n  } = useForm();\n  const [getPin, setGetPin] = React.useState('');\n  const [getFc, setGetFc] = React.useState(null);\n  const [user, setUser] = React.useState(null);\n  React.useEffect(async () => {\n    const docRefPin = doc(db, \"ungama\", \"money\");\n    const docSnap = await getDoc(docRefPin);\n\n    if (docSnap.exists()) {\n      setGetPin(docSnap.data().pin);\n      getFcAdmin = docSnap.data().fc;\n      actif = docSnap.data().allcdf;\n    }\n\n    ;\n    const agentRef = doc(db, \"agent\", phoneX);\n    const agentSnap = await getDoc(agentRef);\n\n    if (agentSnap.exists()) {\n      setGetFc(Number(agentSnap.data().fc));\n      setUser(agentSnap.data().firstname);\n    }\n  }, []);\n\n  const onSubmit = async data => {\n    if (getPin == data.code && data.code.length == 6) {\n      if (data.count > 200000) {\n        window.alert(`La valeur est superieur à 200000`);\n        reset();\n      } else {\n        addSoldeAgent(phoneX, Number(getFc) + Number(data.count), data.count);\n        newSolde = Number(getFcAdmin) - Number(data.count);\n        actif = Number(actif) + Number(data.count);\n        updateSolde(data.count, newSolde, actif, user);\n        prixSuccess = data.count;\n        navigation('/send/success');\n      }\n    } else {\n      prixSuccess = data.count;\n      window.alert(`Erreur de code d'accès invalide`);\n      reset();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: 'text',\n      ...register('count', {\n        required: true\n      }),\n      name: \"count\",\n      placeholder: 'CDF'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: 'text',\n      ...register('code', {\n        required: true\n      }),\n      name: \"code\",\n      placeholder: '••••••'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Btn\",\n      children: \"Envoyer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 3\n  }, this);\n}; // get money pyrami\n\n_s(FormInput, \"8nHm/Zwtn77y0wNmX+XPBFgnkmY=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c4 = FormInput;\nexport const updateSolde = async (solde, newSolde, actif, userClient) => {\n  // let getFc = 0;\n  // let newSolde = 0;\n  // let actif = 0;\n  // const docRef = doc(db, \"ungama\", 'money');\n  // const docSnap = await getDoc(docRef);\n  // if (docSnap.exists()) {\n  //  getFc = docSnap.data().fc;\n  //  actif = docSnap.data().allcdf;\n  // };\n  // newSolde = Number(getFc) - Number(solde);\n  // actif = Number(actif) + Number(solde);\n  const washingtonRef = doc(db, \"ungama\", \"money\"); // Set the \"capital\" field of the city 'DC'\n\n  await updateDoc(washingtonRef, {\n    fc: Math.floor(newSolde),\n    allcdf: Math.floor(actif),\n    money: Math.floor(Number(solde)),\n    user: userClient\n  });\n}; // get add some money on the agent\n\nexport const addSoldeAgent = async (numPhoneInDocs, money, solde) => {\n  const washingtonRef = doc(db, \"agent\", numPhoneInDocs); // Set the \"capital\" field of the city 'DC'\n\n  await updateDoc(washingtonRef, {\n    fc: Math.floor(money),\n    money: Math.floor(solde),\n    unite: 'fc',\n    delay: serverTimestamp()\n  });\n};\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ReturnWithdrAwInput\");\n$RefreshReg$(_c2, \"ScreenLarge\");\n$RefreshReg$(_c3, \"ScreenSmall\");\n$RefreshReg$(_c4, \"FormInput\");","map":{"version":3,"sources":["/Users/USER/Desktop/Agent/src/Send/FC/Input.js"],"names":["React","useForm","Media","useNavigate","phoneX","doc","getDoc","updateDoc","serverTimestamp","db","prixSuccess","ReturnWithdrAwInput","small","medium","large","matches","ScreenLarge","ScreenSmall","FormInput","getFcAdmin","newSolde","actif","navigation","handleSubmit","register","reset","getPin","setGetPin","useState","getFc","setGetFc","user","setUser","useEffect","docRefPin","docSnap","exists","data","pin","fc","allcdf","agentRef","agentSnap","Number","firstname","onSubmit","code","length","count","window","alert","addSoldeAgent","updateSolde","required","solde","userClient","washingtonRef","Math","floor","money","numPhoneInDocs","unite","delay"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport './Input.css';\nimport { useForm } from 'react-hook-form';\nimport Media from 'react-media';\nimport { useNavigate } from 'react-router-dom';\nimport { phoneX } from '../Phone/Input';\nimport { doc, getDoc, updateDoc, serverTimestamp } from \"firebase/firestore\";\n\nimport { db } from '../../firebase';\n\nexport let prixSuccess = 0;\n\n// withdraw input\nexport default function ReturnWithdrAwInput() {\n return (\n  <Media\n   queries={{\n    small: '(max-width: 599px)',\n    medium: '(min-width: 600px) and (max-width:1199px)',\n    large: '(min-width: 1200px)',\n   }}>\n   {matches => (\n    <>\n     {matches.small && <ScreenSmall />}\n     {matches.medium && <ScreenLarge />}\n     {matches.large && <ScreenLarge />}\n    </>\n   )}\n  </Media>\n );\n};\n\nexport const ScreenLarge = () => (\n <div className='wrp-withdraw-input'>\n  <FormInput />\n </div>\n);\nexport const ScreenSmall = () => (\n <div className='wrp-withdraw-input-sm'>\n  <FormInput />\n </div>\n);\nexport const FormInput = () => {\n\n let getFcAdmin = 0;\n let newSolde = 0;\n let actif = 0;\n\n const navigation = useNavigate();\n const { handleSubmit, register, reset } = useForm();\n\n const [getPin, setGetPin] = React.useState('');\n const [getFc, setGetFc] = React.useState(null);\n const [user, setUser] = React.useState(null);\n\n\n React.useEffect(async () => {\n\n  const docRefPin = doc(db, \"ungama\", \"money\");\n  const docSnap = await getDoc(docRefPin);\n\n  if (docSnap.exists()) {\n   setGetPin(docSnap.data().pin);\n   getFcAdmin = docSnap.data().fc;\n   actif = docSnap.data().allcdf;\n  };\n\n  const agentRef = doc(db, \"agent\", phoneX);\n  const agentSnap = await getDoc(agentRef);\n\n  if (agentSnap.exists()) {\n   setGetFc(Number(agentSnap.data().fc));\n   setUser(agentSnap.data().firstname);\n  }\n\n }, []);\n\n const onSubmit = async (data) => {\n\n  if (getPin == data.code && data.code.length == 6) {\n\n   if (data.count > 200000) {\n    window.alert(`La valeur est superieur à 200000`);\n    reset();\n\n   } else {\n\n    addSoldeAgent(phoneX, Number(getFc) + Number(data.count), data.count);\n\n\n    newSolde = Number(getFcAdmin) - Number(data.count);\n    actif = Number(actif) + Number(data.count);\n\n    updateSolde(data.count, newSolde, actif, user);\n\n    prixSuccess = data.count;\n    navigation('/send/success');\n   }\n\n  } else {\n   prixSuccess = data.count;\n   window.alert(`Erreur de code d'accès invalide`)\n   reset();\n  }\n\n };\n\n return (\n  <form onSubmit={handleSubmit(onSubmit)}>\n\n   <input type={'text'}\n    {...register('count', { required: true })}\n    name=\"count\"\n    placeholder={'CDF'}\n   />\n   <input type={'text'}\n    {...register('code', { required: true })}\n    name=\"code\"\n    placeholder={'••••••'}\n   />\n\n   <button className='Btn'>Envoyer</button>\n  </form>\n );\n};\n\n\n// get money pyrami\nexport const updateSolde = async (solde, newSolde, actif, userClient) => {\n\n // let getFc = 0;\n // let newSolde = 0;\n // let actif = 0;\n\n // const docRef = doc(db, \"ungama\", 'money');\n // const docSnap = await getDoc(docRef);\n\n // if (docSnap.exists()) {\n //  getFc = docSnap.data().fc;\n //  actif = docSnap.data().allcdf;\n // };\n\n // newSolde = Number(getFc) - Number(solde);\n // actif = Number(actif) + Number(solde);\n\n const washingtonRef = doc(db, \"ungama\", \"money\");\n\n // Set the \"capital\" field of the city 'DC'\n await updateDoc(washingtonRef, {\n  fc: Math.floor(newSolde),\n  allcdf: Math.floor(actif),\n  money: Math.floor(Number(solde)),\n  user: userClient\n });\n\n};\n// get add some money on the agent\nexport const addSoldeAgent = async (numPhoneInDocs, money, solde) => {\n\n const washingtonRef = doc(db, \"agent\", numPhoneInDocs);\n // Set the \"capital\" field of the city 'DC'\n await updateDoc(washingtonRef, {\n  fc: Math.floor(money),\n  money: Math.floor(solde),\n  unite: 'fc',\n  delay: serverTimestamp()\n });\n};"]},"metadata":{},"sourceType":"module"}