{"ast":null,"code":"var _jsxFileName = \"/Users/USER/Desktop/MuunganoMoney/src/Sign/Input.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport './Input.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Media from 'react-media';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport ReturnQuote from './Quote'; // Firebase Auth for phone\n\nimport { doc, collection, getDocs } from \"firebase/firestore\";\nimport { signInWithPhoneNumber, RecaptchaVerifier, onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from '../firebase';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let phoneX = ''; // Input Field form\n\nexport default function REturnInPutConnexIon() {\n  return /*#__PURE__*/_jsxDEV(Media, {\n    queries: {\n      small: '(max-width: 599px)',\n      medium: '(min-width: 600px) and (max-width:1199px)',\n      large: '(min-width: 1200px)'\n    },\n    children: matches => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [matches.small && /*#__PURE__*/_jsxDEV(ScreenSmall, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 29\n      }, this), matches.medium && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 30\n      }, this), matches.large && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_c = REturnInPutConnexIon;\n;\nexport const ScreenLarge = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"form-input-sign\",\n  children: /*#__PURE__*/_jsxDEV(FormDataInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 3\n}, this);\n_c2 = ScreenLarge;\nexport const ScreenSmall = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"form-input-sign-sm\",\n  children: /*#__PURE__*/_jsxDEV(FormDataInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 50,\n  columnNumber: 3\n}, this);\n_c3 = ScreenSmall;\nexport const FormDataInput = () => {\n  _s();\n\n  let regular = /[a-z]+/;\n  let pushClient = new Array();\n  let pushAgent = new Array();\n  const [checked, setChecked] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth, setFullWidth] = React.useState(true);\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  let isExistClient;\n  let isExistAgent;\n  React.useEffect(() => {\n    onAuthStateChanged(auth, data => {\n      window.console.log(data);\n    });\n  }, []);\n  const navigation = useNavigate();\n\n  const generateRecaptcha = () => {\n    window.recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {\n      'size': 'normal',\n      'callback': response => {},\n      'expired-callback': () => {}\n    }, auth);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState,\n    reset\n  } = useForm({\n    defaultValues: {\n      phone: '+243'\n    },\n    mode: 'onChange'\n  });\n  const {\n    isSubmitting,\n    isValid\n  } = formState;\n\n  const onSubmit = async data => {\n    if (data.phone.length != 13 || regular.test(data.phone)) {\n      // window.alert(`Numero télèphone est Invalid `);\n      setOpen(false);\n      reset();\n    } else {\n      const clientSnapshot = await getDocs(collection(db, \"client\"));\n      clientSnapshot.forEach(doc => {\n        pushClient.push(doc.id);\n      });\n      const agentSnapshot = await getDocs(collection(db, \"agent\"));\n      agentSnapshot.forEach(doc => {\n        pushAgent.push(doc.id);\n      });\n      isExistClient = pushClient.some(value => value == data.phone);\n      isExistAgent = pushAgent.some(value => value == data.phone);\n\n      if (isExistClient || isExistAgent) {\n        let phoneNumber = data.phone;\n        let code = '';\n        phoneX = data.phone; // navigation('/dash');\n\n        generateRecaptcha();\n        const appVerifier = window.recaptchaVerifier;\n        var credential = firebase.auth.PhoneAuthProvider.credential(confirmationResult.appVerifier, code);\n        firebase.auth().signInWithCredential(credential); // signInWithPhoneNumber(auth, phoneNumber, appVerifier)\n        //   .then((confirmationResult) => {\n        //     // SMS sent. Prompt user to type the code from the message, then sign the\n        //     // user in with confirmationResult.confirm(code).\n        //     window.confirmationResult = confirmationResult;\n        //     phoneX = data.phone;\n        //     setChecked(false);\n        //     setOpen(false);\n        //     reset();\n        //   }).catch((error) => {\n        //     // Error; SMS not sent\n        //     window.console.log(error);\n        //   });\n      } else {\n        reset();\n        setOpen(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: checked ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(ReturnQuote, {\n        Text: `Envoyer, échanger ou accepter des fiat avec un numero personnel sur votre compte.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"phone\",\n        id: \"phone\",\n        placeholder: \"Phone\",\n        name: \"phone\",\n        ...register('phone', {\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        fullWidth: fullWidth,\n        maxWidth: maxWidth,\n        open: open,\n        onClose: handleClose,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"MuunganoMoney\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n            children: \"Le num\\xE9ro de t\\xE9l\\xE9phone saisi n'est pas encore enregistr\\xE9 aupr\\xE8s de MuunganoMoney.Ou invalide\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClose,\n            children: \"Fermer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"recaptcha-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Btn\",\n        children: \"Connexion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(InputCodeRecaptcha, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormDataInput, \"FdRTXaRX0NIrKC6KR4k20UN4HGQ=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c4 = FormDataInput;\nexport const InputCodeRecaptcha = () => {\n  _s2();\n\n  const navigation = useNavigate();\n  const {\n    register,\n    handleSubmit,\n    formState\n  } = useForm();\n  const [checked, setChecked] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth, setFullWidth] = React.useState(true);\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onSubmitOTP = async data => {\n    let confirmationResult = window.confirmationResult;\n    confirmationResult.confirm(data.code).then(result => {\n      // User signed in successfully.\n      const user = result.user;\n      !!user.uid && navigation('/dash');\n    }).catch(error => {\n      // User couldn't sign in (bad verification code?)\n      window.console.log(error);\n      setOpen(false);\n      window.alert(`Le code expire, reconnectez-vous!`);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmitOTP),\n    children: [/*#__PURE__*/_jsxDEV(ReturnQuote, {\n      Text: 'Valider code envoyer.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Code Envoyer\",\n      name: \"code\",\n      ...register('code', {\n        required: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Btn\",\n      children: \"Connexion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      fullWidth: fullWidth,\n      maxWidth: maxWidth,\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"MuunganoMoney\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Code incorrect, veuillez v\\xE9rifier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Fermer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(InputCodeRecaptcha, \"5tpHvAGSXXem0rXjNHGY4bfQ9po=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c5 = InputCodeRecaptcha;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"REturnInPutConnexIon\");\n$RefreshReg$(_c2, \"ScreenLarge\");\n$RefreshReg$(_c3, \"ScreenSmall\");\n$RefreshReg$(_c4, \"FormDataInput\");\n$RefreshReg$(_c5, \"InputCodeRecaptcha\");","map":{"version":3,"sources":["/Users/USER/Desktop/MuunganoMoney/src/Sign/Input.js"],"names":["React","Media","useForm","useNavigate","ReturnQuote","doc","collection","getDocs","signInWithPhoneNumber","RecaptchaVerifier","onAuthStateChanged","auth","db","Button","Dialog","DialogActions","DialogContent","DialogTitle","DialogContentText","phoneX","REturnInPutConnexIon","small","medium","large","matches","ScreenLarge","ScreenSmall","FormDataInput","regular","pushClient","Array","pushAgent","checked","setChecked","useState","open","setOpen","fullWidth","setFullWidth","maxWidth","setMaxWidth","handleClickOpen","handleClose","isExistClient","isExistAgent","useEffect","data","window","console","log","navigation","generateRecaptcha","recaptchaVerifier","response","register","handleSubmit","formState","reset","defaultValues","phone","mode","isSubmitting","isValid","onSubmit","length","test","clientSnapshot","forEach","push","id","agentSnapshot","some","value","phoneNumber","code","appVerifier","credential","firebase","PhoneAuthProvider","confirmationResult","signInWithCredential","required","InputCodeRecaptcha","onSubmitOTP","confirm","then","result","user","uid","catch","error","alert"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAO,sCAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,WAAP,MAAwB,SAAxB,C,CAEA;;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,OAA1B,QAAyC,oBAAzC;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,EAAmDC,kBAAnD,QAA6E,eAA7E;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,aAAzB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;;;AAGA,OAAO,IAAIC,MAAM,GAAG,EAAb,C,CAEP;;AACA,eAAe,SAASC,oBAAT,GAAgC;AAC7C,sBACE,QAAC,KAAD;AACE,IAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,oBADA;AAEPC,MAAAA,MAAM,EAAE,2CAFD;AAGPC,MAAAA,KAAK,EAAE;AAHA,KADX;AAAA,cAMGC,OAAO,iBACN;AAAA,iBACGA,OAAO,CAACH,KAAR,iBAAiB,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cADpB,EAEGG,OAAO,CAACF,MAAR,iBAAkB,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAFrB,EAGGE,OAAO,CAACD,KAAR,iBAAiB,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAHpB;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;KAjBuBH,oB;AAiBvB;AAED,OAAO,MAAMK,WAAW,GAAG,mBACzB;AAAK,EAAA,SAAS,EAAC,iBAAf;AAAA,yBACE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADK;MAAMA,W;AAKb,OAAO,MAAMC,WAAW,GAAG,mBACzB;AAAK,EAAA,SAAS,EAAC,oBAAf;AAAA,yBACE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADK;MAAMA,W;AAKb,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAEjC,MAAIC,OAAO,GAAG,QAAd;AACA,MAAIC,UAAU,GAAG,IAAIC,KAAJ,EAAjB;AACA,MAAIC,SAAS,GAAG,IAAID,KAAJ,EAAhB;AAEA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBjC,KAAK,CAACkC,QAAN,CAAe,IAAf,CAA9B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpC,KAAK,CAACkC,QAAN,CAAe,KAAf,CAAxB;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BtC,KAAK,CAACkC,QAAN,CAAe,IAAf,CAAlC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BxC,KAAK,CAACkC,QAAN,CAAe,IAAf,CAAhC;;AAEA,QAAMO,eAAe,GAAG,MAAM;AAC5BL,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAGA,QAAMM,WAAW,GAAG,MAAM;AACxBN,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,MAAIO,aAAJ;AACA,MAAIC,YAAJ;AAEA5C,EAAAA,KAAK,CAAC6C,SAAN,CAAgB,MAAM;AACpBnC,IAAAA,kBAAkB,CAACC,IAAD,EAAQmC,IAAD,IAAU;AACjCC,MAAAA,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBH,IAAnB;AACD,KAFiB,CAAlB;AAID,GALD,EAKG,EALH;AAOA,QAAMI,UAAU,GAAG/C,WAAW,EAA9B;;AAEA,QAAMgD,iBAAiB,GAAG,MAAM;AAC9BJ,IAAAA,MAAM,CAACK,iBAAP,GAA2B,IAAI3C,iBAAJ,CAAsB,qBAAtB,EAA6C;AACtE,cAAQ,QAD8D;AAEtE,kBAAa4C,QAAD,IAAc,CACzB,CAHqE;AAItE,0BAAoB,MAAM,CACzB;AALqE,KAA7C,EAMxB1C,IANwB,CAA3B;AAOD,GARD;;AAUA,QAAM;AAAE2C,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,SAA1B;AAAqCC,IAAAA;AAArC,MAA+CvD,OAAO,CAAC;AAC3DwD,IAAAA,aAAa,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAD4C;AACzBC,IAAAA,IAAI,EAAE;AADmB,GAAD,CAA5D;AAGA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA4BN,SAAlC;;AAEA,QAAMO,QAAQ,GAAG,MAAOjB,IAAP,IAAgB;AAE/B,QAAIA,IAAI,CAACa,KAAL,CAAWK,MAAX,IAAqB,EAArB,IAA2BpC,OAAO,CAACqC,IAAR,CAAanB,IAAI,CAACa,KAAlB,CAA/B,EAAyD;AACvD;AACAvB,MAAAA,OAAO,CAAC,KAAD,CAAP;AACAqB,MAAAA,KAAK;AAEN,KALD,MAKO;AAEL,YAAMS,cAAc,GAAG,MAAM3D,OAAO,CAACD,UAAU,CAACM,EAAD,EAAK,QAAL,CAAX,CAApC;AACAsD,MAAAA,cAAc,CAACC,OAAf,CAAwB9D,GAAD,IAAS;AAC9BwB,QAAAA,UAAU,CAACuC,IAAX,CAAgB/D,GAAG,CAACgE,EAApB;AACD,OAFD;AAIA,YAAMC,aAAa,GAAG,MAAM/D,OAAO,CAACD,UAAU,CAACM,EAAD,EAAK,OAAL,CAAX,CAAnC;AACA0D,MAAAA,aAAa,CAACH,OAAd,CAAuB9D,GAAD,IAAS;AAC7B0B,QAAAA,SAAS,CAACqC,IAAV,CAAe/D,GAAG,CAACgE,EAAnB;AACD,OAFD;AAIA1B,MAAAA,aAAa,GAAGd,UAAU,CAAC0C,IAAX,CAAgBC,KAAK,IAAIA,KAAK,IAAI1B,IAAI,CAACa,KAAvC,CAAhB;AACAf,MAAAA,YAAY,GAAGb,SAAS,CAACwC,IAAV,CAAeC,KAAK,IAAIA,KAAK,IAAI1B,IAAI,CAACa,KAAtC,CAAf;;AAEA,UAAIhB,aAAa,IAAIC,YAArB,EAAmC;AAEjC,YAAI6B,WAAW,GAAG3B,IAAI,CAACa,KAAvB;AACA,YAAIe,IAAI,GAAG,EAAX;AACAvD,QAAAA,MAAM,GAAG2B,IAAI,CAACa,KAAd,CAJiC,CAKjC;;AACAR,QAAAA,iBAAiB;AACjB,cAAMwB,WAAW,GAAG5B,MAAM,CAACK,iBAA3B;AAEA,YAAIwB,UAAU,GAAGC,QAAQ,CAAClE,IAAT,CAAcmE,iBAAd,CAAgCF,UAAhC,CAA2CG,kBAAkB,CAACJ,WAA9D,EAA2ED,IAA3E,CAAjB;AACAG,QAAAA,QAAQ,CAAClE,IAAT,GAAgBqE,oBAAhB,CAAqCJ,UAArC,EAViC,CAYjC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGD,OA7BD,MA6BO;AAELnB,QAAAA,KAAK;AACLrB,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF;AACF,GAzDD;;AA2DA,sBACE;AAAA,cACGJ,OAAO,gBAEN;AAAM,MAAA,QAAQ,EAAEuB,YAAY,CAACQ,QAAD,CAA5B;AAAA,8BACE,QAAC,WAAD;AACE,QAAA,IAAI,EAAG;AADT;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,EAAE,EAAC,OAAvB;AAA+B,QAAA,WAAW,EAAC,OAA3C;AAAmD,QAAA,IAAI,EAAC,OAAxD;AAAA,WAAoET,QAAQ,CAAC,OAAD,EAAU;AAAE2B,UAAAA,QAAQ,EAAE;AAAZ,SAAV;AAA5E;AAAA;AAAA;AAAA;AAAA,cAJF,eAME,QAAC,MAAD;AACE,QAAA,SAAS,EAAE5C,SADb;AAEE,QAAA,QAAQ,EAAEE,QAFZ;AAGE,QAAA,IAAI,EAAEJ,IAHR;AAIE,QAAA,OAAO,EAAEO,WAJX;AAAA,gCAME,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE,QAAC,aAAD;AAAA,iCAEE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,gBAPF,eAcE,QAAC,aAAD;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eA0BE;AAAK,QAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,cA1BF,eA2BE;AAAQ,QAAA,SAAS,EAAC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFM,gBAgCN,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAjCJ;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CA9IM;;GAAMf,a;UA4BQxB,W,EAYkCD,O;;;MAxC1CyB,a;AA+Ib,OAAO,MAAMuD,kBAAkB,GAAG,MAAM;AAAA;;AAEtC,QAAMhC,UAAU,GAAG/C,WAAW,EAA9B;AACA,QAAM;AAAEmD,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAwCtD,OAAO,EAArD;AAEA,QAAM,CAAC8B,OAAD,EAAUC,UAAV,IAAwBjC,KAAK,CAACkC,QAAN,CAAe,IAAf,CAA9B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpC,KAAK,CAACkC,QAAN,CAAe,KAAf,CAAxB;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BtC,KAAK,CAACkC,QAAN,CAAe,IAAf,CAAlC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BxC,KAAK,CAACkC,QAAN,CAAe,IAAf,CAAhC;;AAEA,QAAMO,eAAe,GAAG,MAAM;AAC5BL,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAGA,QAAMM,WAAW,GAAG,MAAM;AACxBN,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,QAAM+C,WAAW,GAAG,MAAOrC,IAAP,IAAgB;AAElC,QAAIiC,kBAAkB,GAAGhC,MAAM,CAACgC,kBAAhC;AACAA,IAAAA,kBAAkB,CAACK,OAAnB,CAA2BtC,IAAI,CAAC4B,IAAhC,EAAsCW,IAAtC,CAA4CC,MAAD,IAAY;AACrD;AACA,YAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;AACA,OAAC,CAACA,IAAI,CAACC,GAAP,IAActC,UAAU,CAAC,OAAD,CAAxB;AACD,KAJD,EAIGuC,KAJH,CAIUC,KAAD,IAAW;AAClB;AACA3C,MAAAA,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmByC,KAAnB;AACAtD,MAAAA,OAAO,CAAC,KAAD,CAAP;AACAW,MAAAA,MAAM,CAAC4C,KAAP,CAAc,mCAAd;AACD,KATD;AAUD,GAbD;;AAeA,sBACE;AAAM,IAAA,QAAQ,EAAEpC,YAAY,CAAC4B,WAAD,CAA5B;AAAA,4BAEE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAE;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,WAAW,EAAC,cAA/B;AAA8C,MAAA,IAAI,EAAC,MAAnD;AAAA,SAA8D7B,QAAQ,CAAC,MAAD,EAAS;AAAE2B,QAAAA,QAAQ,EAAE;AAAZ,OAAT;AAAtE;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAME,QAAC,MAAD;AACE,MAAA,SAAS,EAAE5C,SADb;AAEE,MAAA,QAAQ,EAAEE,QAFZ;AAGE,MAAA,IAAI,EAAEJ,IAHR;AAIE,MAAA,OAAO,EAAEO,WAJX;AAAA,8BAME,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,aAAD;AAAA,+BAEE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cAPF,eAcE,QAAC,aAAD;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CA5DM;;IAAMwC,kB;UAEQ/E,W,EAC2BD,O;;;MAHnCgF,kB","sourcesContent":["import React from 'react';\nimport './Input.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Media from 'react-media';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport ReturnQuote from './Quote';\n\n// Firebase Auth for phone\nimport { doc, collection, getDocs } from \"firebase/firestore\";\nimport { signInWithPhoneNumber, RecaptchaVerifier, onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from '../firebase';\n\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContentText from '@mui/material/DialogContentText';\n\n\nexport let phoneX = '';\n\n// Input Field form\nexport default function REturnInPutConnexIon() {\n  return (\n    <Media\n      queries={{\n        small: '(max-width: 599px)',\n        medium: '(min-width: 600px) and (max-width:1199px)',\n        large: '(min-width: 1200px)',\n      }}>\n      {matches => (\n        <>\n          {matches.small && <ScreenSmall />}\n          {matches.medium && <ScreenLarge />}\n          {matches.large && <ScreenLarge />}\n        </>\n      )}\n    </Media>\n  );\n};\n\nexport const ScreenLarge = () => (\n  <div className='form-input-sign'>\n    <FormDataInput />\n  </div>\n);\nexport const ScreenSmall = () => (\n  <div className='form-input-sign-sm'>\n    <FormDataInput />\n  </div>\n);\nexport const FormDataInput = () => {\n\n  let regular = /[a-z]+/;\n  let pushClient = new Array();\n  let pushAgent = new Array();\n\n  const [checked, setChecked] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth, setFullWidth] = React.useState(true);\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  let isExistClient;\n  let isExistAgent;\n\n  React.useEffect(() => {\n    onAuthStateChanged(auth, (data) => {\n      window.console.log(data);\n    })\n\n  }, []);\n\n  const navigation = useNavigate();\n\n  const generateRecaptcha = () => {\n    window.recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {\n      'size': 'normal',\n      'callback': (response) => {\n      },\n      'expired-callback': () => {\n      }\n    }, auth);\n  }\n\n  const { register, handleSubmit, formState, reset } = useForm({\n    defaultValues: { phone: '+243' }, mode: 'onChange'\n  });\n  const { isSubmitting, isValid } = formState;\n\n  const onSubmit = async (data) => {\n\n    if (data.phone.length != 13 || regular.test(data.phone)) {\n      // window.alert(`Numero télèphone est Invalid `);\n      setOpen(false);\n      reset();\n\n    } else {\n\n      const clientSnapshot = await getDocs(collection(db, \"client\"));\n      clientSnapshot.forEach((doc) => {\n        pushClient.push(doc.id);\n      });\n\n      const agentSnapshot = await getDocs(collection(db, \"agent\"));\n      agentSnapshot.forEach((doc) => {\n        pushAgent.push(doc.id);\n      });\n\n      isExistClient = pushClient.some(value => value == data.phone);\n      isExistAgent = pushAgent.some(value => value == data.phone);\n\n      if (isExistClient || isExistAgent) {\n\n        let phoneNumber = data.phone;\n        let code = '';\n        phoneX = data.phone;\n        // navigation('/dash');\n        generateRecaptcha();\n        const appVerifier = window.recaptchaVerifier;\n\n        var credential = firebase.auth.PhoneAuthProvider.credential(confirmationResult.appVerifier, code);\n        firebase.auth().signInWithCredential(credential);\n\n        // signInWithPhoneNumber(auth, phoneNumber, appVerifier)\n        //   .then((confirmationResult) => {\n        //     // SMS sent. Prompt user to type the code from the message, then sign the\n        //     // user in with confirmationResult.confirm(code).\n        //     window.confirmationResult = confirmationResult;\n\n        //     phoneX = data.phone;\n        //     setChecked(false);\n        //     setOpen(false);\n        //     reset();\n\n        //   }).catch((error) => {\n        //     // Error; SMS not sent\n        //     window.console.log(error);\n        //   });\n\n\n      } else {\n\n        reset();\n        setOpen(true);\n      }\n    }\n  };\n\n  return (\n    <div>\n      {checked\n        ?\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <ReturnQuote\n            Text={`Envoyer, échanger ou accepter des fiat avec un numero personnel sur votre compte.`}\n          />\n          <input type='phone' id='phone' placeholder='Phone' name='phone' {...register('phone', { required: true })} />\n\n          <Dialog\n            fullWidth={fullWidth}\n            maxWidth={maxWidth}\n            open={open}\n            onClose={handleClose}\n          >\n            <DialogTitle>MuunganoMoney</DialogTitle>\n            <DialogContent>\n\n              <DialogContentText>\n                Le numéro de téléphone saisi n'est pas encore enregistré auprès de MuunganoMoney.Ou invalide\n     </DialogContentText>\n\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose}>Fermer</Button>\n            </DialogActions>\n          </Dialog>\n\n\n          <div id='recaptcha-container'></div>\n          <button className='Btn'>Connexion</button>\n        </form>\n        :\n        <InputCodeRecaptcha />\n      }\n    </div>\n  );\n};\nexport const InputCodeRecaptcha = () => {\n\n  const navigation = useNavigate();\n  const { register, handleSubmit, formState } = useForm();\n\n  const [checked, setChecked] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth, setFullWidth] = React.useState(true);\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onSubmitOTP = async (data) => {\n\n    let confirmationResult = window.confirmationResult;\n    confirmationResult.confirm(data.code).then((result) => {\n      // User signed in successfully.\n      const user = result.user;\n      !!user.uid && navigation('/dash');\n    }).catch((error) => {\n      // User couldn't sign in (bad verification code?)\n      window.console.log(error);\n      setOpen(false);\n      window.alert(`Le code expire, reconnectez-vous!`);\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmitOTP)}>\n\n      <ReturnQuote Text={'Valider code envoyer.'} />\n      <input type='text' placeholder='Code Envoyer' name='code' {...register('code', { required: true })} />\n      <button className='Btn'>Connexion</button>\n\n      <Dialog\n        fullWidth={fullWidth}\n        maxWidth={maxWidth}\n        open={open}\n        onClose={handleClose}\n      >\n        <DialogTitle>MuunganoMoney</DialogTitle>\n        <DialogContent>\n\n          <DialogContentText>\n            Code incorrect, veuillez vérifier\n     </DialogContentText>\n\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Fermer</Button>\n        </DialogActions>\n      </Dialog>\n\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}