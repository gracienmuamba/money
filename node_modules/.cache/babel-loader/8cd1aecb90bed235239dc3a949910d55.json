{"ast":null,"code":"'use strict';\n\nlet list = {\n  split(string, separators, last) {\n    let array = [];\n    let current = '';\n    let split = false;\n    let func = 0;\n    let inQuote = false;\n    let prevQuote = '';\n    let escape = false;\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false;\n      } else if (letter === '\\\\') {\n        escape = true;\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false;\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true;\n        prevQuote = letter;\n      } else if (letter === '(') {\n        func += 1;\n      } else if (letter === ')') {\n        if (func > 0) func -= 1;\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true;\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim());\n        current = '';\n        split = false;\n      } else {\n        current += letter;\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim());\n    return array;\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t'];\n    return list.split(string, spaces);\n  },\n\n  comma(string) {\n    return list.split(string, [','], true);\n  }\n\n};\nmodule.exports = list;\nlist.default = list;","map":{"version":3,"sources":["/Users/USER/Desktop/Money/node_modules/postcss/lib/list.js"],"names":["list","split","string","separators","last","array","current","func","inQuote","prevQuote","escape","letter","includes","push","trim","space","spaces","comma","module","exports","default"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAG;AACTC,EAAAA,KAAK,CAACC,MAAD,EAASC,UAAT,EAAqBC,IAArB,EAA2B;AAC9B,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIL,KAAK,GAAG,KAAZ;AAEA,QAAIM,IAAI,GAAG,CAAX;AACA,QAAIC,OAAO,GAAG,KAAd;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,MAAM,GAAG,KAAb;;AAEA,SAAK,IAAIC,MAAT,IAAmBT,MAAnB,EAA2B;AACzB,UAAIQ,MAAJ,EAAY;AACVA,QAAAA,MAAM,GAAG,KAAT;AACD,OAFD,MAEO,IAAIC,MAAM,KAAK,IAAf,EAAqB;AAC1BD,QAAAA,MAAM,GAAG,IAAT;AACD,OAFM,MAEA,IAAIF,OAAJ,EAAa;AAClB,YAAIG,MAAM,KAAKF,SAAf,EAA0B;AACxBD,UAAAA,OAAO,GAAG,KAAV;AACD;AACF,OAJM,MAIA,IAAIG,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAC3CH,QAAAA,OAAO,GAAG,IAAV;AACAC,QAAAA,SAAS,GAAGE,MAAZ;AACD,OAHM,MAGA,IAAIA,MAAM,KAAK,GAAf,EAAoB;AACzBJ,QAAAA,IAAI,IAAI,CAAR;AACD,OAFM,MAEA,IAAII,MAAM,KAAK,GAAf,EAAoB;AACzB,YAAIJ,IAAI,GAAG,CAAX,EAAcA,IAAI,IAAI,CAAR;AACf,OAFM,MAEA,IAAIA,IAAI,KAAK,CAAb,EAAgB;AACrB,YAAIJ,UAAU,CAACS,QAAX,CAAoBD,MAApB,CAAJ,EAAiCV,KAAK,GAAG,IAAR;AAClC;;AAED,UAAIA,KAAJ,EAAW;AACT,YAAIK,OAAO,KAAK,EAAhB,EAAoBD,KAAK,CAACQ,IAAN,CAAWP,OAAO,CAACQ,IAAR,EAAX;AACpBR,QAAAA,OAAO,GAAG,EAAV;AACAL,QAAAA,KAAK,GAAG,KAAR;AACD,OAJD,MAIO;AACLK,QAAAA,OAAO,IAAIK,MAAX;AACD;AACF;;AAED,QAAIP,IAAI,IAAIE,OAAO,KAAK,EAAxB,EAA4BD,KAAK,CAACQ,IAAN,CAAWP,OAAO,CAACQ,IAAR,EAAX;AAC5B,WAAOT,KAAP;AACD,GA1CQ;;AA4CTU,EAAAA,KAAK,CAACb,MAAD,EAAS;AACZ,QAAIc,MAAM,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAb;AACA,WAAOhB,IAAI,CAACC,KAAL,CAAWC,MAAX,EAAmBc,MAAnB,CAAP;AACD,GA/CQ;;AAiDTC,EAAAA,KAAK,CAACf,MAAD,EAAS;AACZ,WAAOF,IAAI,CAACC,KAAL,CAAWC,MAAX,EAAmB,CAAC,GAAD,CAAnB,EAA0B,IAA1B,CAAP;AACD;;AAnDQ,CAAX;AAsDAgB,MAAM,CAACC,OAAP,GAAiBnB,IAAjB;AACAA,IAAI,CAACoB,OAAL,GAAepB,IAAf","sourcesContent":["'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n"]},"metadata":{},"sourceType":"script"}