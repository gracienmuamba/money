{"ast":null,"code":"var _jsxFileName = \"/Users/USER/Desktop/MuunganoMoney/src/Sign/Input.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport './Input.css';\nimport Media from 'react-media';\nimport { RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\";\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let phoneX = '';\nlet regular = /[a-z]+/;\nexport default function ReturnSign() {\n  return /*#__PURE__*/_jsxDEV(Media, {\n    queries: {\n      small: '(max-width: 599px)',\n      medium: '(min-width: 600px) and (max-width:1199px)',\n      large: '(min-width: 1200px)'\n    },\n    children: matches => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [matches.small && /*#__PURE__*/_jsxDEV(ScreenSmall, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 24\n      }, this), matches.medium && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 25\n      }, this), matches.large && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }, this);\n}\n_c = ReturnSign;\n;\nexport const ScreenLarge = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"form-input-signphone\",\n  children: /*#__PURE__*/_jsxDEV(ReturnInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 31,\n  columnNumber: 2\n}, this);\n_c2 = ScreenLarge;\nexport const ScreenSmall = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"form-input-signphone-sm\",\n  children: /*#__PURE__*/_jsxDEV(ReturnInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 2\n}, this);\n_c3 = ScreenSmall;\nexport const ReturnInput = () => {\n  _s();\n\n  const generateRecaptcha = () => {\n    window.recaptchaVerifier = new RecaptchaVerifier('sign-in-button', {\n      'size': 'invisible',\n      'callback': response => {// reCAPTCHA solved, allow signInWithPhoneNumber.\n        // onSignInSubmit();\n      }\n    }, auth);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm({\n    defaultValues: {\n      phone: '+243'\n    }\n  });\n\n  const onSubmit = async data => {\n    if (data.phone.length != 13 || regular.test(data.phone)) {\n      // setOpen(true);\n      reset();\n    } else {\n      generateRecaptcha();\n      const appVerifier = window.recaptchaVerifier;\n      signInWithPhoneNumber(auth, data.phone, appVerifier).then(confirmationResult => {\n        // SMS sent. Prompt user to type the code from the message, then sign the\n        // user in with confirmationResult.confirm(code).\n        window.confirmationResult = confirmationResult; // ...\n      }).catch(error => {\n        // Error; SMS not sent\n        window.console.log(error);\n      });\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"phone\",\n      ...register('phone', {\n        required: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sign-in-button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Btn\",\n      children: \"Suivant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ReturnInput, \"Tv3ax+IYeS+IUhXACHCvYwCyM94=\", false, function () {\n  return [useForm];\n});\n\n_c4 = ReturnInput;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ReturnSign\");\n$RefreshReg$(_c2, \"ScreenLarge\");\n$RefreshReg$(_c3, \"ScreenSmall\");\n$RefreshReg$(_c4, \"ReturnInput\");","map":{"version":3,"sources":["/Users/USER/Desktop/MuunganoMoney/src/Sign/Input.js"],"names":["React","useForm","Media","RecaptchaVerifier","signInWithPhoneNumber","auth","phoneX","regular","ReturnSign","small","medium","large","matches","ScreenLarge","ScreenSmall","ReturnInput","generateRecaptcha","window","recaptchaVerifier","response","register","handleSubmit","reset","defaultValues","phone","onSubmit","data","length","test","appVerifier","then","confirmationResult","catch","error","console","log","required"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport './Input.css';\nimport Media from 'react-media';\nimport { RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\";\nimport { auth } from '../firebase';\n\nexport let phoneX = '';\nlet regular = /[a-z]+/;\n\nexport default function ReturnSign() {\n return (\n  <Media\n   queries={{\n    small: '(max-width: 599px)',\n    medium: '(min-width: 600px) and (max-width:1199px)',\n    large: '(min-width: 1200px)',\n   }}>\n   {matches => (\n    <>\n     {matches.small && <ScreenSmall />}\n     {matches.medium && <ScreenLarge />}\n     {matches.large && <ScreenLarge />}\n    </>\n   )}\n  </Media>\n );\n};\n\nexport const ScreenLarge = () => (\n <div className='form-input-signphone'>\n  <ReturnInput />\n </div>\n);\nexport const ScreenSmall = () => (\n <div className='form-input-signphone-sm'>\n  <ReturnInput />\n </div>\n);\n\nexport const ReturnInput = () => {\n\n const generateRecaptcha = () => {\n  window.recaptchaVerifier = new RecaptchaVerifier('sign-in-button', {\n   'size': 'invisible',\n   'callback': (response) => {\n    // reCAPTCHA solved, allow signInWithPhoneNumber.\n    // onSignInSubmit();\n   }\n  }, auth);\n\n }\n\n const { register, handleSubmit, reset } = useForm({ defaultValues: { phone: '+243' } });\n const onSubmit = async (data) => {\n\n  if (data.phone.length != 13 || regular.test(data.phone)) {\n   // setOpen(true);\n   reset();\n  }\n  else {\n\n   generateRecaptcha();\n   const appVerifier = window.recaptchaVerifier;\n\n   signInWithPhoneNumber(auth, data.phone, appVerifier)\n    .then((confirmationResult) => {\n     // SMS sent. Prompt user to type the code from the message, then sign the\n     // user in with confirmationResult.confirm(code).\n     window.confirmationResult = confirmationResult;\n     // ...\n    }).catch((error) => {\n     // Error; SMS not sent\n     window.console.log(error);\n    });\n\n\n  };\n };\n return (\n  <form onSubmit={handleSubmit(onSubmit)}>\n   <input type='text' name='phone' {...register('phone', { required: true })} />\n   <div className='sign-in-button'></div>\n   <button className='Btn'>Suivant</button>\n  </form>\n )\n}"]},"metadata":{},"sourceType":"module"}