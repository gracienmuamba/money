{"ast":null,"code":"import { d as _inherits, e as _createSuper, _ as _createClass, a as _classCallCheck, g as _get, h as _getPrototypeOf, f as _slicedToArray, i as _set, b as _objectWithoutProperties } from '../_rollupPluginBabelHelpers-67bba7fb.js';\nimport ChangeDetails from '../core/change-details.js';\nimport createMask from './factory.js';\nimport Masked from './base.js';\nimport { normalizePrepare } from '../core/utils.js';\nimport IMask from '../core/holder.js';\nimport '../core/continuous-tail-details.js';\nvar _excluded = [\"compiledMasks\", \"currentMaskRef\", \"currentMask\"];\n/** Dynamic mask for choosing apropriate mask in run-time */\n\nvar MaskedDynamic = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedDynamic, _Masked);\n\n  var _super = _createSuper(MaskedDynamic);\n  /** Currently chosen mask */\n\n  /** Compliled {@link Masked} options */\n\n  /** Chooses {@link Masked} depending on input value */\n\n  /**\n    @param {Object} opts\n  */\n\n\n  function MaskedDynamic(opts) {\n    var _this;\n\n    _classCallCheck(this, MaskedDynamic);\n\n    _this = _super.call(this, Object.assign({}, MaskedDynamic.DEFAULTS, opts));\n    _this.currentMask = null;\n    return _this;\n  }\n  /**\n    @override\n  */\n\n\n  _createClass(MaskedDynamic, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      _get(_getPrototypeOf(MaskedDynamic.prototype), \"_update\", this).call(this, opts);\n\n      if ('mask' in opts) {\n        // mask could be totally dynamic with only `dispatch` option\n        this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(function (m) {\n          return createMask(m);\n        }) : [];\n      }\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var details = this._applyDispatch(ch, flags);\n\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendChar(ch, this.currentMaskFlags(flags)));\n      }\n\n      return details;\n    }\n  }, {\n    key: \"_applyDispatch\",\n    value: function _applyDispatch() {\n      var appended = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;\n      var inputValue = this.rawInputValue;\n      var insertValue = flags.tail && flags._beforeTailState != null ? // $FlowFixMe - tired to fight with type system\n      flags._beforeTailState._rawInputValue : inputValue;\n      var tailValue = inputValue.slice(insertValue.length);\n      var prevMask = this.currentMask;\n      var details = new ChangeDetails();\n      var prevMaskState = prevMask === null || prevMask === void 0 ? void 0 : prevMask.state; // clone flags to prevent overwriting `_beforeTailState`\n\n      this.currentMask = this.doDispatch(appended, Object.assign({}, flags)); // restore state after dispatch\n\n      if (this.currentMask) {\n        if (this.currentMask !== prevMask) {\n          // if mask changed reapply input\n          this.currentMask.reset();\n\n          if (insertValue) {\n            // $FlowFixMe - it's ok, we don't change current mask above\n            var d = this.currentMask.append(insertValue, {\n              raw: true\n            });\n            details.tailShift = d.inserted.length - prevValueBeforeTail.length;\n          }\n\n          if (tailValue) {\n            // $FlowFixMe - it's ok, we don't change current mask above\n            details.tailShift += this.currentMask.append(tailValue, {\n              raw: true,\n              tail: true\n            }).tailShift;\n          }\n        } else {\n          // Dispatch can do something bad with state, so\n          // restore prev mask state\n          this.currentMask.state = prevMaskState;\n        }\n      }\n\n      return details;\n    }\n  }, {\n    key: \"_appendPlaceholder\",\n    value: function _appendPlaceholder() {\n      var details = this._applyDispatch.apply(this, arguments);\n\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendPlaceholder());\n      }\n\n      return details;\n    }\n    /**\n     @override\n    */\n\n  }, {\n    key: \"_appendEager\",\n    value: function _appendEager() {\n      var details = this._applyDispatch.apply(this, arguments);\n\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendEager());\n      }\n\n      return details;\n    }\n  }, {\n    key: \"currentMaskFlags\",\n    value: function currentMaskFlags(flags) {\n      var _flags$_beforeTailSta, _flags$_beforeTailSta2;\n\n      return Object.assign({}, flags, {\n        _beforeTailState: ((_flags$_beforeTailSta = flags._beforeTailState) === null || _flags$_beforeTailSta === void 0 ? void 0 : _flags$_beforeTailSta.currentMaskRef) === this.currentMask && ((_flags$_beforeTailSta2 = flags._beforeTailState) === null || _flags$_beforeTailSta2 === void 0 ? void 0 : _flags$_beforeTailSta2.currentMask) || flags._beforeTailState\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doDispatch\",\n    value: function doDispatch(appended) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.dispatch(appended, this, flags);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate(flags) {\n      return _get(_getPrototypeOf(MaskedDynamic.prototype), \"doValidate\", this).call(this, flags) && (!this.currentMask || this.currentMask.doValidate(this.currentMaskFlags(flags)));\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(str) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _normalizePrepare = normalizePrepare(_get(_getPrototypeOf(MaskedDynamic.prototype), \"doPrepare\", this).call(this, str, flags)),\n          _normalizePrepare2 = _slicedToArray(_normalizePrepare, 2),\n          s = _normalizePrepare2[0],\n          details = _normalizePrepare2[1];\n\n      if (this.currentMask) {\n        var currentDetails;\n\n        var _normalizePrepare3 = normalizePrepare(_get(_getPrototypeOf(MaskedDynamic.prototype), \"doPrepare\", this).call(this, s, this.currentMaskFlags(flags)));\n\n        var _normalizePrepare4 = _slicedToArray(_normalizePrepare3, 2);\n\n        s = _normalizePrepare4[0];\n        currentDetails = _normalizePrepare4[1];\n        details = details.aggregate(currentDetails);\n      }\n\n      return [s, details];\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this$currentMask;\n\n      (_this$currentMask = this.currentMask) === null || _this$currentMask === void 0 ? void 0 : _this$currentMask.reset();\n      this.compiledMasks.forEach(function (m) {\n        return m.reset();\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.value : '';\n    },\n    set: function set(value) {\n      _set(_getPrototypeOf(MaskedDynamic.prototype), \"value\", value, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.unmaskedValue : '';\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedDynamic.prototype), \"unmaskedValue\", unmaskedValue, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.typedValue : '';\n    } // probably typedValue should not be used with dynamic\n    ,\n    set: function set(value) {\n      var unmaskedValue = String(value); // double check it\n\n      if (this.currentMask) {\n        this.currentMask.typedValue = value;\n        unmaskedValue = this.currentMask.unmaskedValue;\n      }\n\n      this.unmaskedValue = unmaskedValue;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"isComplete\",\n    get: function get() {\n      var _this$currentMask2;\n\n      return Boolean((_this$currentMask2 = this.currentMask) === null || _this$currentMask2 === void 0 ? void 0 : _this$currentMask2.isComplete);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"isFilled\",\n    get: function get() {\n      var _this$currentMask3;\n\n      return Boolean((_this$currentMask3 = this.currentMask) === null || _this$currentMask3 === void 0 ? void 0 : _this$currentMask3.isFilled);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var details = new ChangeDetails();\n\n      if (this.currentMask) {\n        var _this$currentMask4;\n\n        details.aggregate((_this$currentMask4 = this.currentMask).remove.apply(_this$currentMask4, arguments)) // update with dispatch\n        .aggregate(this._applyDispatch());\n      }\n\n      return details;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      var _this$currentMask5;\n\n      return Object.assign({}, _get(_getPrototypeOf(MaskedDynamic.prototype), \"state\", this), {\n        _rawInputValue: this.rawInputValue,\n        compiledMasks: this.compiledMasks.map(function (m) {\n          return m.state;\n        }),\n        currentMaskRef: this.currentMask,\n        currentMask: (_this$currentMask5 = this.currentMask) === null || _this$currentMask5 === void 0 ? void 0 : _this$currentMask5.state\n      });\n    },\n    set: function set(state) {\n      var compiledMasks = state.compiledMasks,\n          currentMaskRef = state.currentMaskRef,\n          currentMask = state.currentMask,\n          maskedState = _objectWithoutProperties(state, _excluded);\n\n      this.compiledMasks.forEach(function (m, mi) {\n        return m.state = compiledMasks[mi];\n      });\n\n      if (currentMaskRef != null) {\n        this.currentMask = currentMaskRef;\n        this.currentMask.state = currentMask;\n      }\n\n      _set(_getPrototypeOf(MaskedDynamic.prototype), \"state\", maskedState, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var _this$currentMask6;\n\n      return this.currentMask ? (_this$currentMask6 = this.currentMask).extractInput.apply(_this$currentMask6, arguments) : '';\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractTail\",\n    value: function extractTail() {\n      var _this$currentMask7, _get2;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.currentMask ? (_this$currentMask7 = this.currentMask).extractTail.apply(_this$currentMask7, args) : (_get2 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"extractTail\", this)).call.apply(_get2, [this].concat(args));\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.currentMask) this.currentMask.doCommit();\n\n      _get(_getPrototypeOf(MaskedDynamic.prototype), \"doCommit\", this).call(this);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos() {\n      var _this$currentMask8, _get3;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return this.currentMask ? (_this$currentMask8 = this.currentMask).nearestInputPos.apply(_this$currentMask8, args) : (_get3 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"nearestInputPos\", this)).call.apply(_get3, [this].concat(args));\n    }\n  }, {\n    key: \"overwrite\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.overwrite : _get(_getPrototypeOf(MaskedDynamic.prototype), \"overwrite\", this);\n    },\n    set: function set(overwrite) {\n      console.warn('\"overwrite\" option is not available in dynamic mask, use this option in siblings');\n    }\n  }, {\n    key: \"eager\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.eager : _get(_getPrototypeOf(MaskedDynamic.prototype), \"eager\", this);\n    },\n    set: function set(eager) {\n      console.warn('\"eager\" option is not available in dynamic mask, use this option in siblings');\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"maskEquals\",\n    value: function maskEquals(mask) {\n      return Array.isArray(mask) && this.compiledMasks.every(function (m, mi) {\n        var _mask$mi;\n\n        return m.maskEquals((_mask$mi = mask[mi]) === null || _mask$mi === void 0 ? void 0 : _mask$mi.mask);\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValueEquals\",\n    value: function typedValueEquals(value) {\n      var _this$currentMask9;\n\n      return Boolean((_this$currentMask9 = this.currentMask) === null || _this$currentMask9 === void 0 ? void 0 : _this$currentMask9.typedValueEquals(value));\n    }\n  }]);\n\n  return MaskedDynamic;\n}(Masked);\n\nMaskedDynamic.DEFAULTS = {\n  dispatch: function dispatch(appended, masked, flags) {\n    if (!masked.compiledMasks.length) return;\n    var inputValue = masked.rawInputValue; // simulate input\n\n    var inputs = masked.compiledMasks.map(function (m, index) {\n      m.reset();\n      m.append(inputValue, {\n        raw: true\n      });\n      m.append(appended, masked.currentMaskFlags(flags));\n      var weight = m.rawInputValue.length;\n      return {\n        weight: weight,\n        index: index\n      };\n    }); // pop masks with longer values first\n\n    inputs.sort(function (i1, i2) {\n      return i2.weight - i1.weight;\n    });\n    return masked.compiledMasks[inputs[0].index];\n  }\n};\nIMask.MaskedDynamic = MaskedDynamic;\nexport { MaskedDynamic as default };","map":{"version":3,"sources":["/Users/USER/Documents/Money/node_modules/imask/esm/masked/dynamic.js"],"names":["d","_inherits","e","_createSuper","_","_createClass","a","_classCallCheck","g","_get","h","_getPrototypeOf","f","_slicedToArray","i","_set","b","_objectWithoutProperties","ChangeDetails","createMask","Masked","normalizePrepare","IMask","_excluded","MaskedDynamic","_Masked","_super","opts","_this","call","Object","assign","DEFAULTS","currentMask","key","value","_update","prototype","compiledMasks","Array","isArray","mask","map","m","_appendCharRaw","ch","flags","arguments","length","undefined","details","_applyDispatch","aggregate","_appendChar","currentMaskFlags","appended","prevValueBeforeTail","tail","_beforeTailState","_value","inputValue","rawInputValue","insertValue","_rawInputValue","tailValue","slice","prevMask","prevMaskState","state","doDispatch","reset","append","raw","tailShift","inserted","_appendPlaceholder","apply","_appendEager","_flags$_beforeTailSta","_flags$_beforeTailSta2","currentMaskRef","dispatch","doValidate","doPrepare","str","_normalizePrepare","_normalizePrepare2","s","currentDetails","_normalizePrepare3","_normalizePrepare4","_this$currentMask","forEach","get","set","unmaskedValue","typedValue","String","_this$currentMask2","Boolean","isComplete","_this$currentMask3","isFilled","remove","_this$currentMask4","_this$currentMask5","maskedState","mi","extractInput","_this$currentMask6","extractTail","_this$currentMask7","_get2","_len","args","_key","concat","doCommit","nearestInputPos","_this$currentMask8","_get3","_len2","_key2","overwrite","console","warn","eager","maskEquals","every","_mask$mi","typedValueEquals","_this$currentMask9","masked","inputs","index","weight","sort","i1","i2","default"],"mappings":"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","sourcesContent":["import { d as _inherits, e as _createSuper, _ as _createClass, a as _classCallCheck, g as _get, h as _getPrototypeOf, f as _slicedToArray, i as _set, b as _objectWithoutProperties } from '../_rollupPluginBabelHelpers-67bba7fb.js';\nimport ChangeDetails from '../core/change-details.js';\nimport createMask from './factory.js';\nimport Masked from './base.js';\nimport { normalizePrepare } from '../core/utils.js';\nimport IMask from '../core/holder.js';\nimport '../core/continuous-tail-details.js';\n\nvar _excluded = [\"compiledMasks\", \"currentMaskRef\", \"currentMask\"];\n\n/** Dynamic mask for choosing apropriate mask in run-time */\nvar MaskedDynamic = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedDynamic, _Masked);\n\n  var _super = _createSuper(MaskedDynamic);\n\n  /** Currently chosen mask */\n\n  /** Compliled {@link Masked} options */\n\n  /** Chooses {@link Masked} depending on input value */\n\n  /**\n    @param {Object} opts\n  */\n  function MaskedDynamic(opts) {\n    var _this;\n\n    _classCallCheck(this, MaskedDynamic);\n\n    _this = _super.call(this, Object.assign({}, MaskedDynamic.DEFAULTS, opts));\n    _this.currentMask = null;\n    return _this;\n  }\n  /**\n    @override\n  */\n\n\n  _createClass(MaskedDynamic, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      _get(_getPrototypeOf(MaskedDynamic.prototype), \"_update\", this).call(this, opts);\n\n      if ('mask' in opts) {\n        // mask could be totally dynamic with only `dispatch` option\n        this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(function (m) {\n          return createMask(m);\n        }) : [];\n      }\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var details = this._applyDispatch(ch, flags);\n\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendChar(ch, this.currentMaskFlags(flags)));\n      }\n\n      return details;\n    }\n  }, {\n    key: \"_applyDispatch\",\n    value: function _applyDispatch() {\n      var appended = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;\n      var inputValue = this.rawInputValue;\n      var insertValue = flags.tail && flags._beforeTailState != null ? // $FlowFixMe - tired to fight with type system\n      flags._beforeTailState._rawInputValue : inputValue;\n      var tailValue = inputValue.slice(insertValue.length);\n      var prevMask = this.currentMask;\n      var details = new ChangeDetails();\n      var prevMaskState = prevMask === null || prevMask === void 0 ? void 0 : prevMask.state; // clone flags to prevent overwriting `_beforeTailState`\n\n      this.currentMask = this.doDispatch(appended, Object.assign({}, flags)); // restore state after dispatch\n\n      if (this.currentMask) {\n        if (this.currentMask !== prevMask) {\n          // if mask changed reapply input\n          this.currentMask.reset();\n\n          if (insertValue) {\n            // $FlowFixMe - it's ok, we don't change current mask above\n            var d = this.currentMask.append(insertValue, {\n              raw: true\n            });\n            details.tailShift = d.inserted.length - prevValueBeforeTail.length;\n          }\n\n          if (tailValue) {\n            // $FlowFixMe - it's ok, we don't change current mask above\n            details.tailShift += this.currentMask.append(tailValue, {\n              raw: true,\n              tail: true\n            }).tailShift;\n          }\n        } else {\n          // Dispatch can do something bad with state, so\n          // restore prev mask state\n          this.currentMask.state = prevMaskState;\n        }\n      }\n\n      return details;\n    }\n  }, {\n    key: \"_appendPlaceholder\",\n    value: function _appendPlaceholder() {\n      var details = this._applyDispatch.apply(this, arguments);\n\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendPlaceholder());\n      }\n\n      return details;\n    }\n    /**\n     @override\n    */\n\n  }, {\n    key: \"_appendEager\",\n    value: function _appendEager() {\n      var details = this._applyDispatch.apply(this, arguments);\n\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendEager());\n      }\n\n      return details;\n    }\n  }, {\n    key: \"currentMaskFlags\",\n    value: function currentMaskFlags(flags) {\n      var _flags$_beforeTailSta, _flags$_beforeTailSta2;\n\n      return Object.assign({}, flags, {\n        _beforeTailState: ((_flags$_beforeTailSta = flags._beforeTailState) === null || _flags$_beforeTailSta === void 0 ? void 0 : _flags$_beforeTailSta.currentMaskRef) === this.currentMask && ((_flags$_beforeTailSta2 = flags._beforeTailState) === null || _flags$_beforeTailSta2 === void 0 ? void 0 : _flags$_beforeTailSta2.currentMask) || flags._beforeTailState\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doDispatch\",\n    value: function doDispatch(appended) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.dispatch(appended, this, flags);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate(flags) {\n      return _get(_getPrototypeOf(MaskedDynamic.prototype), \"doValidate\", this).call(this, flags) && (!this.currentMask || this.currentMask.doValidate(this.currentMaskFlags(flags)));\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(str) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _normalizePrepare = normalizePrepare(_get(_getPrototypeOf(MaskedDynamic.prototype), \"doPrepare\", this).call(this, str, flags)),\n          _normalizePrepare2 = _slicedToArray(_normalizePrepare, 2),\n          s = _normalizePrepare2[0],\n          details = _normalizePrepare2[1];\n\n      if (this.currentMask) {\n        var currentDetails;\n\n        var _normalizePrepare3 = normalizePrepare(_get(_getPrototypeOf(MaskedDynamic.prototype), \"doPrepare\", this).call(this, s, this.currentMaskFlags(flags)));\n\n        var _normalizePrepare4 = _slicedToArray(_normalizePrepare3, 2);\n\n        s = _normalizePrepare4[0];\n        currentDetails = _normalizePrepare4[1];\n        details = details.aggregate(currentDetails);\n      }\n\n      return [s, details];\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this$currentMask;\n\n      (_this$currentMask = this.currentMask) === null || _this$currentMask === void 0 ? void 0 : _this$currentMask.reset();\n      this.compiledMasks.forEach(function (m) {\n        return m.reset();\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.value : '';\n    },\n    set: function set(value) {\n      _set(_getPrototypeOf(MaskedDynamic.prototype), \"value\", value, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.unmaskedValue : '';\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedDynamic.prototype), \"unmaskedValue\", unmaskedValue, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.typedValue : '';\n    } // probably typedValue should not be used with dynamic\n    ,\n    set: function set(value) {\n      var unmaskedValue = String(value); // double check it\n\n      if (this.currentMask) {\n        this.currentMask.typedValue = value;\n        unmaskedValue = this.currentMask.unmaskedValue;\n      }\n\n      this.unmaskedValue = unmaskedValue;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"isComplete\",\n    get: function get() {\n      var _this$currentMask2;\n\n      return Boolean((_this$currentMask2 = this.currentMask) === null || _this$currentMask2 === void 0 ? void 0 : _this$currentMask2.isComplete);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"isFilled\",\n    get: function get() {\n      var _this$currentMask3;\n\n      return Boolean((_this$currentMask3 = this.currentMask) === null || _this$currentMask3 === void 0 ? void 0 : _this$currentMask3.isFilled);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var details = new ChangeDetails();\n\n      if (this.currentMask) {\n        var _this$currentMask4;\n\n        details.aggregate((_this$currentMask4 = this.currentMask).remove.apply(_this$currentMask4, arguments)) // update with dispatch\n        .aggregate(this._applyDispatch());\n      }\n\n      return details;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      var _this$currentMask5;\n\n      return Object.assign({}, _get(_getPrototypeOf(MaskedDynamic.prototype), \"state\", this), {\n        _rawInputValue: this.rawInputValue,\n        compiledMasks: this.compiledMasks.map(function (m) {\n          return m.state;\n        }),\n        currentMaskRef: this.currentMask,\n        currentMask: (_this$currentMask5 = this.currentMask) === null || _this$currentMask5 === void 0 ? void 0 : _this$currentMask5.state\n      });\n    },\n    set: function set(state) {\n      var compiledMasks = state.compiledMasks,\n          currentMaskRef = state.currentMaskRef,\n          currentMask = state.currentMask,\n          maskedState = _objectWithoutProperties(state, _excluded);\n\n      this.compiledMasks.forEach(function (m, mi) {\n        return m.state = compiledMasks[mi];\n      });\n\n      if (currentMaskRef != null) {\n        this.currentMask = currentMaskRef;\n        this.currentMask.state = currentMask;\n      }\n\n      _set(_getPrototypeOf(MaskedDynamic.prototype), \"state\", maskedState, this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var _this$currentMask6;\n\n      return this.currentMask ? (_this$currentMask6 = this.currentMask).extractInput.apply(_this$currentMask6, arguments) : '';\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractTail\",\n    value: function extractTail() {\n      var _this$currentMask7, _get2;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.currentMask ? (_this$currentMask7 = this.currentMask).extractTail.apply(_this$currentMask7, args) : (_get2 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"extractTail\", this)).call.apply(_get2, [this].concat(args));\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.currentMask) this.currentMask.doCommit();\n\n      _get(_getPrototypeOf(MaskedDynamic.prototype), \"doCommit\", this).call(this);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos() {\n      var _this$currentMask8, _get3;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return this.currentMask ? (_this$currentMask8 = this.currentMask).nearestInputPos.apply(_this$currentMask8, args) : (_get3 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"nearestInputPos\", this)).call.apply(_get3, [this].concat(args));\n    }\n  }, {\n    key: \"overwrite\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.overwrite : _get(_getPrototypeOf(MaskedDynamic.prototype), \"overwrite\", this);\n    },\n    set: function set(overwrite) {\n      console.warn('\"overwrite\" option is not available in dynamic mask, use this option in siblings');\n    }\n  }, {\n    key: \"eager\",\n    get: function get() {\n      return this.currentMask ? this.currentMask.eager : _get(_getPrototypeOf(MaskedDynamic.prototype), \"eager\", this);\n    },\n    set: function set(eager) {\n      console.warn('\"eager\" option is not available in dynamic mask, use this option in siblings');\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"maskEquals\",\n    value: function maskEquals(mask) {\n      return Array.isArray(mask) && this.compiledMasks.every(function (m, mi) {\n        var _mask$mi;\n\n        return m.maskEquals((_mask$mi = mask[mi]) === null || _mask$mi === void 0 ? void 0 : _mask$mi.mask);\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValueEquals\",\n    value: function typedValueEquals(value) {\n      var _this$currentMask9;\n\n      return Boolean((_this$currentMask9 = this.currentMask) === null || _this$currentMask9 === void 0 ? void 0 : _this$currentMask9.typedValueEquals(value));\n    }\n  }]);\n\n  return MaskedDynamic;\n}(Masked);\nMaskedDynamic.DEFAULTS = {\n  dispatch: function dispatch(appended, masked, flags) {\n    if (!masked.compiledMasks.length) return;\n    var inputValue = masked.rawInputValue; // simulate input\n\n    var inputs = masked.compiledMasks.map(function (m, index) {\n      m.reset();\n      m.append(inputValue, {\n        raw: true\n      });\n      m.append(appended, masked.currentMaskFlags(flags));\n      var weight = m.rawInputValue.length;\n      return {\n        weight: weight,\n        index: index\n      };\n    }); // pop masks with longer values first\n\n    inputs.sort(function (i1, i2) {\n      return i2.weight - i1.weight;\n    });\n    return masked.compiledMasks[inputs[0].index];\n  }\n};\nIMask.MaskedDynamic = MaskedDynamic;\n\nexport { MaskedDynamic as default };\n"]},"metadata":{},"sourceType":"module"}