{"ast":null,"code":"var _jsxFileName = \"/Users/USER/Desktop/Agent/src/Hm/Btn.js\",\n    _s = $RefreshSig$();\n\nimport './Btn.css';\nimport Media from 'react-media';\nimport { useNavigate } from 'react-router-dom';\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { auth } from '../firebase'; // Button Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ReturnButton() {\n  return /*#__PURE__*/_jsxDEV(Media, {\n    queries: {\n      small: '(max-width: 599px)',\n      medium: '(min-width: 600px) and (max-width:1199px)',\n      large: '(min-width: 1200px)'\n    },\n    children: matches => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [matches.small && /*#__PURE__*/_jsxDEV(ScreenSmall, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 29\n      }, this), matches.medium && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 30\n      }, this), matches.large && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n_c = ReturnButton;\n;\nexport const ScreenLarge = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"wrp-hmBtn-admin\",\n  children: /*#__PURE__*/_jsxDEV(ViewButton, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 31,\n  columnNumber: 3\n}, this);\n_c2 = ScreenLarge;\nexport const ScreenSmall = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"wrp-hmBtn-admin-sm\",\n  children: /*#__PURE__*/_jsxDEV(ViewButton, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 3\n}, this);\n_c3 = ScreenSmall;\nexport const ViewButton = () => {\n  _s();\n\n  const navigation = useNavigate();\n\n  const handlepath = event => {\n    event.preventDefault();\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider).then(result => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken; // The signed-in user info.\n\n      const user = result.user;\n      !!user && navigation('dash');\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message; // The email of the user's account used.\n\n      const email = error.customData.email; // The AuthCredential type that was used.\n\n      const credential = GoogleAuthProvider.credentialFromError(error);\n    });\n    navigation('dash');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"Btn\",\n    onClick: handlepath,\n    children: \"Connexion\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewButton, \"7sZc5EvTsFMSo4mPTlyGC/0+rew=\", false, function () {\n  return [useNavigate];\n});\n\n_c4 = ViewButton;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ReturnButton\");\n$RefreshReg$(_c2, \"ScreenLarge\");\n$RefreshReg$(_c3, \"ScreenSmall\");\n$RefreshReg$(_c4, \"ViewButton\");","map":{"version":3,"sources":["/Users/USER/Desktop/Agent/src/Hm/Btn.js"],"names":["Media","useNavigate","signInWithPopup","GoogleAuthProvider","auth","ReturnButton","small","medium","large","matches","ScreenLarge","ScreenSmall","ViewButton","navigation","handlepath","event","preventDefault","provider","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError"],"mappings":";;;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,eAApD;AACA,SAASC,IAAT,QAAqB,aAArB,C,CAGA;;;;AACA,eAAe,SAASC,YAAT,GAAwB;AACrC,sBACE,QAAC,KAAD;AACE,IAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,oBADA;AAEPC,MAAAA,MAAM,EAAE,2CAFD;AAGPC,MAAAA,KAAK,EAAE;AAHA,KADX;AAAA,cAMGC,OAAO,iBACN;AAAA,iBACGA,OAAO,CAACH,KAAR,iBAAiB,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cADpB,EAEGG,OAAO,CAACF,MAAR,iBAAkB,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAFrB,EAGGE,OAAO,CAACD,KAAR,iBAAiB,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAHpB;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;KAjBuBH,Y;AAiBvB;AAGD,OAAO,MAAMK,WAAW,GAAG,mBACzB;AAAK,EAAA,SAAS,EAAC,iBAAf;AAAA,yBACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADK;MAAMA,W;AAKb,OAAO,MAAMC,WAAW,GAAG,mBACzB;AAAK,EAAA,SAAS,EAAC,oBAAf;AAAA,yBACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADK;MAAMA,W;AAKb,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAE9B,QAAMC,UAAU,GAAGZ,WAAW,EAA9B;;AACA,QAAMa,UAAU,GAAIC,KAAD,IAAW;AAE5BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,QAAQ,GAAG,IAAId,kBAAJ,EAAjB;AAEAD,IAAAA,eAAe,CAACE,IAAD,EAAOa,QAAP,CAAf,CACGC,IADH,CACSC,MAAD,IAAY;AAChB;AACA,YAAMC,UAAU,GAAGjB,kBAAkB,CAACkB,oBAAnB,CAAwCF,MAAxC,CAAnB;AACA,YAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHgB,CAIhB;;AACA,YAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB;AACA,OAAC,CAACA,IAAF,IAAUX,UAAU,CAAC,MAAD,CAApB;AAED,KATH,EASKY,KATL,CASYC,KAAD,IAAW;AAClB;AACA,YAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,YAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHkB,CAIlB;;AACA,YAAMC,KAAK,GAAGL,KAAK,CAACM,UAAN,CAAiBD,KAA/B,CALkB,CAMlB;;AACA,YAAMX,UAAU,GAAGjB,kBAAkB,CAAC8B,mBAAnB,CAAuCP,KAAvC,CAAnB;AACD,KAjBH;AAmBAb,IAAAA,UAAU,CAAC,MAAD,CAAV;AACD,GAzBD;;AA2BA,sBACE;AAAQ,IAAA,SAAS,EAAC,KAAlB;AAAwB,IAAA,OAAO,EAAEC,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAjCM;;GAAMF,U;UAEQX,W;;;MAFRW,U","sourcesContent":["\nimport './Btn.css';\nimport Media from 'react-media';\nimport { useNavigate } from 'react-router-dom';\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { auth } from '../firebase';\n\n\n// Button Component\nexport default function ReturnButton() {\n  return (\n    <Media\n      queries={{\n        small: '(max-width: 599px)',\n        medium: '(min-width: 600px) and (max-width:1199px)',\n        large: '(min-width: 1200px)',\n      }}>\n      {matches => (\n        <>\n          {matches.small && <ScreenSmall />}\n          {matches.medium && <ScreenLarge />}\n          {matches.large && <ScreenLarge />}\n        </>\n      )}\n    </Media>\n  );\n};\n\n\nexport const ScreenLarge = () => (\n  <div className='wrp-hmBtn-admin'>\n    <ViewButton />\n  </div>\n);\nexport const ScreenSmall = () => (\n  <div className='wrp-hmBtn-admin-sm'>\n    <ViewButton />\n  </div>\n)\nexport const ViewButton = () => {\n\n  const navigation = useNavigate();\n  const handlepath = (event) => {\n\n    event.preventDefault();\n    const provider = new GoogleAuthProvider();\n\n    signInWithPopup(auth, provider)\n      .then((result) => {\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const token = credential.accessToken;\n        // The signed-in user info.\n        const user = result.user;\n        !!user && navigation('dash');\n\n      }).catch((error) => {\n        // Handle Errors here.\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        // The email of the user's account used.\n        const email = error.customData.email;\n        // The AuthCredential type that was used.\n        const credential = GoogleAuthProvider.credentialFromError(error);\n      });\n\n    navigation('dash');\n  };\n\n  return (\n    <button className='Btn' onClick={handlepath}>Connexion</button>\n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}