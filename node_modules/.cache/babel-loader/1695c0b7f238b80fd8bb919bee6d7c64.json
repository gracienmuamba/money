{"ast":null,"code":"var _jsxFileName = \"/Users/USER/Desktop/Agent/src/Send/FC/Input.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './Input.css';\nimport { useForm } from 'react-hook-form';\nimport Media from 'react-media';\nimport { useNavigate } from 'react-router-dom';\nimport { phoneX } from '../Phone/Input';\nimport { doc, getDoc, updateDoc, serverTimestamp, increment } from \"firebase/firestore\";\nimport moment from 'moment';\nimport { db } from '../../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let prixSuccess = 0; // withdraw input\n\nexport default function ReturnWithdrAwInput() {\n  return /*#__PURE__*/_jsxDEV(Media, {\n    queries: {\n      small: '(max-width: 599px)',\n      medium: '(min-width: 600px) and (max-width:1199px)',\n      large: '(min-width: 1200px)'\n    },\n    children: matches => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [matches.small && /*#__PURE__*/_jsxDEV(ScreenSmall, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 24\n      }, this), matches.medium && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }, this), matches.large && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this);\n}\n_c = ReturnWithdrAwInput;\n;\nexport const ScreenLarge = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"wrp-withdraw-input\",\n  children: /*#__PURE__*/_jsxDEV(FormInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 2\n}, this);\n_c2 = ScreenLarge;\nexport const ScreenSmall = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"wrp-withdraw-input-sm\",\n  children: /*#__PURE__*/_jsxDEV(FormInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 41,\n  columnNumber: 2\n}, this);\n_c3 = ScreenSmall;\nexport const FormInput = () => {\n  _s();\n\n  const navigation = useNavigate();\n  const {\n    handleSubmit,\n    register,\n    reset\n  } = useForm();\n  const [getPin, setGetPin] = React.useState('');\n  const [first, setFirst] = React.useState('');\n  const [last, setLast] = React.useState('');\n  const [solde, setSolde] = React.useState(null);\n  React.useEffect(async () => {\n    const docRefPin = doc(db, \"muunganomoney\", \"money\");\n    const docSnap = await getDoc(docRefPin);\n\n    if (docSnap.exists()) {\n      setGetPin(docSnap.data().code);\n      setSolde(docSnap.data().cdf);\n    }\n\n    ;\n    const docagentRef = doc(db, \"agent\", phoneX);\n    const docagentSnap = await getDoc(docagentRef);\n\n    if (docagentSnap.exists()) {\n      setFirst(docagentSnap.data().firstname);\n      setLast(docagentSnap.data().lastname);\n    }\n\n    ;\n  }, []);\n\n  const onSubmit = async data => {\n    if (getPin == data.code && data.code.length == 6) {\n      if (data.count > 200000 || data.count <= 0 || solde < 2000 || data.count > solde) {\n        window.alert(`La valeur est superieur à 200000 ou solde invalid`);\n        reset();\n      } else {\n        let User = first + ' ' + last;\n        sendAgentMoney(Math.floor(Number(data.count)), Math.floor(Number(data.count)), phoneX);\n        updateAdmin(Math.floor(Number(data.count)), Math.floor(Number(data.count)), User);\n        prixSuccess = data.count;\n        navigation('/send/success');\n      }\n    } else {\n      prixSuccess = data.count;\n      window.alert(`Erreur de code d'accès invalide`);\n      reset();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: 'text',\n      ...register('count', {\n        required: true\n      }),\n      name: \"count\",\n      placeholder: 'CDF'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: 'text',\n      ...register('code', {\n        required: true\n      }),\n      name: \"code\",\n      placeholder: '••••••'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Btn\",\n      children: \"Envoyer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 3\n  }, this);\n};\n\n_s(FormInput, \"FwNNIZM+b2h4FmtA12T6KaoloYs=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c4 = FormInput;\n\nasync function sendAgentMoney(solde, money, numPhone) {\n  const washingtonRef = doc(db, \"agent\", numPhone); // Set the \"capital\" field of the city 'DC'\n\n  await updateDoc(washingtonRef, {\n    cdf: increment(solde),\n    money: money,\n    unite: 'CDF',\n    delay: moment(serverTimestamp()).format('LLL'),\n    user: 'muunganomoney'\n  });\n}\n\n;\n\nasync function updateAdmin(solde, money, User) {\n  const washingtonRef = doc(db, \"muunganomoney\", \"money\"); // Set the \"capital\" field of the city 'DC'\n\n  await updateDoc(washingtonRef, {\n    cdf: increment(-solde),\n    money: money,\n    buycdf: increment(solde),\n    unite: 'CDF',\n    user: User,\n    delay: serverTimestamp()\n  });\n}\n\n;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ReturnWithdrAwInput\");\n$RefreshReg$(_c2, \"ScreenLarge\");\n$RefreshReg$(_c3, \"ScreenSmall\");\n$RefreshReg$(_c4, \"FormInput\");","map":{"version":3,"sources":["/Users/USER/Desktop/Agent/src/Send/FC/Input.js"],"names":["React","useForm","Media","useNavigate","phoneX","doc","getDoc","updateDoc","serverTimestamp","increment","moment","db","prixSuccess","ReturnWithdrAwInput","small","medium","large","matches","ScreenLarge","ScreenSmall","FormInput","navigation","handleSubmit","register","reset","getPin","setGetPin","useState","first","setFirst","last","setLast","solde","setSolde","useEffect","docRefPin","docSnap","exists","data","code","cdf","docagentRef","docagentSnap","firstname","lastname","onSubmit","length","count","window","alert","User","sendAgentMoney","Math","floor","Number","updateAdmin","required","money","numPhone","washingtonRef","unite","delay","format","user","buycdf"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport './Input.css';\nimport { useForm } from 'react-hook-form';\nimport Media from 'react-media';\nimport { useNavigate } from 'react-router-dom';\nimport { phoneX } from '../Phone/Input';\nimport { doc, getDoc, updateDoc, serverTimestamp, increment } from \"firebase/firestore\";\nimport moment from 'moment';\n\nimport { db } from '../../firebase';\n\nexport let prixSuccess = 0;\n\n// withdraw input\nexport default function ReturnWithdrAwInput() {\n return (\n  <Media\n   queries={{\n    small: '(max-width: 599px)',\n    medium: '(min-width: 600px) and (max-width:1199px)',\n    large: '(min-width: 1200px)',\n   }}>\n   {matches => (\n    <>\n     {matches.small && <ScreenSmall />}\n     {matches.medium && <ScreenLarge />}\n     {matches.large && <ScreenLarge />}\n    </>\n   )}\n  </Media>\n );\n};\n\nexport const ScreenLarge = () => (\n <div className='wrp-withdraw-input'>\n  <FormInput />\n </div>\n);\nexport const ScreenSmall = () => (\n <div className='wrp-withdraw-input-sm'>\n  <FormInput />\n </div>\n);\nexport const FormInput = () => {\n\n const navigation = useNavigate();\n const { handleSubmit, register, reset } = useForm();\n const [getPin, setGetPin] = React.useState('');\n const [first, setFirst] = React.useState('');\n const [last, setLast] = React.useState('');\n const [solde, setSolde] = React.useState(null);\n\n React.useEffect(async () => {\n\n  const docRefPin = doc(db, \"muunganomoney\", \"money\");\n  const docSnap = await getDoc(docRefPin);\n\n  if (docSnap.exists()) {\n   setGetPin(docSnap.data().code);\n   setSolde(docSnap.data().cdf);\n  };\n\n  const docagentRef = doc(db, \"agent\", phoneX);\n  const docagentSnap = await getDoc(docagentRef);\n\n  if (docagentSnap.exists()) {\n   setFirst(docagentSnap.data().firstname);\n   setLast(docagentSnap.data().lastname);\n  };\n\n }, []);\n\n const onSubmit = async (data) => {\n\n  if (getPin == data.code && data.code.length == 6) {\n\n   if (data.count > 200000 || data.count <= 0 || solde < 2000 || data.count > solde) {\n    window.alert(`La valeur est superieur à 200000 ou solde invalid`);\n    reset();\n\n   } else {\n\n    let User = first + ' ' + last;\n    sendAgentMoney(Math.floor(Number(data.count)), Math.floor(Number(data.count)), phoneX)\n    updateAdmin(Math.floor(Number(data.count)), Math.floor(Number(data.count)), User);\n\n    prixSuccess = data.count;\n    navigation('/send/success');\n   }\n\n  } else {\n   prixSuccess = data.count;\n   window.alert(`Erreur de code d'accès invalide`)\n   reset();\n  }\n\n };\n\n return (\n  <form onSubmit={handleSubmit(onSubmit)}>\n\n   <input type={'text'}\n    {...register('count', { required: true })}\n    name=\"count\"\n    placeholder={'CDF'}\n   />\n   <input type={'text'}\n    {...register('code', { required: true })}\n    name=\"code\"\n    placeholder={'••••••'}\n   />\n\n   <button className='Btn'>Envoyer</button>\n  </form>\n );\n};\n\nasync function sendAgentMoney(solde, money, numPhone) {\n\n const washingtonRef = doc(db, \"agent\", numPhone);\n // Set the \"capital\" field of the city 'DC'\n await updateDoc(washingtonRef, {\n  cdf: increment(solde),\n  money: money,\n  unite: 'CDF',\n  delay: moment(serverTimestamp()).format('LLL'),\n  user: 'muunganomoney',\n });\n\n};\nasync function updateAdmin(solde, money, User) {\n\n const washingtonRef = doc(db, \"muunganomoney\", \"money\");\n // Set the \"capital\" field of the city 'DC'\n await updateDoc(washingtonRef, {\n  cdf: increment(-(solde)),\n  money: money,\n  buycdf: increment(solde),\n  unite: 'CDF',\n  user: User,\n  delay: serverTimestamp()\n });\n\n};"]},"metadata":{},"sourceType":"module"}