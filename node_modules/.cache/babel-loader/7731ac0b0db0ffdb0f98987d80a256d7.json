{"ast":null,"code":"import _regeneratorRuntime from\"/Users/USER/Desktop/Agent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/USER/Desktop/Agent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/USER/Desktop/Agent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import'./Char.css';import{doc,onSnapshot,collection,getDocs,getDoc}from\"firebase/firestore\";import{db}from'../../firebase';import{jsx as _jsx}from\"react/jsx-runtime\";var pushArray=new Array();// Phone Component \nexport default function RetuRnChArs(){var _React$useState=React.useState(' '),_React$useState2=_slicedToArray(_React$useState,2),first=_React$useState2[0],setFirst=_React$useState2[1];React.useEffect(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var querySnapshot,verifier,docRef,docSnap;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getDocs(collection(db,\"client\"));case 2:querySnapshot=_context.sent;querySnapshot.forEach(function(doc){// doc.data() is never undefined for query doc snapshots\npushArray.push(doc.id);});verifier=pushArray.some(function(value){return value==JSON.parse(window.localStorage.getItem('rm #@!!/[] -'));});docRef=doc(db,verifier?\"client\":\"agent\",JSON.parse(window.localStorage.getItem('rm #@!!/[] -')));_context.next=8;return getDoc(docRef);case 8:docSnap=_context.sent;if(docSnap.exists()){setFirst(docSnap.data().firstname);}else{// doc.data() will be undefined in this case\nconsole.log(\"No such document!\");}case 10:case\"end\":return _context.stop();}}},_callee);})),[]);var user=\"\".concat(first);return/*#__PURE__*/_jsx(\"div\",{className:\"char-user-client\",children:/*#__PURE__*/_jsx(\"h1\",{children:user[0].toUpperCase()})});};","map":{"version":3,"sources":["/Users/USER/Desktop/Agent/src/Remove/Client/Char.js"],"names":["React","doc","onSnapshot","collection","getDocs","getDoc","db","pushArray","Array","RetuRnChArs","useState","first","setFirst","useEffect","querySnapshot","forEach","push","id","verifier","some","value","JSON","parse","window","localStorage","getItem","docRef","docSnap","exists","data","firstname","console","log","user","toUpperCase"],"mappings":"6aAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,YAAP,CACA,OAASC,GAAT,CAAcC,UAAd,CAA0BC,UAA1B,CAAsCC,OAAtC,CAA+CC,MAA/C,KAA6D,oBAA7D,CACA,OAASC,EAAT,KAAmB,gBAAnB,C,2CAEA,GAAIC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,KAAJ,EAAhB,CAEA;AACA,cAAe,SAASC,CAAAA,WAAT,EAAuB,qBAEXT,KAAK,CAACU,QAAN,CAAe,GAAf,CAFW,oDAE9BC,KAF8B,qBAEvBC,QAFuB,qBAIrCZ,KAAK,CAACa,SAAN,sEAAgB,mMAEaT,CAAAA,OAAO,CAACD,UAAU,CAACG,EAAD,CAAK,QAAL,CAAX,CAFpB,QAETQ,aAFS,eAGfA,aAAa,CAACC,OAAd,CAAsB,SAACd,GAAD,CAAS,CAC9B;AACAM,SAAS,CAACS,IAAV,CAAef,GAAG,CAACgB,EAAnB,EACA,CAHD,EAKMC,QARS,CAQEX,SAAS,CAACY,IAAV,CAAe,SAAAC,KAAK,QAAIA,CAAAA,KAAK,EAAIC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,CAAX,CAAb,EAApB,CARF,CAUTC,MAVS,CAUAzB,GAAG,CAACK,EAAD,CAAKY,QAAQ,CAAG,QAAH,CAAc,OAA3B,CAAoCG,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,CAAX,CAApC,CAVH,uBAWOpB,CAAAA,MAAM,CAACqB,MAAD,CAXb,QAWTC,OAXS,eAaf,GAAIA,OAAO,CAACC,MAAR,EAAJ,CAAsB,CACrBhB,QAAQ,CAACe,OAAO,CAACE,IAAR,GAAeC,SAAhB,CAAR,CACA,CAFD,IAEO,CACN;AACAC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACA,CAlBc,uDAAhB,GAqBG,EArBH,EAuBA,GAAIC,CAAAA,IAAI,WAAMtB,KAAN,CAAR,CAEA,mBACC,YAAK,SAAS,CAAC,kBAAf,uBAAkC,oBAAKsB,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,EAAL,EAAlC,EADD,CAGA","sourcesContent":["import React from 'react';\nimport './Char.css';\nimport { doc, onSnapshot, collection, getDocs, getDoc } from \"firebase/firestore\";\nimport { db } from '../../firebase';\n\nlet pushArray = new Array();\n\n// Phone Component \nexport default function RetuRnChArs() {\n\n const [first, setFirst] = React.useState(' ');\n\n React.useEffect(async () => {\n\n  const querySnapshot = await getDocs(collection(db, \"client\"));\n  querySnapshot.forEach((doc) => {\n   // doc.data() is never undefined for query doc snapshots\n   pushArray.push(doc.id);\n  });\n\n  const verifier = pushArray.some(value => value == JSON.parse(window.localStorage.getItem('rm #@!!/[] -')));\n\n  const docRef = doc(db, verifier ? \"client\" : \"agent\", JSON.parse(window.localStorage.getItem('rm #@!!/[] -')));\n  const docSnap = await getDoc(docRef);\n\n  if (docSnap.exists()) {\n   setFirst(docSnap.data().firstname);\n  } else {\n   // doc.data() will be undefined in this case\n   console.log(\"No such document!\");\n  }\n\n\n }, []);\n\n let user = `${first}`;\n\n return (\n  <div className='char-user-client'><h1>{user[0].toUpperCase()}</h1></div>\n );\n};"]},"metadata":{},"sourceType":"module"}