{"ast":null,"code":"var _jsxFileName = \"/Users/USER/Desktop/MuunganoMoney/src/Sign/Input.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport './Input.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Media from 'react-media';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport ReturnQuote from './Quote';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Switch from '@mui/material/Switch'; // Firebase Auth for phone\n\nimport { doc, collection, getDocs, getDoc } from \"firebase/firestore\";\nimport { signInWithPhoneNumber, RecaptchaVerifier } from \"firebase/auth\";\nimport { auth, db } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let phoneX = ''; // Input Field form\n\nexport default function REturnInPutConnexIon() {\n  return /*#__PURE__*/_jsxDEV(Media, {\n    queries: {\n      small: '(max-width: 599px)',\n      medium: '(min-width: 600px) and (max-width:1199px)',\n      large: '(min-width: 1200px)'\n    },\n    children: matches => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [matches.small && /*#__PURE__*/_jsxDEV(ScreenSmall, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 24\n      }, this), matches.medium && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }, this), matches.large && /*#__PURE__*/_jsxDEV(ScreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this);\n}\n_c = REturnInPutConnexIon;\n;\nexport const ScreenLarge = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"form-input-sign\",\n  children: /*#__PURE__*/_jsxDEV(FormDataInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 59,\n  columnNumber: 2\n}, this);\n_c2 = ScreenLarge;\nexport const ScreenSmall = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"form-input-sign-sm\",\n  children: /*#__PURE__*/_jsxDEV(FormDataInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 64,\n  columnNumber: 2\n}, this);\n_c3 = ScreenSmall;\nexport const FormDataInput = () => {\n  _s();\n\n  let regular = /[a-z]+/;\n  let pushClient = new Array();\n  let pushAgent = new Array();\n  const [checked, setChecked] = React.useState(true);\n  let isExistClient;\n  let isExistAgent;\n\n  const generateRecaptcha = () => {\n    window.recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {\n      'size': 'normal',\n      'callback': response => {},\n      'expired-callback': () => {}\n    }, auth);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState,\n    reset\n  } = useForm({\n    defaultValues: {\n      phone: '+243'\n    }\n  });\n  const {\n    isSubmitting\n  } = formState;\n\n  const onSubmit = async data => {\n    if (data.phone.length != 13 || regular.test(data.phone)) {\n      window.alert(`Numero télèphone est Invalid `);\n      reset();\n    } else {\n      const clientSnapshot = await getDocs(collection(db, \"client\"));\n      clientSnapshot.forEach(doc => {\n        pushClient.push(doc.id);\n      });\n      const agentSnapshot = await getDocs(collection(db, \"agent\"));\n      agentSnapshot.forEach(doc => {\n        pushAgent.push(doc.id);\n      });\n      isExistClient = pushClient.some(value => value == data.phone);\n      isExistAgent = pushAgent.some(value => value == data.phone);\n\n      if (isExistClient || isExistAgent) {\n        let phoneNumber = data.phone;\n        generateRecaptcha();\n        const appVerifier = window.recaptchaVerifier;\n        signInWithPhoneNumber(auth, phoneNumber, appVerifier).then(confirmationResult => {\n          // SMS sent. Prompt user to type the code from the message, then sign the\n          // user in with confirmationResult.confirm(code).\n          window.confirmationResult = confirmationResult;\n          phoneX = data.phone;\n          setChecked(false);\n          console.log(phoneX);\n          reset();\n        }).catch(error => {\n          // Error; SMS not sent\n          window.console.log(error);\n        });\n      } else {\n        window.alert(`Le numéro de téléphone saisi n'est pas encore enregistré auprès de MuunganoMoney`);\n        reset();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: checked ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(ReturnQuote, {\n        Text: `Envoyer, échanger ou accepter des fiat avec un numero personnel sur votre compte.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"phone\",\n        id: \"phone\",\n        placeholder: \"Phone\",\n        name: \"phone\",\n        ...register('phone', {\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"recaptcha-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Btn\",\n        children: \"Connexion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(InputCodeRecaptcha, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 3\n  }, this);\n};\n\n_s(FormDataInput, \"DMgddRYbuvLheYtgcUB9wGAJKp0=\", false, function () {\n  return [useForm];\n});\n\n_c4 = FormDataInput;\nexport const InputCodeRecaptcha = () => {\n  _s2();\n\n  const navigation = useNavigate();\n  const {\n    register,\n    handleSubmit,\n    formState\n  } = useForm();\n\n  const onSubmitOTP = async data => {\n    let confirmationResult = window.confirmationResult;\n    confirmationResult.confirm(data.code).then(result => {\n      // User signed in successfully.\n      const user = result.user;\n      window.console.log(user);\n      !!user.uid && navigation('/dash');\n    }).catch(error => {\n      // User couldn't sign in (bad verification code?)\n      window.console.log(error);\n      window.alert(`Le code expire, reconnectez-vous !`);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmitOTP),\n    children: [/*#__PURE__*/_jsxDEV(ReturnQuote, {\n      Text: 'Valider code envoyer.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Code Envoyer\",\n      name: \"code\",\n      ...register('code', {\n        required: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Btn\",\n      children: \"Connexion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(InputCodeRecaptcha, \"cCo/O1vTj+KgygZa8GOxYPSfit8=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c5 = InputCodeRecaptcha;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"REturnInPutConnexIon\");\n$RefreshReg$(_c2, \"ScreenLarge\");\n$RefreshReg$(_c3, \"ScreenSmall\");\n$RefreshReg$(_c4, \"FormDataInput\");\n$RefreshReg$(_c5, \"InputCodeRecaptcha\");","map":{"version":3,"sources":["/Users/USER/Desktop/MuunganoMoney/src/Sign/Input.js"],"names":["React","Media","useForm","useNavigate","ReturnQuote","Box","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControl","FormControlLabel","InputLabel","MenuItem","Select","Switch","doc","collection","getDocs","getDoc","signInWithPhoneNumber","RecaptchaVerifier","auth","db","phoneX","REturnInPutConnexIon","small","medium","large","matches","ScreenLarge","ScreenSmall","FormDataInput","regular","pushClient","Array","pushAgent","checked","setChecked","useState","isExistClient","isExistAgent","generateRecaptcha","window","recaptchaVerifier","response","register","handleSubmit","formState","reset","defaultValues","phone","isSubmitting","onSubmit","data","length","test","alert","clientSnapshot","forEach","push","id","agentSnapshot","some","value","phoneNumber","appVerifier","then","confirmationResult","console","log","catch","error","required","InputCodeRecaptcha","navigation","onSubmitOTP","confirm","code","result","user","uid"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Input.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Media from 'react-media';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport ReturnQuote from './Quote';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Switch from '@mui/material/Switch';\n\n\n\n\n\n\n// Firebase Auth for phone\nimport { doc, collection, getDocs, getDoc } from \"firebase/firestore\";\nimport { signInWithPhoneNumber, RecaptchaVerifier } from \"firebase/auth\";\nimport { auth, db } from '../firebase';\n\n\n\n\n\nexport let phoneX = '';\n\n// Input Field form\nexport default function REturnInPutConnexIon() {\n return (\n  <Media\n   queries={{\n    small: '(max-width: 599px)',\n    medium: '(min-width: 600px) and (max-width:1199px)',\n    large: '(min-width: 1200px)',\n   }}>\n   {matches => (\n    <>\n     {matches.small && <ScreenSmall />}\n     {matches.medium && <ScreenLarge />}\n     {matches.large && <ScreenLarge />}\n    </>\n   )}\n  </Media>\n );\n};\n\nexport const ScreenLarge = () => (\n <div className='form-input-sign'>\n  <FormDataInput />\n </div>\n);\nexport const ScreenSmall = () => (\n <div className='form-input-sign-sm'>\n  <FormDataInput />\n </div>\n);\n\n\nexport const FormDataInput = () => {\n\n let regular = /[a-z]+/;\n let pushClient = new Array();\n let pushAgent = new Array();\n\n const [checked, setChecked] = React.useState(true);\n\n let isExistClient;\n let isExistAgent;\n\n const generateRecaptcha = () => {\n  window.recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {\n   'size': 'normal',\n   'callback': (response) => {\n   },\n   'expired-callback': () => {\n   }\n  }, auth);\n }\n\n const { register, handleSubmit, formState, reset } = useForm({\n  defaultValues: { phone: '+243' },\n });\n const { isSubmitting } = formState;\n\n const onSubmit = async (data) => {\n\n  if (data.phone.length != 13 || regular.test(data.phone)) {\n   window.alert(`Numero télèphone est Invalid `);\n   reset();\n\n  } else {\n\n   const clientSnapshot = await getDocs(collection(db, \"client\"));\n   clientSnapshot.forEach((doc) => {\n    pushClient.push(doc.id);\n   });\n\n   const agentSnapshot = await getDocs(collection(db, \"agent\"));\n   agentSnapshot.forEach((doc) => {\n    pushAgent.push(doc.id);\n   });\n\n   isExistClient = pushClient.some(value => value == data.phone);\n   isExistAgent = pushAgent.some(value => value == data.phone);\n\n   if (isExistClient || isExistAgent) {\n\n    let phoneNumber = data.phone;\n    generateRecaptcha();\n    const appVerifier = window.recaptchaVerifier;\n\n    signInWithPhoneNumber(auth, phoneNumber, appVerifier)\n     .then((confirmationResult) => {\n      // SMS sent. Prompt user to type the code from the message, then sign the\n      // user in with confirmationResult.confirm(code).\n      window.confirmationResult = confirmationResult;\n\n      phoneX = data.phone;\n      setChecked(false);\n      console.log(phoneX);\n      reset();\n\n     }).catch((error) => {\n      // Error; SMS not sent\n      window.console.log(error);\n     });\n\n   } else {\n\n    window.alert(`Le numéro de téléphone saisi n'est pas encore enregistré auprès de MuunganoMoney`);\n    reset();\n   }\n\n  }\n };\n\n return (\n  <div>\n   {checked\n    ?\n\n    <form onSubmit={handleSubmit(onSubmit)}>\n     <ReturnQuote\n      Text={`Envoyer, échanger ou accepter des fiat avec un numero personnel sur votre compte.`}\n     />\n     <input type='phone' id='phone' placeholder='Phone' name='phone' {...register('phone', { required: true })} />\n\n     <div id='recaptcha-container'></div>\n     <button className='Btn'>Connexion</button>\n    </form>\n    :\n    <InputCodeRecaptcha />\n   }\n\n  </div>\n );\n};\n\nexport const InputCodeRecaptcha = () => {\n\n const navigation = useNavigate();\n const { register, handleSubmit, formState } = useForm();\n\n const onSubmitOTP = async (data) => {\n\n  let confirmationResult = window.confirmationResult;\n  confirmationResult.confirm(data.code).then((result) => {\n   // User signed in successfully.\n   const user = result.user;\n   window.console.log(user);\n   !!user.uid && navigation('/dash');\n  }).catch((error) => {\n   // User couldn't sign in (bad verification code?)\n   window.console.log(error);\n   window.alert(`Le code expire, reconnectez-vous !`);\n  });\n\n }\n\n return (\n  <form onSubmit={handleSubmit(onSubmitOTP)}>\n   <ReturnQuote Text={'Valider code envoyer.'} />\n   <input type='text' placeholder='Code Envoyer' name='code' {...register('code', { required: true })} />\n   <button className='Btn'>Connexion</button>\n  </form>\n )\n}\n\n"]},"metadata":{},"sourceType":"module"}