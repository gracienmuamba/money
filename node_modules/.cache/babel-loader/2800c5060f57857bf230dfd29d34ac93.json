{"ast":null,"code":"var _jsxFileName = \"/Users/USER/Desktop/MuunganoMoney/src/Pin/Fc/Simple/Input.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './Input.css';\nimport Media from 'react-media';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { doc, getDocs, collection, getDoc, updateDoc, increment, onSnapshot, arrayUnion } from \"firebase/firestore\";\nimport { db } from '../../../firebase';\nimport { phoneX } from '../../../Sign/Input';\nimport { sendPhone } from '../../../ValidExFran/Input';\nimport { frais, Unite, solde, money } from '../../../FC/Input';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let nowField = moment().date();\nexport let now = moment().date();\nexport let prixHash = 0;\nexport let hashTrue = true; // Input Field Component \n\nexport default function ReturnInput() {\n  return /*#__PURE__*/_jsxDEV(Media, {\n    queries: {\n      small: '(max-width: 599px)',\n      medium: '(min-width: 600px) and (max-width:1199px)',\n      large: '(min-width: 1200px)'\n    },\n    children: matches => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [matches.small && /*#__PURE__*/_jsxDEV(ScreenSmall, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 24\n      }, this), matches.medium && /*#__PURE__*/_jsxDEV(SreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this), matches.large && /*#__PURE__*/_jsxDEV(SreenLarge, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }, this);\n}\n_c = ReturnInput;\n;\nexport const SreenLarge = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"wrp-input-send-money\",\n  children: /*#__PURE__*/_jsxDEV(FormInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 48,\n  columnNumber: 2\n}, this);\n_c2 = SreenLarge;\nexport const ScreenSmall = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"wrp-input-send-money-sm\",\n  children: /*#__PURE__*/_jsxDEV(FormInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 54,\n  columnNumber: 2\n}, this);\n_c3 = ScreenSmall;\nexport const FormInput = () => {\n  _s();\n\n  let pushDocs = new Array();\n  let verifierSend;\n  let verifierGet;\n  const navigation = useNavigate();\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm(); //  order notebook\n\n  const [tableClient, setTableClient] = React.useState();\n  const [tableAgent, setTableAgent] = React.useState();\n  const [tableUpgrade, setTableUpgrade] = React.useState();\n  const [tableAdmin, setTableAdmin] = React.useState();\n  const [tableFrais, setTableFrais] = React.useState(); // send React useState  \n\n  const [pin, setPin] = React.useState(null);\n  const [state, setState] = React.useState(null);\n  const [first, setFirst] = React.useState('');\n  const [last, setLast] = React.useState(''); // getting React useState\n\n  const [getstate, setGetstate] = React.useState(null);\n  const [getfirst, setGetFirst] = React.useState('');\n  const [getlast, setGetLast] = React.useState('');\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth, setFullWidth] = React.useState(true);\n  const [maxWidth, setMaxWidth] = React.useState('sm');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  React.useEffect(async () => {\n    const querySnapshot = await getDocs(collection(db, \"client\"));\n    querySnapshot.forEach(doc => {\n      pushDocs.push(doc.id);\n    });\n    verifierSend = pushDocs.some(value => value == phoneX);\n    verifierGet = pushDocs.some(value => value == sendPhone);\n    const sendRef = doc(db, verifierSend ? \"client\" : \"agent\", phoneX);\n    const sendSnap = await getDoc(sendRef);\n\n    if (sendSnap.exists()) {\n      setPin(sendSnap.data().code);\n      setState(sendSnap.data().state);\n      setFirst(sendSnap.data().firstname);\n      setLast(sendSnap.data().lastname);\n    }\n\n    ;\n    const getRef = doc(db, verifierGet ? \"client\" : \"agent\", sendPhone);\n    const getSnap = await getDoc(getRef);\n\n    if (getSnap.exists()) {\n      setGetstate(getSnap.data().state);\n      setGetFirst(getSnap.data().firstname);\n      setGetLast(getSnap.data().lastname);\n    }\n\n    ;\n\n    try {\n      await onSnapshot(doc(db, \"clients\", \"emoney\"), doc => {\n        setTableClient(doc.data().cdf);\n      });\n      await onSnapshot(doc(db, \"agents\", \"emoney\"), doc => {\n        setTableAgent(doc.data().cdf);\n      });\n      await onSnapshot(doc(db, \"muungano\", \"commission\"), doc => {\n        setTableAdmin(doc.data().cdf);\n      });\n      await onSnapshot(doc(db, \"agents\", \"commission\"), doc => {\n        setTableFrais(doc.data().cdf);\n      });\n      await onSnapshot(doc(db, \"muungano\", \"upgrade\"), doc => {\n        setTableUpgrade(doc.data().cdf);\n      });\n    } catch {\n      window.console.log('Erreur disponible');\n    }\n  }, []);\n\n  const onSubmit = async data => {\n    // Checked if value code is length valid\n    if (data.code.length != 6 || pin != data.code) {\n      setOpen(true);\n      reset();\n    } else {\n      const sendUser = first.toLowerCase() + ' ' + last.toLowerCase();\n      const getUser = getfirst.toLowerCase() + ' ' + getlast.toLowerCase();\n\n      if (state == \"agent\" && getstate == \"agent\") {\n        hashTrue = false;\n        prixHash = solde;\n        let soldeAgent = Number(tableAgent[nowField]) + solde;\n        let soldeUpgrade = Number(tableUpgrade[nowField]) + solde;\n        let arrayAgent = tableAgent;\n        let arrayUpgrade = tableUpgrade;\n\n        for (let i = now; i <= 31; i++) {\n          arrayAgent[i] = soldeAgent;\n          arrayUpgrade[i] = soldeUpgrade;\n        }\n\n        ;\n        swapInWithDocsAgent(phoneX, sendPhone, sendUser, getUser, solde, Unite, arrayAgent, arrayUpgrade);\n        navigation('/send-success');\n      } else if (state == \"client\" && getstate == \"client\") {\n        hashTrue = true;\n        prixHash = money;\n        let soldeClient = Number(tableClient[nowField]) + Math.floor(Number(money));\n        let soldeUpgrade = Number(tableUpgrade[nowField]) + Math.floor(Number(money));\n        let soldeAdmin = Number(tableAdmin[nowField]) + Math.floor(Number(frais));\n        let arrayClient = tableClient;\n        let arrayUpgrade = tableUpgrade;\n        let arrayAdmin = tableAdmin;\n\n        for (let i = now; i <= 31; i++) {\n          arrayClient[i] = soldeClient;\n          arrayUpgrade[i] = soldeUpgrade;\n          arrayAdmin[i] = soldeAdmin;\n        }\n\n        isSwapInWithClientToClient(phoneX, sendPhone, sendUser, getUser, solde, money, Unite, arrayClient, arrayUpgrade, arrayAdmin);\n        navigation('/send-success');\n      } else {\n        if (state == \"agent\") {\n          hashTrue = false;\n          prixHash = solde;\n          let soldeAgent = Number(tableAgent[nowField]) + solde;\n          let soldeUpgrade = Number(tableUpgrade[nowField]) + solde;\n          let arrayAgent = tableAgent;\n          let arrayUpgrade = tableUpgrade;\n\n          for (let i = now; i <= 31; i++) {\n            arrayAgent[i] = soldeAgent;\n            arrayUpgrade[i] = soldeUpgrade;\n          }\n\n          swapInWithDocsAgentToClient(phoneX, sendPhone, sendUser, getUser, solde, Unite, arrayAgent, arrayUpgrade);\n          navigation('/send-success');\n        } else {\n          hashTrue = true;\n          prixHash = money;\n          let soldeClient = Number(tableClient[nowField]) + Math.floor(Number(money));\n          let soldeUpgrade = Number(tableUpgrade[nowField]) + Math.floor(Number(money));\n          let soldeAdmin = Number(tableAdmin[nowField]) + Math.floor(Number(frais) * 70 / 100);\n          let soldeFrais = Number(tableFrais[nowField]) + Math.floor(Number(frais) * 30 / 100);\n          let arrayClient = tableClient;\n          let arrayUpgrade = tableUpgrade;\n          let arrayFrais = tableFrais;\n          let arrayAdmin = tableAdmin;\n\n          for (let i = now; i <= 31; i++) {\n            arrayClient[i] = soldeClient;\n            arrayUpgrade[i] = soldeUpgrade;\n            arrayAdmin[i] = soldeAdmin;\n            arrayFrais[i] = soldeFrais;\n          }\n\n          isSwapInWithClientToAgent(phoneX, sendPhone, sendUser, getUser, solde, money, Unite, arrayClient, arrayUpgrade, arrayFrais, arrayAdmin);\n          navigation('/send-success');\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n      name: \"code\",\n      ...register('code', {\n        required: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      fullWidth: fullWidth,\n      maxWidth: maxWidth,\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"MuunganoMoney\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Code d'acc\\xE8s refus\\xE9. Veuillez v\\xE9rifier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Fermer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Btn\",\n      children: \"Valider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 3\n  }, this);\n};\n\n_s(FormInput, \"NG8ZN5YOThoCn5q5Vku96vOX2+E=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c4 = FormInput;\n\nasync function swapInWithDocsAgent(sendPhone, getPhone, sendUser, getUser, prix, unite, arrayAgentMoney, upgrade) {\n  let time = moment().format('LLL');\n  let send = {\n    date: time,\n    solde: `${prix} ${unite}`,\n    phone: getPhone,\n    user: getUser,\n    type: 'envoyer'\n  };\n  let get = {\n    date: time,\n    solde: `${prix} ${unite}`,\n    phone: sendPhone,\n    user: sendUser,\n    type: 'réussi'\n  };\n  const sendRef = doc(db, \"agent\", sendPhone);\n  await updateDoc(sendRef, {\n    cdf: increment(-prix),\n    money: prix,\n    user: getUser,\n    unite: unite,\n    phoneclient: getPhone,\n    delay: moment().format(),\n    swap: arrayUnion(send)\n  });\n  const getRef = doc(db, \"agent\", getPhone);\n  await updateDoc(getRef, {\n    cdf: increment(prix),\n    money: prix,\n    user: sendUser,\n    unite: unite,\n    phoneclient: sendPhone,\n    delay: moment().format(),\n    swap: arrayUnion(get)\n  });\n  const agentsemoneyRef = doc(db, \"agents\", \"emoney\");\n  await updateDoc(agentsemoneyRef, {\n    cdf: arrayAgentMoney\n  });\n  const upgradeRef = doc(db, \"muungano\", \"upgrade\");\n  await updateDoc(upgradeRef, {\n    cdf: upgrade\n  });\n}\n\n;\n\nasync function swapInWithDocsAgentToClient(sendPhone, getPhone, sendUser, getUser, prix, unite, arrayAgentMoney, upgrade) {\n  let time = moment().format('LLL');\n  let send = {\n    date: time,\n    solde: `${prix} ${unite}`,\n    phone: getPhone,\n    user: getUser,\n    type: 'envoyer'\n  };\n  let get = {\n    date: time,\n    solde: `${prix} ${unite}`,\n    phone: sendPhone,\n    user: sendUser,\n    type: 'réussi'\n  };\n  const sendRef = doc(db, \"agent\", sendPhone);\n  await updateDoc(sendRef, {\n    cdf: increment(-prix),\n    money: prix,\n    user: getUser,\n    unite: unite,\n    phoneclient: getPhone,\n    delay: moment().format(),\n    swap: arrayUnion(send)\n  });\n  const getRef = doc(db, \"client\", getPhone);\n  await updateDoc(getRef, {\n    cdf: increment(prix),\n    money: prix,\n    user: sendUser,\n    unite: unite,\n    phoneclient: sendPhone,\n    delay: moment().format(),\n    swap: arrayUnion(get)\n  });\n  const agentsemoneyRef = doc(db, \"agents\", \"emoney\");\n  await updateDoc(agentsemoneyRef, {\n    cdf: arrayAgentMoney\n  });\n  const upgradeRef = doc(db, \"muungano\", \"upgrade\");\n  await updateDoc(upgradeRef, {\n    cdf: upgrade\n  });\n}\n\n;\n\nasync function isSwapInWithClientToAgent(sendPhone, getPhone, sendUser, getUser, prix, money, unite, arrayAgentMoney, upgrade, agentFrais, adminFrais) {\n  let time = moment().format('LLL');\n  let send = {\n    date: time,\n    solde: `${money} ${unite}`,\n    phone: getPhone,\n    user: getUser,\n    type: 'envoyer'\n  };\n  let get = {\n    date: time,\n    solde: `${money} ${unite}`,\n    phone: sendPhone,\n    user: sendUser,\n    type: 'réussi'\n  };\n  var thrift = Math.floor(Number(frais * 30 / 100));\n  var thriftadmin = Math.floor(Number(frais * 70 / 100));\n  const sendRef = doc(db, \"client\", sendPhone);\n  await updateDoc(sendRef, {\n    cdf: increment(-prix),\n    money: money,\n    user: getUser,\n    unite: unite,\n    phoneclient: getPhone,\n    delay: moment().format(),\n    swap: arrayUnion(send)\n  });\n  const getRef = doc(db, \"agent\", getPhone);\n  await updateDoc(getRef, {\n    cdf: increment(money),\n    money: money,\n    user: sendUser,\n    unite: unite,\n    thriftcdf: increment(thrift),\n    phoneclient: sendPhone,\n    delay: moment().format(),\n    swap: arrayUnion(get)\n  });\n  const adminRef = doc(db, \"muunganomoney\", \"money\");\n  await updateDoc(adminRef, {\n    spredcdf: increment(thriftadmin)\n  });\n  const agentsemoneyRef = doc(db, \"clients\", \"emoney\");\n  await updateDoc(agentsemoneyRef, {\n    cdf: arrayAgentMoney\n  });\n  const upgradeRef = doc(db, \"muungano\", \"upgrade\");\n  await updateDoc(upgradeRef, {\n    cdf: upgrade\n  });\n  const agentFraisRef = doc(db, \"agents\", \"commission\");\n  await updateDoc(agentFraisRef, {\n    cdf: agentFrais\n  });\n  const fraisRef = doc(db, \"muungano\", \"commission\");\n  await updateDoc(fraisRef, {\n    cdf: adminFrais\n  });\n}\n\n;\n\nasync function isSwapInWithClientToClient(sendPhone, getPhone, sendUser, getUser, prix, money, unite, arrayAgentMoney, upgrade, adminFrais) {\n  let time = moment().format('LLL');\n  let send = {\n    date: time,\n    solde: `${money} ${unite}`,\n    phone: getPhone,\n    user: getUser,\n    type: 'envoyer'\n  };\n  let get = {\n    date: time,\n    solde: `${money} ${unite}`,\n    phone: sendPhone,\n    user: sendUser,\n    type: 'réussi'\n  };\n  const sendRef = doc(db, \"client\", sendPhone);\n  await updateDoc(sendRef, {\n    cdf: increment(-prix),\n    money: money,\n    user: getUser,\n    unite: unite,\n    phoneclient: getPhone,\n    delay: moment().format(),\n    swap: arrayUnion(send)\n  });\n  const getRef = doc(db, \"client\", getPhone);\n  await updateDoc(getRef, {\n    cdf: increment(money),\n    money: money,\n    user: sendUser,\n    unite: unite,\n    phoneclient: sendPhone,\n    delay: moment().format(),\n    swap: arrayUnion(get)\n  });\n  const adminRef = doc(db, \"muunganomoney\", \"money\");\n  await updateDoc(adminRef, {\n    spredcdf: increment(Math.floor(Number(frais)))\n  });\n  const agentsemoneyRef = doc(db, \"clients\", \"emoney\");\n  await updateDoc(agentsemoneyRef, {\n    cdf: arrayAgentMoney\n  });\n  const upgradeRef = doc(db, \"muungano\", \"upgrade\");\n  await updateDoc(upgradeRef, {\n    cdf: upgrade\n  });\n  const fraisRef = doc(db, \"muungano\", \"commission\");\n  await updateDoc(fraisRef, {\n    cdf: adminFrais\n  });\n}\n\n;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ReturnInput\");\n$RefreshReg$(_c2, \"SreenLarge\");\n$RefreshReg$(_c3, \"ScreenSmall\");\n$RefreshReg$(_c4, \"FormInput\");","map":{"version":3,"sources":["/Users/USER/Desktop/MuunganoMoney/src/Pin/Fc/Simple/Input.js"],"names":["React","Media","useForm","useNavigate","doc","getDocs","collection","getDoc","updateDoc","increment","onSnapshot","arrayUnion","db","phoneX","sendPhone","frais","Unite","solde","money","Button","Dialog","DialogActions","DialogContent","DialogTitle","DialogContentText","moment","nowField","date","now","prixHash","hashTrue","ReturnInput","small","medium","large","matches","SreenLarge","ScreenSmall","FormInput","pushDocs","Array","verifierSend","verifierGet","navigation","register","handleSubmit","reset","tableClient","setTableClient","useState","tableAgent","setTableAgent","tableUpgrade","setTableUpgrade","tableAdmin","setTableAdmin","tableFrais","setTableFrais","pin","setPin","state","setState","first","setFirst","last","setLast","getstate","setGetstate","getfirst","setGetFirst","getlast","setGetLast","open","setOpen","fullWidth","setFullWidth","maxWidth","setMaxWidth","handleClickOpen","handleClose","useEffect","querySnapshot","forEach","push","id","some","value","sendRef","sendSnap","exists","data","code","firstname","lastname","getRef","getSnap","cdf","window","console","log","onSubmit","length","sendUser","toLowerCase","getUser","soldeAgent","Number","soldeUpgrade","arrayAgent","arrayUpgrade","i","swapInWithDocsAgent","soldeClient","Math","floor","soldeAdmin","arrayClient","arrayAdmin","isSwapInWithClientToClient","swapInWithDocsAgentToClient","soldeFrais","arrayFrais","isSwapInWithClientToAgent","required","getPhone","prix","unite","arrayAgentMoney","upgrade","time","format","send","phone","user","type","get","phoneclient","delay","swap","agentsemoneyRef","upgradeRef","agentFrais","adminFrais","thrift","thriftadmin","thriftcdf","adminRef","spredcdf","agentFraisRef","fraisRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Input.css';\nimport Media from 'react-media';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { doc, getDocs, collection, getDoc, updateDoc, increment, onSnapshot, arrayUnion } from \"firebase/firestore\";\nimport { db } from '../../../firebase';\n\nimport { phoneX } from '../../../Sign/Input';\nimport { sendPhone } from '../../../ValidExFran/Input';\nimport { frais, Unite, solde, money } from '../../../FC/Input';\n\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContentText from '@mui/material/DialogContentText';\n\nimport moment from 'moment';\n\nexport let nowField = moment().date();\nexport let now = moment().date();\n\nexport let prixHash = 0;\nexport let hashTrue = true;\n\n// Input Field Component \nexport default function ReturnInput() {\n return (\n  <Media\n   queries={{\n    small: '(max-width: 599px)',\n    medium: '(min-width: 600px) and (max-width:1199px)',\n    large: '(min-width: 1200px)',\n   }}>\n   {matches => (\n    <>\n     {matches.small && <ScreenSmall />}\n     {matches.medium && <SreenLarge />}\n     {matches.large && <SreenLarge />}\n    </>\n   )}\n  </Media>\n );\n};\nexport const SreenLarge = () => (\n <div className='wrp-input-send-money'>\n  <FormInput />\n\n </div>\n);\nexport const ScreenSmall = () => (\n <div className='wrp-input-send-money-sm'>\n  <FormInput />\n </div>\n);\n\nexport const FormInput = () => {\n\n let pushDocs = new Array();\n let verifierSend;\n let verifierGet;\n\n const navigation = useNavigate();\n const { register, handleSubmit, reset } = useForm();\n\n //  order notebook\n const [tableClient, setTableClient] = React.useState();\n const [tableAgent, setTableAgent] = React.useState();\n const [tableUpgrade, setTableUpgrade] = React.useState();\n const [tableAdmin, setTableAdmin] = React.useState();\n const [tableFrais, setTableFrais] = React.useState();\n\n // send React useState  \n const [pin, setPin] = React.useState(null);\n const [state, setState] = React.useState(null);\n const [first, setFirst] = React.useState('');\n const [last, setLast] = React.useState('');\n\n\n // getting React useState\n const [getstate, setGetstate] = React.useState(null);\n const [getfirst, setGetFirst] = React.useState('');\n const [getlast, setGetLast] = React.useState('');\n\n\n const [open, setOpen] = React.useState(false);\n const [fullWidth, setFullWidth] = React.useState(true);\n const [maxWidth, setMaxWidth] = React.useState('sm');\n\n const handleClickOpen = () => {\n  setOpen(true);\n };\n const handleClose = () => {\n  setOpen(false);\n };\n\n\n React.useEffect(async () => {\n\n  const querySnapshot = await getDocs(collection(db, \"client\"));\n  querySnapshot.forEach((doc) => {\n   pushDocs.push(doc.id);\n  });\n\n  verifierSend = pushDocs.some(value => value == phoneX);\n  verifierGet = pushDocs.some(value => value == sendPhone);\n\n  const sendRef = doc(db, verifierSend ? \"client\" : \"agent\", phoneX);\n  const sendSnap = await getDoc(sendRef);\n\n  if (sendSnap.exists()) {\n   setPin(sendSnap.data().code);\n   setState(sendSnap.data().state);\n   setFirst(sendSnap.data().firstname);\n   setLast(sendSnap.data().lastname);\n  };\n\n  const getRef = doc(db, verifierGet ? \"client\" : \"agent\", sendPhone);\n  const getSnap = await getDoc(getRef);\n\n  if (getSnap.exists()) {\n   setGetstate(getSnap.data().state);\n   setGetFirst(getSnap.data().firstname);\n   setGetLast(getSnap.data().lastname);\n  };\n\n  try {\n   await onSnapshot(doc(db, \"clients\", \"emoney\"), (doc) => {\n    setTableClient(doc.data().cdf);\n   });\n\n   await onSnapshot(doc(db, \"agents\", \"emoney\"), (doc) => {\n    setTableAgent(doc.data().cdf);\n   });\n\n   await onSnapshot(doc(db, \"muungano\", \"commission\"), (doc) => {\n    setTableAdmin(doc.data().cdf);\n   });\n\n   await onSnapshot(doc(db, \"agents\", \"commission\"), (doc) => {\n    setTableFrais(doc.data().cdf);\n   });\n\n   await onSnapshot(doc(db, \"muungano\", \"upgrade\"), (doc) => {\n    setTableUpgrade(doc.data().cdf);\n   });\n\n  } catch {\n   window.console.log('Erreur disponible');\n  }\n\n }, []);\n\n const onSubmit = async (data) => {\n\n  // Checked if value code is length valid\n  if (data.code.length != 6 || pin != data.code) {\n\n   setOpen(true);\n   reset();\n\n  } else {\n\n   const sendUser = first.toLowerCase() + ' ' + last.toLowerCase();\n   const getUser = getfirst.toLowerCase() + ' ' + getlast.toLowerCase();\n\n   if (state == \"agent\" && getstate == \"agent\") {\n\n    hashTrue = false;\n    prixHash = solde;\n\n    let soldeAgent = Number(tableAgent[nowField]) + solde;\n    let soldeUpgrade = Number(tableUpgrade[nowField]) + solde;\n\n    let arrayAgent = tableAgent;\n    let arrayUpgrade = tableUpgrade;\n\n    for (let i = now; i <= 31; i++) {\n     arrayAgent[i] = soldeAgent;\n     arrayUpgrade[i] = soldeUpgrade;\n\n    };\n\n    swapInWithDocsAgent(phoneX, sendPhone, sendUser, getUser, solde, Unite, arrayAgent, arrayUpgrade);\n    navigation('/send-success');\n\n\n   } else if (state == \"client\" && getstate == \"client\") {\n\n    hashTrue = true;\n    prixHash = money;\n\n    let soldeClient = Number(tableClient[nowField]) + Math.floor(Number(money));\n    let soldeUpgrade = Number(tableUpgrade[nowField]) + Math.floor(Number(money));\n    let soldeAdmin = Number(tableAdmin[nowField]) + Math.floor(Number(frais));\n\n    let arrayClient = tableClient;\n    let arrayUpgrade = tableUpgrade;\n    let arrayAdmin = tableAdmin;\n\n    for (let i = now; i <= 31; i++) {\n     arrayClient[i] = soldeClient;\n     arrayUpgrade[i] = soldeUpgrade;\n     arrayAdmin[i] = soldeAdmin;\n\n    }\n\n\n    isSwapInWithClientToClient(phoneX, sendPhone, sendUser, getUser, solde, money, Unite, arrayClient, arrayUpgrade, arrayAdmin);\n    navigation('/send-success');\n\n   } else {\n\n    if (state == \"agent\") {\n\n     hashTrue = false;\n     prixHash = solde;\n\n     let soldeAgent = Number(tableAgent[nowField]) + solde;\n     let soldeUpgrade = Number(tableUpgrade[nowField]) + solde;\n\n     let arrayAgent = tableAgent;\n     let arrayUpgrade = tableUpgrade;\n\n     for (let i = now; i <= 31; i++) {\n      arrayAgent[i] = soldeAgent;\n      arrayUpgrade[i] = soldeUpgrade;\n\n     }\n\n     swapInWithDocsAgentToClient(phoneX, sendPhone, sendUser, getUser, solde, Unite, arrayAgent, arrayUpgrade);\n     navigation('/send-success');\n\n    } else {\n\n     hashTrue = true;\n     prixHash = money;\n\n     let soldeClient = Number(tableClient[nowField]) + Math.floor(Number(money));\n     let soldeUpgrade = Number(tableUpgrade[nowField]) + Math.floor(Number(money));\n     let soldeAdmin = Number(tableAdmin[nowField]) + Math.floor(Number(frais) * 70 / 100);\n     let soldeFrais = Number(tableFrais[nowField]) + Math.floor(Number(frais) * 30 / 100);\n\n     let arrayClient = tableClient;\n     let arrayUpgrade = tableUpgrade;\n     let arrayFrais = tableFrais;\n     let arrayAdmin = tableAdmin;\n\n\n     for (let i = now; i <= 31; i++) {\n      arrayClient[i] = soldeClient;\n      arrayUpgrade[i] = soldeUpgrade;\n      arrayAdmin[i] = soldeAdmin;\n      arrayFrais[i] = soldeFrais;\n\n     }\n\n     isSwapInWithClientToAgent(phoneX, sendPhone, sendUser, getUser, solde, money, Unite, arrayClient, arrayUpgrade, arrayFrais, arrayAdmin);\n     navigation('/send-success');\n    }\n\n   }\n\n  }\n };\n\n\n return (\n  <form onSubmit={handleSubmit(onSubmit)}>\n   <input type='password'\n    placeholder='••••••'\n    name='code' {...register('code', { required: true })}\n   />\n\n   <Dialog\n    fullWidth={fullWidth}\n    maxWidth={maxWidth}\n    open={open}\n    onClose={handleClose}\n   >\n    <DialogTitle>MuunganoMoney</DialogTitle>\n    <DialogContent>\n\n     <DialogContentText>\n      Code d'accès refusé. Veuillez vérifier\n     </DialogContentText>\n\n    </DialogContent>\n    <DialogActions>\n     <Button onClick={handleClose}>Fermer</Button>\n    </DialogActions>\n   </Dialog>\n\n\n   <button className='Btn'>Valider</button>\n  </form>\n )\n};\n\nasync function swapInWithDocsAgent(sendPhone, getPhone, sendUser, getUser, prix, unite, arrayAgentMoney, upgrade) {\n\n let time = moment().format('LLL');\n let send = { date: time, solde: `${prix} ${unite}`, phone: getPhone, user: getUser, type: 'envoyer' }\n let get = { date: time, solde: `${prix} ${unite}`, phone: sendPhone, user: sendUser, type: 'réussi' }\n\n\n const sendRef = doc(db, \"agent\", sendPhone);\n await updateDoc(sendRef, {\n  cdf: increment(-(prix)),\n  money: prix,\n  user: getUser,\n  unite: unite,\n  phoneclient: getPhone,\n  delay: moment().format(),\n  swap: arrayUnion(send)\n });\n\n const getRef = doc(db, \"agent\", getPhone);\n await updateDoc(getRef, {\n  cdf: increment(prix),\n  money: prix,\n  user: sendUser,\n  unite: unite,\n  phoneclient: sendPhone,\n  delay: moment().format(),\n  swap: arrayUnion(get)\n });\n\n const agentsemoneyRef = doc(db, \"agents\", \"emoney\");\n await updateDoc(agentsemoneyRef, {\n  cdf: arrayAgentMoney,\n });\n\n const upgradeRef = doc(db, \"muungano\", \"upgrade\");\n await updateDoc(upgradeRef, {\n  cdf: upgrade,\n });\n\n};\nasync function swapInWithDocsAgentToClient(sendPhone, getPhone, sendUser, getUser, prix, unite, arrayAgentMoney, upgrade) {\n\n let time = moment().format('LLL');\n let send = { date: time, solde: `${prix} ${unite}`, phone: getPhone, user: getUser, type: 'envoyer' }\n let get = { date: time, solde: `${prix} ${unite}`, phone: sendPhone, user: sendUser, type: 'réussi' }\n\n\n const sendRef = doc(db, \"agent\", sendPhone);\n await updateDoc(sendRef, {\n  cdf: increment(-(prix)),\n  money: prix,\n  user: getUser,\n  unite: unite,\n  phoneclient: getPhone,\n  delay: moment().format(),\n  swap: arrayUnion(send)\n });\n\n const getRef = doc(db, \"client\", getPhone);\n await updateDoc(getRef, {\n  cdf: increment(prix),\n  money: prix,\n  user: sendUser,\n  unite: unite,\n  phoneclient: sendPhone,\n  delay: moment().format(),\n  swap: arrayUnion(get)\n });\n\n\n const agentsemoneyRef = doc(db, \"agents\", \"emoney\");\n await updateDoc(agentsemoneyRef, {\n  cdf: arrayAgentMoney,\n });\n\n\n const upgradeRef = doc(db, \"muungano\", \"upgrade\");\n await updateDoc(upgradeRef, {\n  cdf: upgrade,\n });\n\n};\nasync function isSwapInWithClientToAgent(sendPhone, getPhone, sendUser, getUser, prix, money, unite, arrayAgentMoney, upgrade, agentFrais, adminFrais) {\n\n let time = moment().format('LLL');\n let send = { date: time, solde: `${money} ${unite}`, phone: getPhone, user: getUser, type: 'envoyer' }\n let get = { date: time, solde: `${money} ${unite}`, phone: sendPhone, user: sendUser, type: 'réussi' }\n\n\n var thrift = Math.floor(Number(frais * 30 / 100));\n var thriftadmin = Math.floor(Number(frais * 70 / 100));\n\n const sendRef = doc(db, \"client\", sendPhone);\n await updateDoc(sendRef, {\n  cdf: increment(-(prix)),\n  money: money,\n  user: getUser,\n  unite: unite,\n  phoneclient: getPhone,\n  delay: moment().format(),\n  swap: arrayUnion(send)\n });\n\n const getRef = doc(db, \"agent\", getPhone);\n await updateDoc(getRef, {\n  cdf: increment(money),\n  money: money,\n  user: sendUser,\n  unite: unite,\n  thriftcdf: increment(thrift),\n  phoneclient: sendPhone,\n  delay: moment().format(),\n  swap: arrayUnion(get)\n });\n\n const adminRef = doc(db, \"muunganomoney\", \"money\");\n await updateDoc(adminRef, {\n  spredcdf: increment(thriftadmin)\n });\n\n const agentsemoneyRef = doc(db, \"clients\", \"emoney\");\n await updateDoc(agentsemoneyRef, {\n  cdf: arrayAgentMoney,\n });\n\n const upgradeRef = doc(db, \"muungano\", \"upgrade\");\n await updateDoc(upgradeRef, {\n  cdf: upgrade,\n });\n\n const agentFraisRef = doc(db, \"agents\", \"commission\");\n await updateDoc(agentFraisRef, {\n  cdf: agentFrais,\n });\n\n const fraisRef = doc(db, \"muungano\", \"commission\");\n await updateDoc(fraisRef, {\n  cdf: adminFrais,\n });\n\n};\nasync function isSwapInWithClientToClient(sendPhone, getPhone, sendUser, getUser, prix, money, unite, arrayAgentMoney, upgrade, adminFrais) {\n\n let time = moment().format('LLL');\n let send = { date: time, solde: `${money} ${unite}`, phone: getPhone, user: getUser, type: 'envoyer' }\n let get = { date: time, solde: `${money} ${unite}`, phone: sendPhone, user: sendUser, type: 'réussi' }\n\n\n const sendRef = doc(db, \"client\", sendPhone);\n await updateDoc(sendRef, {\n  cdf: increment(-(prix)),\n  money: money,\n  user: getUser,\n  unite: unite,\n  phoneclient: getPhone,\n  delay: moment().format(),\n  swap: arrayUnion(send)\n });\n\n const getRef = doc(db, \"client\", getPhone);\n await updateDoc(getRef, {\n  cdf: increment(money),\n  money: money,\n  user: sendUser,\n  unite: unite,\n  phoneclient: sendPhone,\n  delay: moment().format(),\n  swap: arrayUnion(get)\n });\n\n const adminRef = doc(db, \"muunganomoney\", \"money\");\n await updateDoc(adminRef, {\n  spredcdf: increment(Math.floor(Number(frais)))\n });\n\n const agentsemoneyRef = doc(db, \"clients\", \"emoney\");\n await updateDoc(agentsemoneyRef, {\n  cdf: arrayAgentMoney,\n });\n\n const upgradeRef = doc(db, \"muungano\", \"upgrade\");\n await updateDoc(upgradeRef, {\n  cdf: upgrade,\n });\n\n const fraisRef = doc(db, \"muungano\", \"commission\");\n await updateDoc(fraisRef, {\n  cdf: adminFrais,\n });\n\n};\n"]},"metadata":{},"sourceType":"module"}